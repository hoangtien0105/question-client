{"pageProps":{"data":{"answer":["\n&lt;p&gt;This question have been asked and answered in numerous forums in different formats. Considering them all if we prioritize the locators the list would be as follows :&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: Select element with the specified &lt;code&gt;id&lt;/code&gt; attribute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: Select first element with the specified &lt;code&gt;name&lt;/code&gt; attribute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;link_text&lt;/strong&gt;: Select link (anchor tag) element which contains &lt;em&gt;text&lt;/em&gt; matching the specified &lt;code&gt;LinkText&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;partial_link_text&lt;/strong&gt;: Select link (anchor tag) element which contains &lt;em&gt;text&lt;/em&gt; matching the specified &lt;code&gt;PartialLinkText&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;tag_name&lt;/strong&gt;: Locate Element using a &lt;code&gt;Tag Name&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;class_name&lt;/strong&gt;: Locate Element using a &lt;code&gt;ClassName&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;css_selector&lt;/strong&gt;: Select the element using &lt;code&gt;CssSelectors&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;xpath&lt;/strong&gt;: Locate an element using an &lt;code&gt;XPath&lt;/code&gt; expression.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So the question now is &lt;strong&gt;Whats New&lt;/strong&gt;?&lt;/p&gt;\n&lt;p&gt;The answer is &lt;strong&gt;Selenium have evolved a lot recently&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;WebDriver&lt;/code&gt;&lt;/strong&gt; is now a &lt;a href=&quot;https://www.w3.org/TR/webdriver/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;W3C Recommendation Candidate&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. Things within &lt;code&gt;Selenium&lt;/code&gt; are changing pretty fast. It&apos;s no more only about choosing the locator. We need to use a locator which will :&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;Uniquely identify an element&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;The performance of the locator must be optimized.&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Keeping these two factors in mind, the best strategy would be to &lt;strong&gt;Mock the DOM&lt;/strong&gt;. The &lt;a href=&quot;https://www.w3.org/TR/webdriver/#locator-strategies&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;W3C Recommendation Candidate&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; does mentions the list of the locators as per the below :&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZTq7X.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZTq7X.png&quot; alt=&quot;Selenium_Locators&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So the verdict is clear and concise.&lt;/p&gt;\n    ","\n&lt;p&gt;In my experience &lt;strong&gt;CSS&lt;/strong&gt; is the preferable selector because it can be concise, is well documented and web developers are likely to have more experience and exposure to it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;tag_name&lt;/strong&gt; and &lt;strong&gt;class_name&lt;/strong&gt; can all be easily reproduced with simple CSS so I would avoid explicitly using those.&lt;/p&gt;\n\n&lt;p&gt;e.g. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt; ; &lt;em&gt;#my_id&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;; &lt;em&gt;[name=&quot;my_name&quot;]&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;tag_name&lt;/strong&gt;; &lt;em&gt;my_tag&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;class_name&lt;/strong&gt;; &lt;em&gt;.my_class&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The use of &lt;strong&gt;XPath&lt;/strong&gt; is often much maligned; labeled as slow and unstable.  However I disagree with this view point.&lt;/p&gt;\n\n&lt;p&gt;When I interview people I cringe when they say they avoid Xpath because it is slow and brittle. The speed is no longer a concern, and xpath is only as brittle as the person who wrote it.  However, I prefer the syntax of CSS Selectors so that is why I would choose over XPath for the majority of use cases.&lt;/p&gt;\n\n&lt;p&gt;There are 3 scenarios in which XPath is the better choice;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Multiple CSS Selectors may be replaced with one XPath query (e.g find element then iterate through sub elements can be performed in one xpath)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;XPath can select based on Text where as CSS Selector cannot&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;XPath allows you walk up the DOM Tree which can be really useful if you can only identify a control by its child&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I would always avoid selecting by text if possible, but if I had to, I would prefer to use XPath over the built in &lt;strong&gt;Link Text&lt;/strong&gt; and &lt;strong&gt;Partial Link Text&lt;/strong&gt; methods because the Xpath query woudl allow me to be more expressive and allow me to select more than just anchor tags.&lt;/p&gt;\n\n&lt;p&gt;Finally, once gotcha when using XPath is that &quot;class&quot; is treated as a literal string rather than an array of class names as supported in CSS selectors;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;HTML: &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab cd&quot;&lt;/span&gt;&amp;gt;\n\nCSS matches: div.ab\nCSS matches: div.cd\nCSS matches: div.cd.ab\nCSS matches: div.ab.cd\n\nXPath matches: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab cd&quot;&lt;/span&gt;]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;)]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;)]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;)]\n\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;]\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;]\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cd ab&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":558,"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","content":"\n                \n&lt;p&gt;Selenium includes findElement functions, like so... &lt;/p&gt;\n\n&lt;p&gt;.find_element_by_&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;\nlink_text\npartial_link_text\nname\nclass_name\ntag_name\ncss_selector\nxpath\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s apparent that some are limited by design due to how the HTML page was created, such as id, link_text, name, tag_name, as not all tags may contain an id, link_text, etc... However, the css_selector and xpath can do pretty much everything these can do, and then some, but seem to be limited on what they can interact with. For example, some buttons might not be able to get clicked with the xpath, but can get clicked by css_selector. &lt;/p&gt;\n\n&lt;p&gt;So i&apos;m wondering, when would one want to use one over the other(specifically xpath or css_selector)? &lt;/p&gt;\n\n&lt;p&gt;Are the other functions(id, link_text, etc), pretty much not useful, since (at least) I find that xpath/css_selector can do it as well? &lt;/p&gt;\n\n&lt;p&gt;Are there any benefits to using, lets say, link_text, over xpath/css_selector?  &lt;/p&gt;\n    ","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658","postType":"QUESTION","createdAt":"2022-07-09T17:40:12.000Z","updatedAt":"2022-07-09T17:40:12.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925"},{"title":"Why are global variables evil? [closed]","slug":"why-are-global-variables-evil-closed-1657388260006"},{"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749"},{"title":"Sort ArrayList of custom Objects by property","slug":"sort-arraylist-of-custom-objects-by-property-1657387678339"},{"title":"Convert form data to JavaScript object with jQuery","slug":"convert-form-data-to-javascript-object-with-jquery-1657388036834"},{"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361"},{"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"Dynamic tabs with user-click chosen components","slug":"dynamic-tabs-with-user-click-chosen-components-1657388465232"},{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"}]},"__N_SSG":true}