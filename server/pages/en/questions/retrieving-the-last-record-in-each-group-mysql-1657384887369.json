{"pageProps":{"data":{"answer":["\n&lt;p&gt;MySQL 8.0 now supports &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/window-functions.html&quot; rel=&quot;noreferrer&quot;&gt;windowing functions&lt;/a&gt;, like almost all popular SQL implementations. With this standard syntax, we can write greatest-n-per-group queries:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; ranked_messages &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; m.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; m\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ranked_messages &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This and other approaches to finding &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/example-maximum-column-group-row.html&quot; rel=&quot;noreferrer&quot;&gt;groupwise maximal rows&lt;/a&gt; are illustrated in the MySQL manual.&lt;/p&gt;\n&lt;p&gt;Below is the original answer I wrote for this question in 2009:&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I write the solution this way:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; m1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages m1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; messages m2\n &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (m1.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; m2.name &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; m1.id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; m2.id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; m2.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Regarding performance, one solution or the other can be better, depending on the nature of your data. So you should test both queries and use the one that is better at performance given your database.&lt;/p&gt;\n&lt;p&gt;For example, I have a copy of the &lt;a href=&quot;https://archive.org/details/stackexchange&quot; rel=&quot;noreferrer&quot;&gt;StackOverflow August data dump&lt;/a&gt;.  I&apos;ll use that for benchmarking.  There are 1,114,357 rows in the &lt;code&gt;Posts&lt;/code&gt; table.  This is running on &lt;a href=&quot;https://www.mysql.com/&quot; rel=&quot;noreferrer&quot;&gt;MySQL&lt;/a&gt; 5.0.75 on my Macbook Pro 2.40GHz.&lt;/p&gt;\n&lt;p&gt;I&apos;ll write a query to find the most recent post for a given user ID (mine).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;First using the technique &lt;a href=&quot;https://stackoverflow.com/questions/1313120/sql-retrieving-the-last-record-in-each-group/1313140#1313140&quot;&gt;shown&lt;/a&gt; by @Eric with the &lt;code&gt;GROUP BY&lt;/code&gt; in a subquery:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p1.postid\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Posts p1\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; pi.owneruserid, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(pi.postid) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxpostid\n            &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Posts pi &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; pi.owneruserid) p2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (p1.postid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; p2.maxpostid)\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p1.owneruserid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20860&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; min &lt;span class=&quot;hljs-number&quot;&gt;17.89&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Even the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/using-explain.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt; analysis&lt;/a&gt; takes over 16 seconds:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; select_type &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; type   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; possible_keys              &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; key         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; key_len &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;          &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt;    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Extra       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;derived2&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;                       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;76756&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; \n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p1         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; eq_ref &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt;,PostId,OwnerUserId &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p2.maxpostid &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; \n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; DERIVED     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; pi         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; index  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;                       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; OwnerUserId &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1151268&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; index &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;16.09&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Now produce the same query result using &lt;a href=&quot;https://stackoverflow.com/questions/121387/fetch-the-row-which-has-the-max-value-for-a-column/123481#123481&quot;&gt;my technique&lt;/a&gt; with &lt;code&gt;LEFT JOIN&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p1.postid\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Posts p1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; posts p2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (p1.owneruserid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; p2.owneruserid &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; p1.postid &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; p2.postid)\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p2.postid &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; p1.owneruserid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20860&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.28&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;EXPLAIN&lt;/code&gt; analysis shows that both tables are able to use their indexes:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; select_type &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; type &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; possible_keys              &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; key         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; key_len &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Extra                                &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; SIMPLE      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p1    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; OwnerUserId                &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; OwnerUserId &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; const &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1384&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; index                          &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; \n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; SIMPLE      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p2    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt;,PostId,OwnerUserId &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; OwnerUserId &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;       &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; const &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1384&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; index; &lt;span class=&quot;hljs-keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Here&apos;s the DDL for my &lt;code&gt;Posts&lt;/code&gt; table:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; `posts` (\n  `PostId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; auto_increment,\n  `PostTypeId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `AcceptedAnswerId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `ParentId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `CreationDate` datetime &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `Score` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  `ViewCount` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  `Body` text &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `OwnerUserId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `OwnerDisplayName` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `LastEditorUserId` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `LastEditDate` datetime &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `LastActivityDate` datetime &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `Title` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  `Tags` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  `AnswerCount` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  `CommentCount` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  `FavoriteCount` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  `ClosedDate` datetime &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY  (`PostId`),\n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNIQUE&lt;/span&gt; KEY `PostId` (`PostId`),\n  KEY `PostTypeId` (`PostTypeId`),\n  KEY `AcceptedAnswerId` (`AcceptedAnswerId`),\n  KEY `OwnerUserId` (`OwnerUserId`),\n  KEY `LastEditorUserId` (`LastEditorUserId`),\n  KEY `ParentId` (`ParentId`),\n  &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; `posts_ibfk_1` &lt;span class=&quot;hljs-keyword&quot;&gt;FOREIGN&lt;/span&gt; KEY (`PostTypeId`) &lt;span class=&quot;hljs-keyword&quot;&gt;REFERENCES&lt;/span&gt; `posttypes` (`PostTypeId`)\n) ENGINE&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;InnoDB;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Note to commenters: If you want another benchmark with a different version of MySQL, a different dataset, or different table design, feel free to do it yourself. I have shown the technique above. Stack Overflow is here to show you how to do software development work, not to do all the work for you.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;UPD: 2017-03-31, the version &lt;a href=&quot;https://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-5.html#mysqld-5-7-5-sql-mode&quot; rel=&quot;noreferrer&quot;&gt;5.7.5&lt;/a&gt; of MySQL made the ONLY_FULL_GROUP_BY switch enabled by default (hence, non-deterministic GROUP BY queries became disabled). Moreover, they updated the GROUP BY implementation and the solution might not work as expected anymore even with the disabled switch. One needs to check.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Bill Karwin&apos;s solution above works fine when item count within groups is rather small, but the performance of the query becomes bad when the groups are rather large, since the solution requires about &lt;code&gt;n*n/2 + n/2&lt;/code&gt; of only &lt;code&gt;IS NULL&lt;/code&gt; comparisons.&lt;/p&gt;\n\n&lt;p&gt;I made my tests on a InnoDB table of &lt;code&gt;18684446&lt;/code&gt; rows with &lt;code&gt;1182&lt;/code&gt; groups. The table contains testresults for functional tests and has the &lt;code&gt;(test_id, request_id)&lt;/code&gt; as the primary key. Thus, &lt;code&gt;test_id&lt;/code&gt; is a group and I was searching for the last &lt;code&gt;request_id&lt;/code&gt; for each &lt;code&gt;test_id&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Bill&apos;s solution has already been running for several hours on my dell e4310 and I do not know when it is going to finish even though it operates on a coverage index (hence &lt;code&gt;using index&lt;/code&gt; in EXPLAIN).&lt;/p&gt;\n\n&lt;p&gt;I have a couple of other solutions that are based on the same ideas:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if the underlying index is BTREE index (which is usually the case), the largest &lt;code&gt;(group_id, item_value)&lt;/code&gt; pair is the last value within each &lt;code&gt;group_id&lt;/code&gt;, that is the first for each &lt;code&gt;group_id&lt;/code&gt; if we walk through the index in descending order;&lt;/li&gt;\n&lt;li&gt;if we read the values which are covered by an index, the values are read in the order of the index;&lt;/li&gt;\n&lt;li&gt;each index implicitly contains primary key columns appended to that (that is the primary key is in the coverage index). In solutions below I operate directly on the primary key, in you case, you will just need to add primary key columns in the result.&lt;/li&gt;\n&lt;li&gt;in many cases it is much cheaper to collect the required row ids in the required order in a subquery and join the result of the subquery on the id. Since for each row in the subquery result MySQL will need a single fetch based on primary key, the subquery will be put first in the join and the rows will be output in the order of the ids in the subquery (if we omit explicit ORDER BY for the join)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.mysqlperformanceblog.com/2009/09/12/3-ways-mysql-uses-indexes&quot; rel=&quot;noreferrer&quot;&gt;3 ways MySQL uses indexes&lt;/a&gt; is a great article to understand some details.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This one is incredibly fast, it takes about 0,8 secs on my 18M+ rows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; test_id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(request_id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; request_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; testresults\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; test_id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to change the order to ASC, put it in a subquery, return the ids only and use that as the subquery to join to the rest of the columns:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; test_id, request_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; test_id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(request_id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; request_id\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; testresults\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; test_id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ids\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; test_id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one takes about 1,2 secs on my data.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is another solution that takes about 19 seconds for my table:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; test_id, request_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; testresults, (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@group&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; init\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; IF(IFNULL(&lt;span class=&quot;hljs-variable&quot;&gt;@group&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@group&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;test_id, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; test_id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, request_id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It returns tests in descending order as well. It is much slower since it does a full index scan but it is here to give you an idea how to output N max rows for each group. &lt;/p&gt;\n\n&lt;p&gt;The disadvantage of the query is that its result cannot be cached by the query cache.&lt;/p&gt;\n    ","\n&lt;p&gt;Use your &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/subqueries.html&quot; rel=&quot;noreferrer&quot;&gt;subquery&lt;/a&gt; to return the correct grouping, because you&apos;re halfway there.&lt;/p&gt;\n\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n    messages a\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; \n        (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; name, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxid &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; name) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;\n        a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.maxid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If it&apos;s not &lt;code&gt;id&lt;/code&gt; you want the max of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n    messages a\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; \n        (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; name, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(other_col) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; other_col \n         &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; name) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;\n        a.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.name\n        &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a.other_col &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.other_col\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, you avoid correlated subqueries and/or ordering in your subqueries, which tend to be very slow/inefficient.&lt;/p&gt;\n    ","\n&lt;p&gt;I arrived at a different solution, which is to get the IDs for the last post within each group, then select from the messages table using the result from the first query as the argument for a &lt;code&gt;WHERE x IN&lt;/code&gt; construct:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, name, other_columns\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(id)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&apos;t know how this performs compared to some of the other solutions, but it worked spectacularly for my table with 3+ million rows. (4 second execution with 1200+ results)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;This should work both on MySQL and SQL Server.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Solution by sub query &lt;a href=&quot;http://sqlfiddle.com/#!9/a2bdc/1&quot; rel=&quot;noreferrer&quot;&gt;fiddle Link&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Name)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution By join condition &lt;a href=&quot;http://sqlfiddle.com/#!9/a2bdc/3&quot; rel=&quot;noreferrer&quot;&gt;fiddle link&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; m1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages m1 \n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; messages m2 \n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; ( m1.id&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;m2.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; m1.name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;m2.name )\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; m2.id &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Reason for this post is to give fiddle link only.\nSame SQL is already provided in other answers.&lt;/p&gt;\n    ","\n&lt;p&gt;An approach with considerable speed is as follows.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages a\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(Id) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; a.Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Name)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Id  Name    Other_Columns\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   A   A_data_3\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   B   B_data_2\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   C   C_data_1\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are two suggestions.  First, if mysql supports ROW_NUMBER(), it&apos;s very simple:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; Ranked &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Id, Name, OtherColumns,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Name\n      &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rk\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Id, Name, OtherColumns\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rk &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m assuming by &quot;last&quot; you mean last in Id order. If not, change the ORDER BY clause of the ROW_NUMBER() window accordingly. If ROW_NUMBER() isn&apos;t available, this is another solution:&lt;/p&gt;\n\n&lt;p&gt;Second, if it doesn&apos;t, this is often a good way to proceed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  Id, Name, OtherColumns\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; M2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; M2.Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; messages.Name\n  &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; M2.Id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; messages.Id\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In other words, select messages where there is no later-Id message with the same Name.&lt;/p&gt;\n    ","\n&lt;p&gt;we will look at how you can use MySQL at getting the last record in a Group By of records. For example if you have this result set of posts.&lt;/p&gt;\n\n&lt;h2&gt;&lt;code&gt;id   category_id  post_title&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;1      1                 Title 1&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;2      1                 Title 2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;3      1                 Title 3&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;4      2                 Title 4&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;5      2                 Title 5&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;6      3                 Title 6&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I want to be able to get the last post in each category which are Title 3, Title 5 and Title 6. To get the posts by the category you will use the MySQL Group By keyboard.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;select * from posts group by category_id&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But the results we get back from this query is.&lt;/p&gt;\n\n&lt;h2&gt;&lt;code&gt;id   category_id  post_title&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;1      1                  Title 1&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;4      2                  Title 4&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;6      3                  Title 6&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The group by will always return the first record in the group on the result set.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;SELECT id, category_id, post_title\nFROM posts\nWHERE id IN (\n    SELECT MAX(id)\n    FROM posts\n    GROUP BY category_id\n);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This will return the posts with the highest IDs in each group.&lt;/p&gt;\n\n&lt;h2&gt;&lt;code&gt;id   category_id  post_title&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;3      1                  Title 3&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;5      2                  Title 5&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;6      3                  Title 6&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://paulund.co.uk/get-last-record-in-each-mysql-group&quot; rel=&quot;noreferrer&quot;&gt;Reference Click Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Clearly there are lots of different ways of getting the same results, your question seems to be what is an efficient way of getting the last results in each group in MySQL. If you are working with huge amounts of data and assuming you are using InnoDB with even the latest versions of MySQL (such as 5.7.21 and 8.0.4-rc) then there might not be an efficient way of doing this.&lt;/p&gt;\n\n&lt;p&gt;We sometimes need to do this with tables with even more than 60 million rows.&lt;/p&gt;\n\n&lt;p&gt;For these examples I will use data with only about 1.5 million rows where the queries would need to find results for all groups in the data. In our actual cases we would often need to return back data from about 2,000 groups (which hypothetically would not require examining very much of the data).&lt;/p&gt;\n\n&lt;p&gt;I will use the following tables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; temperature(\n  id &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; UNSIGNED &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT, \n  groupID &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; UNSIGNED &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, \n  recordedTimestamp &lt;span class=&quot;hljs-type&quot;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, \n  recordedValue &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  INDEX groupIndex(groupID, recordedTimestamp), \n  &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; TEMPORARY &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; selected_group(id &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt; UNSIGNED &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY(id)); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The temperature table is populated with about 1.5 million random records, and with 100 different groups.\nThe selected_group is populated with those 100 groups (in our cases this would normally be less than 20% for all of the groups).&lt;/p&gt;\n\n&lt;p&gt;As this data is random it means that multiple rows can have the same recordedTimestamps. What we want is to get a list of all of the selected groups in order of groupID with the last recordedTimestamp for each group, and if the same group has more than one matching row like that then the last matching id of those rows.&lt;/p&gt;\n\n&lt;p&gt;If hypothetically MySQL had a last() function which returned values from the last row in a special ORDER BY clause then we could simply do: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;last&lt;/span&gt;(t1.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id, \n  t1.groupID, \n  &lt;span class=&quot;hljs-keyword&quot;&gt;last&lt;/span&gt;(t1.recordedTimestamp) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedTimestamp, \n  &lt;span class=&quot;hljs-keyword&quot;&gt;last&lt;/span&gt;(t1.recordedValue) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.recordedTimestamp, t1.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.groupID;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which would only need to examine a few 100 rows in this case as it doesn&apos;t use any of the normal GROUP BY functions. This would execute in 0 seconds and hence be highly efficient.\nNote that normally in MySQL we would see an ORDER BY clause following the GROUP BY clause however this ORDER BY clause is used to determine the ORDER for the last() function, if it was after the GROUP BY then it would be ordering the GROUPS. If no GROUP BY clause is present then the last values will be the same in all of the returned rows.&lt;/p&gt;\n\n&lt;p&gt;However MySQL does not have this so let&apos;s look at different ideas of what it does have and prove that none of these are efficient.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t2.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t2 \n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.recordedTimestamp &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, t2.id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n  LIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 3,009,254 rows and took ~0.859 seconds on 5.7.21 and slightly longer on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; ( \n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t2.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id   \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t3.groupID, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t3.recordedTimestamp) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedTimestamp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n    &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t3 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t3.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t3.groupID\n  ) t4 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t4.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t4.recordedTimestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.recordedTimestamp\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.groupID\n) t5 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t5.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 1,505,331 rows and took ~1.25 seconds on 5.7.21 and slightly longer on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; ( \n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t2.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id   \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t3.groupID, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t3.recordedTimestamp) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedTimestamp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n    &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t3 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t3.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t3.groupID\n  ) t4 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t4.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t4.recordedTimestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.recordedTimestamp\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.groupID\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.groupID;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 3,009,685 rows and took ~1.95 seconds on 5.7.21 and slightly longer on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 4&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t2.id)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t2 \n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t2.recordedTimestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t3.recordedTimestamp)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; temperature t3 \n      &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t3.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n    )\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 6,137,810 rows and took ~2.2 seconds on 5.7.21 and slightly longer on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 5&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    t2.id, \n    t2.groupID, \n    t2.recordedTimestamp, \n    t2.recordedValue, \n    &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.recordedTimestamp &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, t2.id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rowNumber\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g \n  &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n) t1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.rowNumber &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 6,017,808 rows and took ~4.2 seconds on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 6&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    &lt;span class=&quot;hljs-built_in&quot;&gt;last_value&lt;/span&gt;(t2.id) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id, \n    t2.groupID, \n    &lt;span class=&quot;hljs-built_in&quot;&gt;last_value&lt;/span&gt;(t2.recordedTimestamp) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedTimestamp, \n    &lt;span class=&quot;hljs-built_in&quot;&gt;last_value&lt;/span&gt;(t2.recordedValue) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; recordedValue\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WINDOW&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.groupID \n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t2.recordedTimestamp, t2.id \n    &lt;span class=&quot;hljs-keyword&quot;&gt;RANGE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BETWEEN&lt;/span&gt; UNBOUNDED PRECEDING &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; UNBOUNDED FOLLOWING\n  )\n) t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.groupID;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This examined 6,017,908 rows and took ~17.5 seconds on 8.0.4-rc&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 7&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.id, t1.groupID, t1.recordedTimestamp, t1.recordedValue \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; selected_group g\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t1 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; temperature t2 \n  &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.groupID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; g.id \n  &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; (\n    t2.recordedTimestamp &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; t1.recordedTimestamp \n    &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; (t2.recordedTimestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.recordedTimestamp &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; t1.id)\n  )\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.groupID;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one was taking forever so I had to kill it.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is another way to get the last related record using &lt;code&gt;GROUP_CONCAT&lt;/code&gt; with order by and &lt;code&gt;SUBSTRING_INDEX&lt;/code&gt; to pick one of the record from the list &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  `Id`,\n  `Name`,\n  SUBSTRING_INDEX(\n    GROUP_CONCAT(\n      `Other_Columns` \n      &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; `Id` &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; \n      SEPARATOR &lt;span class=&quot;hljs-string&quot;&gt;&apos;||&apos;&lt;/span&gt;\n    ),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;||&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n  ) Other_Columns \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n  messages \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; `Name` \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above query will group the all the &lt;code&gt;Other_Columns&lt;/code&gt; that are in same &lt;code&gt;Name&lt;/code&gt; group  and using &lt;code&gt;ORDER BY id DESC&lt;/code&gt; will join all the &lt;code&gt;Other_Columns&lt;/code&gt; in a specific group in descending order  with the provided separator in my case i have used &lt;code&gt;||&lt;/code&gt; ,using &lt;code&gt;SUBSTRING_INDEX&lt;/code&gt; over this list will pick the first one &lt;/p&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://sqlfiddle.com/#!2/843079/4&quot; rel=&quot;noreferrer&quot;&gt;Fiddle Demo&lt;/a&gt;&lt;/h2&gt;\n    ","\n&lt;p&gt;I&apos;ve not yet tested with large DB but I think this could be faster than joining tables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;Max&lt;/span&gt;(Id) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Name\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  column1,\n  column2 \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n  table_name \n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; \n  (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(id) \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    table_name \n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; column1) \n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; column1 ;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Hi @Vijay Dev if your table &lt;strong&gt;messages&lt;/strong&gt; contains &lt;strong&gt;Id&lt;/strong&gt; which is auto increment primary key then to fetch the latest record basis on the primary key your query should read as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; m1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages m1 &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; lastmsgId &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Name) m2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; m1.Id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;m2.lastmsgId\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can take view from here as well. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://sqlfiddle.com/#!9/ef42b/9&quot; rel=&quot;noreferrer&quot;&gt;http://sqlfiddle.com/#!9/ef42b/9&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;FIRST SOLUTION&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; d1.ID,Name,City &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Demo_User d1\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(ID) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; ID &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Demo_User &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt; NAME) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; P &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (d1.ID&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;P.ID);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;SECOND SOLUTION&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Demo_User &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; ID &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; T &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; NAME ;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Is there any way we could use this method to delete duplicates in a table? The result set is basically a collection of unique records, so if we could delete all records not in the result set, we would effectively have no duplicates? I tried this but mySQL gave a 1093 error. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; m1.id  \n &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages m1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; messages m2  \n &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (m1.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; m2.name &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; m1.id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; m2.id)  \n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; m2.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there a way to maybe save the output to a temp variable then delete from  NOT IN (temp variable)? @Bill thanks for a very useful solution.&lt;/p&gt;\n\n&lt;p&gt;EDIT: Think i found the solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; IF &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; UniqueIDs; \n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; Temporary &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; UniqueIDs (id &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;)); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; UniqueIDs \n    (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; T1.ID &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T1 &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; \n    (T1.Field1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.Field1 &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; T1.Field2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.Field2 #Comparison Fields  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; T1.ID &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; T2.ID) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; T2.ID &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ID &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UniqueIDs);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; jos_categories.title &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; name,\n       joined .catid,\n       joined .title,\n       joined .introtext\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   jos_categories\n       &lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; `title`,\n                                  catid,\n                                  `created`,\n                                  introtext\n                           &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   `jos_content`\n                           &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  `sectionid` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n                           &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; `id` &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; yes\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; `yes`.`catid` &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; `yes`.`created` &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; joined\n         &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt;( joined.catid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jos_categories.id )  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is my solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; NAME,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(MESSAGES) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; NAME) MESSAGES \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MESSAGE;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table_name &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; primary_key &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(primary_key) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table_name &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; column_name )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;**&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hi, this query might help :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;** &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n  message \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; \n  `Id` &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n      &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(`Id`) \n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n      message \n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; \n      `Name`\n  ) \n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; \n   `Id` &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i find best solution in &lt;a href=&quot;https://dzone.com/articles/get-last-record-in-each-mysql-group&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://dzone.com/articles/get-last-record-in-each-mysql-group&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; `data` &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; `id` &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(`id`) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; `data` &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; `name_id`)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The below query will work fine as per your question.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; M1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MESSAGES M1,\n(\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; SUBSTR(Others_data,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(Others_data) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Max_Others_data\n &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MESSAGES\n &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n) M2\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; M1.Others_data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; M2.Max_Others_data\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Others_data;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want the last row for each &lt;code&gt;Name&lt;/code&gt;, then you can give a row number to each row group by the &lt;code&gt;Name&lt;/code&gt; and order by &lt;code&gt;Id&lt;/code&gt; in descending order.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;QUERY&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.Id, \n       t1.Name, \n       t1.Other_Columns\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n(\n     &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Id, \n            Name, \n            Other_Columns,\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curA&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curRow&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curRow&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curRow&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curA&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Name &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt; \n    ) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn \n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages t, \n    (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@curRow&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@curA&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) r \n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Name,Id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; \n)t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t1.rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.Id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;&lt;a href=&quot;http://sqlfiddle.com/#!9/7c6d90/3&quot; rel=&quot;nofollow&quot;&gt;SQL Fiddle&lt;/a&gt;&lt;/h1&gt;\n    ","\n&lt;p&gt;How about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (name) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name, id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I had similar issue (on postgresql tough) and on a 1M records table. This solution takes 1.7s vs 44s produced by the one with LEFT JOIN.\nIn my case I had to filter the corrispondant of your &lt;em&gt;name&lt;/em&gt; field against NULL values, resulting in even better performances by 0.2 secs&lt;/p&gt;\n    ","\n&lt;p&gt;If performance is really your concern you can introduce a new column on the table called &lt;code&gt;IsLastInGroup&lt;/code&gt; of type BIT. &lt;/p&gt;\n\n&lt;p&gt;Set it to true on the columns which are last and maintain it with every row insert/update/delete. Writes will be slower, but you&apos;ll benefit on reads. It depends on your use case and I recommend it only if you&apos;re read-focused.&lt;/p&gt;\n\n&lt;p&gt;So your query will look like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Messages &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; IsLastInGroup &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;What about:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; name \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I have tested it on sqlite and it returns all columns and max id value for all names.&lt;/p&gt;\n    ","\n&lt;p&gt;MariaDB 10.3 and newer using &lt;a href=&quot;https://mariadb.com/kb/en/group_concat/&quot; rel=&quot;nofollow noreferrer&quot;&gt;GROUP_CONCAT&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The idea is to use &lt;code&gt;ORDER BY&lt;/code&gt; + &lt;code&gt;LIMIT&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; GROUP_CONCAT(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; LIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id,\n       name,\n       GROUP_CONCAT(Other_columns &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; LIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Other_columns\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dbfiddle.uk/?rdbms=mariadb_10.3&amp;amp;fiddle=85d1fe8efc39f44a6723303522e0e23b&quot; rel=&quot;nofollow noreferrer&quot;&gt;db&amp;lt;&amp;gt;fiddle demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you need the most recent or oldest record of a text column in a grouped query, and you would rather not use a subquery, you can do this...&lt;/p&gt;\n&lt;p&gt;Ex. You have a list of movies and need to get the count in the series and the latest movie&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;id&lt;/th&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;series&lt;/th&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;name&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;1&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Star Wars&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;A New hope&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;2&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Star Wars&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;The Empire Strikes Back&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;3&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Star Wars&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Return of The Jedi&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(id), series, &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(CONCAT(id, name)), LENGTH(id) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Movies\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; series\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This returns...&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;id&lt;/th&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;series&lt;/th&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;name&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;3&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Star Wars&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Return of The Jedi&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;MAX will return the row with the highest value, so by concatenating the id to the name, you now will get the newest record, then just strip off the id for your final result.&lt;/p&gt;\n&lt;p&gt;More efficient than using a subquery.&lt;/p&gt;\n&lt;p&gt;So for the given example:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(Id), Name, &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(CONCAT(Id, Other_Columns)), LENGTH(Id) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Name\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Happy coding, and &quot;May The Force Be With You&quot; :)&lt;/p&gt;\n    ","\n&lt;p&gt;Hope below Oracle query can help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; Temp_table &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; id, name, othercolumns, &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; ID \n    &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rank &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; messages\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; id, name,othercolumns &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Temp_table &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; rank&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another approach : &lt;/p&gt;\n\n&lt;p&gt;Find the propertie with the max m2_price withing each program (n properties in 1 program) : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; properties p\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(m2_price) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_price \n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; properties \n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; program_id\n) p2 &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; (p.program_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; p2.program_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;having&lt;/span&gt; p.m2_price &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; max_price\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As of MySQL 8.0.14, this can also be achieved using &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/lateral-derived-tables.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lateral Derived Tables&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages t\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LATERAL&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; name, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.name\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name\n) trn &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; trn.name &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; trn.id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://dbfiddle.uk/?rdbms=mysql_8.0&amp;amp;fiddle=3d743790ddac81e6b5b99a762fa41c31&quot; rel=&quot;nofollow noreferrer&quot;&gt;db&amp;lt;&amp;gt;fiddle&lt;/a&gt;&lt;/p&gt;\n    "],"id":183,"title":"Retrieving the last record in each group - MySQL","content":"\n                \n&lt;p&gt;There is a table &lt;code&gt;messages&lt;/code&gt; that contains data as shown below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;Id   Name   Other_Columns\n&lt;span class=&quot;hljs-comment&quot;&gt;-------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A       A_data_1\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    A       A_data_2\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    A       A_data_3\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    B       B_data_1\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    B       B_data_2\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    C       C_data_1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I run a query &lt;code&gt;select * from messages group by name&lt;/code&gt;, I will get the result as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A       A_data_1\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    B       B_data_1\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    C       C_data_1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What query will return the following result?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    A       A_data_3\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    B       B_data_2\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    C       C_data_1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is, the last record in each group should be returned.&lt;/p&gt;\n\n&lt;p&gt;At present, this is the query that I use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; messages\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; x\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this looks highly inefficient. Any other ways to achieve the same result?&lt;/p&gt;\n    ","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369","postType":"QUESTION","createdAt":"2022-07-09T16:41:27.000Z","updatedAt":"2022-07-09T16:41:27.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"What to do Regular expression pattern doesn't match anywhere in string?","slug":"what-to-do-regular-expression-pattern-doesn't-match-anywhere-in-string-1657388095896"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"How to return DataSnapshot value as a result of a method?","slug":"how-to-return-datasnapshot-value-as-a-result-of-a-method-1657387538165"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Why is my Spring @Autowired field null?","slug":"why-is-my-spring-@autowired-field-null-1657384705291"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"How can I combine two strings together in PHP?","slug":"how-can-i-combine-two-strings-together-in-php-1657388279401"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"R cannot be resolved - Android error","slug":"r-cannot-be-resolved-android-error-1657388526258"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"Using regular expressions to parse HTML: why not?","slug":"using-regular-expressions-to-parse-html:-why-not-1657387543969"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"}]},"__N_SSG":true}