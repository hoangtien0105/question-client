{"pageProps":{"data":{"answer":["\n&lt;p&gt;Read it backwards (as driven by &lt;a href=&quot;http://c-faq.com/decl/spiral.anderson.html&quot; rel=&quot;noreferrer&quot;&gt;Clockwise/Spiral Rule&lt;/a&gt;):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;int*&lt;/code&gt; - pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const *&lt;/code&gt; - pointer to const int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const&lt;/code&gt; - const pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const * const&lt;/code&gt; - const pointer to const int&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now the first &lt;code&gt;const&lt;/code&gt; can be on either side of the type so:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;const int *&lt;/code&gt; == &lt;code&gt;int const *&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;const int * const&lt;/code&gt; == &lt;code&gt;int const * const&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you want to go really crazy you can do things like this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;int **&lt;/code&gt; - pointer to pointer to int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int ** const&lt;/code&gt; - a const pointer to a pointer to an int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const *&lt;/code&gt; - a pointer to a const pointer to an int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int const **&lt;/code&gt; - a pointer to a pointer to a const int&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int * const * const&lt;/code&gt; - a const pointer to a const pointer to an int&lt;/li&gt;\n&lt;li&gt;...&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And to make sure we are clear on the meaning of &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, c = &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;* foo;     &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to constant int.&lt;/span&gt;\nfoo = &amp;amp;a;           &lt;span class=&quot;hljs-comment&quot;&gt;// assignment to where foo points to.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* dummy statement*/&lt;/span&gt;\n*foo = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;           &lt;span class=&quot;hljs-comment&quot;&gt;// the value of a canÂ´t get changed through the pointer.&lt;/span&gt;\n\nfoo = &amp;amp;b;           &lt;span class=&quot;hljs-comment&quot;&gt;// the pointer foo can be changed.&lt;/span&gt;\n\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bar = &amp;amp;c;  &lt;span class=&quot;hljs-comment&quot;&gt;// constant pointer to int &lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// note, you actually need to set the pointer &lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// here because you can&apos;t change it later ;)&lt;/span&gt;\n\n*bar = &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;            &lt;span class=&quot;hljs-comment&quot;&gt;// the value of c can be changed through the pointer.    &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* dummy statement*/&lt;/span&gt;\nbar = &amp;amp;a;             &lt;span class=&quot;hljs-comment&quot;&gt;// not possible because bar is a constant pointer.           &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; is a variable pointer to a constant integer. This lets you change what you point to but not the value that you point to. Most often this is seen with C-style strings where you have a pointer to a &lt;code&gt;const char&lt;/code&gt;. You may change which string you point to but you can&apos;t change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn&apos;t be changed.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bar&lt;/code&gt; is a constant or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a &lt;code&gt;T* const&lt;/code&gt; pointer unless you need to allow &lt;code&gt;NULL&lt;/code&gt; pointers.&lt;/p&gt;\n    ","\n&lt;p&gt;For those who don&apos;t know about Clockwise/Spiral Rule:\nStart from the name of the variable, move clockwisely (in this case, move backward) to the next &lt;strong&gt;pointer&lt;/strong&gt; or &lt;strong&gt;type&lt;/strong&gt;. Repeat until expression ends.&lt;/p&gt;\n\n&lt;p&gt;Here is a demo:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/sT6ng.png&quot; alt=&quot;pointer to int&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Zt0G2.png&quot; alt=&quot;const pointer to int const&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/kXH8P.png&quot; alt=&quot;pointer to int const&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UeqZO.png&quot; alt=&quot;pointer to const int&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/f5ftV.png&quot; alt=&quot;const pointer to int&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think everything is answered here already, but I just want to add that you should beware of &lt;code&gt;typedef&lt;/code&gt;s! They&apos;re NOT just text replacements.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ASTRING;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; ASTRING astring;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The type of &lt;code&gt;astring&lt;/code&gt; is &lt;code&gt;char * const&lt;/code&gt;, not &lt;code&gt;const char *&lt;/code&gt;. This is one reason I always tend to put &lt;code&gt;const&lt;/code&gt; to the right of the type, and never at the start.&lt;/p&gt;\n    ","\n&lt;p&gt;Like pretty much everyone pointed out:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/const-correctness#const-ptr-vs-ptr-const&quot; rel=&quot;noreferrer&quot;&gt;Whats the difference between &lt;code&gt;const X* p&lt;/code&gt;, &lt;code&gt;X* const p&lt;/code&gt; and &lt;code&gt;const X* const p&lt;/code&gt;?&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You have to read pointer declarations\n  right-to-left.&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;const X* p&lt;/code&gt; means &quot;p points to an X that is const&quot;: the X object can&apos;t be changed via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;X* const p&lt;/code&gt; means &quot;p is a const pointer to an X that is non-const&quot;: you can&apos;t change the pointer p itself, but you can change the X object via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;&lt;code&gt;const X* const p&lt;/code&gt; means &quot;p is a const pointer to an X that is const&quot;: you can&apos;t change the pointer p itself, nor can you change the X object via p.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant reference:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A reference to a variable (here int), which is constant. We pass the variable as a reference mainly, because references are smaller in size than the actual value, but there is a side effect and that is because it is like an alias to the actual variable. We may accidentally change the main variable through our full access to the alias, so we make it constant to prevent this side effect.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var0 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &amp;amp;ptr1 = var0;\nptr1 = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\nvar0 = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant pointers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Once a constant pointer points to a variable then it cannot point to any other variable. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr2 = &amp;amp;var1;\nptr2 = &amp;amp;var2; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pointer to constant&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A pointer through which one cannot change the value of a variable it points is known as a pointer to constant.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * ptr3 = &amp;amp;var2;\n*ptr3 = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constant pointer to a constant&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A constant pointer to a constant is a pointer that can neither change the address it&apos;s pointing to and nor can it change the value kept at that address.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var3 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; var4 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr4 = &amp;amp;var3;\n*ptr4 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n ptr4 = &amp;amp;var4; &lt;span class=&quot;hljs-comment&quot;&gt;// Error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The general rule is that the &lt;code&gt;const&lt;/code&gt; keyword applies to what precedes it immediately. Exception, a starting &lt;code&gt;const&lt;/code&gt; applies to what follows.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;const int*&lt;/code&gt; is the same as &lt;code&gt;int const*&lt;/code&gt; and means &lt;strong&gt;&quot;pointer to constant int&quot;&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;const int* const&lt;/code&gt; is the same as &lt;code&gt;int const* const&lt;/code&gt; and means &lt;strong&gt;&quot;constant pointer to constant int&quot;&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;\nFor the Dos and Don&apos;ts, if &lt;a href=&quot;https://stackoverflow.com/questions/1142191/how-to-return-const-float-from-a-c-function/1142323#1142323&quot;&gt;this answer&lt;/a&gt; isn&apos;t enough, could you be more precise about what you want?&lt;/p&gt;\n    ","\n&lt;p&gt;This question shows &lt;strong&gt;precisely&lt;/strong&gt; why I like to do things the way I mentioned in my question &lt;a href=&quot;https://stackoverflow.com/questions/988069/in-c-is-const-after-type-id-acceptable&quot;&gt;is const after type id acceptable?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In short, I find the easiest way to remember the rule is that the &quot;const&quot; goes &lt;em&gt;after&lt;/em&gt; the thing it applies to. So in your question, &quot;int const *&quot; means that the int is constant, while &quot;int * const&quot; would mean that the pointer is constant.&lt;/p&gt;\n\n&lt;p&gt;If someone decides to put it at the very front (eg: &quot;const int *&quot;), as a special exception in that case it applies to the thing after it.&lt;/p&gt;\n\n&lt;p&gt;Many people like to use that special exception because they think it looks nicer. I dislike it, because it is an exception, and thus confuses things.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple Use of &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The simplest use is to declare a named constant. To do this, one declares a constant as if it was a variable but add &lt;code&gt;const&lt;/code&gt; before it. One has to initialize it immediately in the constructor because, of course, one cannot set the value later as that would be altering it. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Constant1=&lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will create an integer constant, unimaginatively called &lt;code&gt;Constant1&lt;/code&gt;, with the value 96.&lt;/p&gt;\n\n&lt;p&gt;Such constants are useful for parameters which are used in the program but are do not need to be changed after the program is compiled. It has an advantage for programmers over the C preprocessor &lt;code&gt;#define&lt;/code&gt; command in that it is understood &amp;amp; used by the compiler itself, not just substituted into the program text by the preprocessor before reaching the main compiler, so error messages are much more helpful.&lt;/p&gt;\n\n&lt;p&gt;It also works with pointers but one has to be careful where &lt;code&gt;const&lt;/code&gt; to determine whether the pointer or what it points to is constant or both. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * Constant2 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant2&lt;/code&gt; is variable pointer to a constant integer and:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * Constant2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is an alternative syntax which does the same, whereas&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; Constant3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant3&lt;/code&gt; is constant pointer to a variable integer and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; Constant4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;declares that &lt;code&gt;Constant4&lt;/code&gt; is constant pointer to a constant integer. Basically const applies to whatever is on its immediate left (other than if there is nothing there in which case it applies to whatever is its immediate right).&lt;/p&gt;\n\n&lt;p&gt;ref: &lt;a href=&quot;http://duramecho.com/ComputerInformation/WhyHowCppConst.html&quot; rel=&quot;noreferrer&quot;&gt;http://duramecho.com/ComputerInformation/WhyHowCppConst.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s simple but tricky. Please note that we can apply the &lt;code&gt;const&lt;/code&gt; qualifier to any data type (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, etc.).&lt;/p&gt;\n&lt;p&gt;Let&apos;s see the below examples.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;const int *p&lt;/code&gt; ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a pointer to a constant integer]&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const *p&lt;/code&gt; ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a pointer to a constant integer]&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;int *p const&lt;/code&gt; ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int *const p&lt;/code&gt; ==&amp;gt; &lt;code&gt;p&lt;/code&gt; is read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to an integer].\nAs pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;const int *p const&lt;/code&gt;  ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;const int const *p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;const int *const p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; are read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to a constant integer]. As pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;code&gt;int const *p const&lt;/code&gt;  ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const int *p&lt;/code&gt;    ==&amp;gt; &lt;strong&gt;Wrong&lt;/strong&gt; Statement. Compiler throws a syntax error.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const const *p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; is read-only and is equivalent to &lt;code&gt;int const *p&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const *const p&lt;/code&gt;  ==&amp;gt; &lt;code&gt;*p&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; are read-only [&lt;code&gt;p&lt;/code&gt; is a constant pointer to a constant integer]. As pointer &lt;code&gt;p&lt;/code&gt; here is read-only, the declaration and definition should be in same place.&lt;/p&gt;\n    ","\n&lt;p&gt;I had the same doubt as you until I came across this &lt;a href=&quot;http://www.amazon.in/Effective-Specific-Addison-Wesley-Professional-Computing/dp/0321334876&quot; rel=&quot;noreferrer&quot;&gt;book&lt;/a&gt; by the C++ Guru Scott Meyers. Refer the third Item in this book where he talks in details about using &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just follow this advice&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If the word &lt;code&gt;const&lt;/code&gt; appears to the left of the asterisk, what&apos;s pointed to is constant&lt;/li&gt;\n&lt;li&gt;If the word &lt;code&gt;const&lt;/code&gt; appears to the right of the asterisk, the pointer itself is constant&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;const&lt;/code&gt; appears on both sides, both are constant&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;To remember in easy way :&lt;/h2&gt;\n&lt;p&gt;If const is before * then value is constant.&lt;/p&gt;\n&lt;p&gt;If const is after * then address is constant.&lt;/p&gt;\n&lt;p&gt;if const are available both before and after * then both value and address are constant.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;int * const var;    //here address is constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;int const * var;    //here value is constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;int const * const var; // both value and address are constant.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The C and C++ declaration syntax has repeatedly been described as a failed experiment, by the original designers.&lt;/p&gt;\n&lt;p&gt;Instead, let&apos;s &lt;em&gt;name&lt;/em&gt; the type pointer to &lt;code&gt;Type&lt;/code&gt;; Ill call it &lt;code&gt;Ptr_&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt; &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Ptr_ = Type*;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now &lt;code&gt;Ptr_&amp;lt;char&amp;gt;&lt;/code&gt; is a pointer to &lt;code&gt;char&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Ptr_&amp;lt;const char&amp;gt;&lt;/code&gt; is a pointer to &lt;code&gt;const char&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;And &lt;code&gt;const Ptr_&amp;lt;const char&amp;gt;&lt;/code&gt; is a &lt;code&gt;const&lt;/code&gt; pointer to &lt;code&gt;const char&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For me, the position of &lt;code&gt;const&lt;/code&gt; i.e. whether it appears to the LEFT or RIGHT or on both LEFT and RIGHT relative to the &lt;code&gt;*&lt;/code&gt; helps me figure out the actual meaning.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;const&lt;/code&gt; to the LEFT of &lt;code&gt;*&lt;/code&gt; indicates that the object pointed by the pointer is a &lt;code&gt;const&lt;/code&gt; object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;const&lt;/code&gt; to the RIGHT of &lt;code&gt;*&lt;/code&gt; indicates that the pointer is a &lt;code&gt;const&lt;/code&gt; pointer.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The following table is taken from Stanford CS106L Standard C++ Programming Laboratory Course Reader.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aijhB.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aijhB.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are many other subtle points surrounding const correctness in C++.  I suppose the question here has simply been about C, but I&apos;ll give some related examples since the tag is C++ :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You often pass large arguments like strings as &lt;code&gt;TYPE const &amp;amp;&lt;/code&gt; which prevents the object from being either modified or copied.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;TYPE&amp;amp; TYPE::operator=(const TYPE &amp;amp;rhs) { ... return *this; }&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But &lt;code&gt;TYPE &amp;amp;  const&lt;/code&gt; is meaningless because references are always const.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You should always label class methods that do not modify the class as &lt;code&gt;const&lt;/code&gt;, otherwise you cannot call the method from a &lt;code&gt;TYPE const &amp;amp;&lt;/code&gt; reference.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bool TYPE::operator==(const TYPE &amp;amp;rhs) const { ... }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There are common situations where both the return value and the method should be const.  Example :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const TYPE TYPE::operator+(const TYPE &amp;amp;rhs) const { ... }&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In fact, const methods must not return internal class data as a reference-to-non-const.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As a result, one must often create both a const and a non-const method using const overloading.  For example, if you define &lt;code&gt;T const&amp;amp; operator[] (unsigned i) const;&lt;/code&gt;, then you&apos;ll probably also want the non-const version given by :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;inline T&amp;amp; operator[] (unsigned i) {\n  return const_cast&amp;lt;char&amp;amp;&amp;gt;( \n     static_cast&amp;lt;const TYPE&amp;amp;&amp;gt;(*this)[](i)\n  );\n}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Afaik, there are no const functions in C, non-member functions cannot themselves be const in C++, const methods might have side effects, and the compiler cannot use const functions to avoid duplicate function calls.  In fact, even a simple &lt;code&gt;int const &amp;amp;&lt;/code&gt; reference might witness the value to which it refers be changed elsewhere.&lt;/p&gt;\n    ","\n&lt;p&gt;The const with the int on either sides will make &lt;strong&gt;pointer to constant int&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; after &lt;code&gt;*&lt;/code&gt; will make &lt;strong&gt;constant pointer to int&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr=&amp;amp;i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case all of these are &lt;strong&gt;pointer to constant integer&lt;/strong&gt;, but none of these are constant pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *ptr1=&amp;amp;i, *ptr2=&amp;amp;j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case all are &lt;strong&gt;pointer to constant integer&lt;/strong&gt; and ptr2 is &lt;strong&gt;constant pointer to constant integer&lt;/strong&gt;. But ptr1 is not constant pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *ptr1=&amp;amp;i, *&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr2=&amp;amp;j;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;if &lt;code&gt;const&lt;/code&gt; is &lt;em&gt;to the left&lt;/em&gt; of &lt;code&gt;*&lt;/code&gt;, it refers to the value (it doesn&apos;t matter whether it&apos;s &lt;code&gt;const int&lt;/code&gt; or &lt;code&gt;int const&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;if &lt;code&gt;const&lt;/code&gt; is &lt;em&gt;to the right&lt;/em&gt; of &lt;code&gt;*&lt;/code&gt;, it refers to the pointer itself&lt;/li&gt;\n&lt;li&gt;it can be both at the same time&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;An important point: &lt;code&gt;const int *p&lt;/code&gt; &lt;strong&gt;does not mean the value you are referring to is constant!!&lt;/strong&gt;. It means that you can&apos;t change it &lt;strong&gt;through that pointer&lt;/strong&gt; (meaning, you can&apos;t assign $*p = ...`). The value itself may be changed in other ways. Eg&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p = &amp;amp;x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//legal&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, *p) &lt;span class=&quot;hljs-comment&quot;&gt;// prints 6&lt;/span&gt;\n*p = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//error &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is meant to be used mostly in function signatures, to guarantee that the function can&apos;t accidentally change the arguments passed.&lt;/p&gt;\n    ","\n&lt;p&gt;This mostly addresses the second line: best practices, assignments, function parameters etc.&lt;/p&gt;\n\n&lt;p&gt;General practice.  Try to make everything &lt;code&gt;const&lt;/code&gt; that you can.  Or to put that another way, make everything &lt;code&gt;const&lt;/code&gt; to begin with, and then remove exactly the minimum set of &lt;code&gt;const&lt;/code&gt;s necessary to allow the program to function.  This will be a big help in attaining const-correctness, and will help ensure that subtle bugs don&apos;t get introduced when people try and assign into things they&apos;re not supposed to modify.&lt;/p&gt;\n\n&lt;p&gt;Avoid const_cast&amp;lt;&amp;gt; like the plague.  There are one or two legitimate use cases for it, but they are very few and far between.  If you&apos;re trying to change a &lt;code&gt;const&lt;/code&gt; object, you&apos;ll do a lot better to find whoever declared it &lt;code&gt;const&lt;/code&gt; in the first pace and talk the matter over with them to reach a consensus as to what should happen.&lt;/p&gt;\n\n&lt;p&gt;Which leads very neatly into assignments.  You can assign into something only if it is non-const.  If you want to assign into something that is const, see above.  Remember that in the declarations &lt;code&gt;int const *foo;&lt;/code&gt; and &lt;code&gt;int * const bar;&lt;/code&gt; different things are &lt;code&gt;const&lt;/code&gt; - other answers here have covered that issue admirably, so I won&apos;t go into it.&lt;/p&gt;\n\n&lt;p&gt;Function parameters:&lt;/p&gt;\n\n&lt;p&gt;Pass by value: e.g. &lt;code&gt;void func(int param)&lt;/code&gt; you don&apos;t care one way or the other at the calling site.  The argument can be made that there are use cases for declaring the function as &lt;code&gt;void func(int const param)&lt;/code&gt; but that has no effect on the caller, only on the function itself, in that whatever value is passed cannot be changed by the function during the call.&lt;/p&gt;\n\n&lt;p&gt;Pass by reference: e.g. &lt;code&gt;void func(int &amp;amp;param)&lt;/code&gt; Now it does make a difference.  As just declared &lt;code&gt;func&lt;/code&gt; is allowed to change &lt;code&gt;param&lt;/code&gt;, and any calling site should be ready to deal with the consequences.  Changing the declaration to &lt;code&gt;void func(int const &amp;amp;param)&lt;/code&gt; changes the contract, and guarantees that &lt;code&gt;func&lt;/code&gt; can now not change &lt;code&gt;param&lt;/code&gt;, meaning what is passed in is what will come back out.  As other have noted this is very useful for cheaply passing a large object that you don&apos;t want to change.  Passing a reference is a lot cheaper than passing a large object by value.&lt;/p&gt;\n\n&lt;p&gt;Pass by pointer: e.g. &lt;code&gt;void func(int *param)&lt;/code&gt; and &lt;code&gt;void func(int const *param)&lt;/code&gt; These two are pretty much synonymous with their reference counterparts, with the caveat that the called function now needs to check for &lt;code&gt;nullptr&lt;/code&gt; unless some other contractual guarantee assures &lt;code&gt;func&lt;/code&gt; that it will never receive a &lt;code&gt;nullptr&lt;/code&gt; in &lt;code&gt;param&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Opinion piece on that topic.  Proving correctness in a case like this is hellishly difficult, it&apos;s just too damn easy to make a mistake.  So don&apos;t take chances, and always check pointer parameters for &lt;code&gt;nullptr&lt;/code&gt;.  You will save yourself pain and suffering and hard to find bugs in the long term.  And as for the cost of the check, it&apos;s dirt cheap, and in cases where the static analysis built into the compiler can manage it, the optimizer will elide it anyway.  Turn on Link Time Code Generation for MSVC, or WOPR (I think) for GCC, and you&apos;ll get it program wide, i.e. even in function calls that cross a source code module boundary.&lt;/p&gt;\n\n&lt;p&gt;At the end of the day all of the above makes a very solid case to always prefer references to pointers.  They&apos;re just safer all round.&lt;/p&gt;\n    ","\n&lt;p&gt;Just for the sake of completeness for C following the others explanations, not sure for C++.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;pp - pointer to pointer&lt;/li&gt;\n&lt;li&gt;p - pointer&lt;/li&gt;\n&lt;li&gt;data - the thing pointed, in examples &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;bold&lt;/strong&gt; - read-only variable&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Pointer&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;p data - &lt;code&gt;int *p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const *p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const p;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const p;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Pointer to pointer&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;pp p data - &lt;code&gt;int **pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; p data - &lt;code&gt;int ** const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp &lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const *pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const **pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt; data - &lt;code&gt;int * const * const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; p &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const ** const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;pp &lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const *pp;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt; &lt;strong&gt;data&lt;/strong&gt; - &lt;code&gt;int const * const * const pp;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; **pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ** &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 4&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; **pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 5&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x;\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\np = &amp;amp;x;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ** &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 7&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *pp = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\npp = &amp;amp;p;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 8&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;p&lt;/span&gt; = &amp;amp;x; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;pp&lt;/span&gt; = &amp;amp;p; &lt;span class=&quot;hljs-comment&quot;&gt;// Definition must happen during declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, **pp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;N-levels of Dereference&lt;/h1&gt;\n\n&lt;p&gt;Just keep going, but may the humanity excommunicate you.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; **pp = &amp;amp;p;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ***ppp = &amp;amp;pp;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ****pppp = &amp;amp;ppp;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d \\n&quot;&lt;/span&gt;, ****pppp);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;const int*&lt;/code&gt; - pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can change the value of the pointer; you can not change the value of the &lt;code&gt;int&lt;/code&gt; object, the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;code&gt;const int * const&lt;/code&gt; - constant pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can not change the value of the pointer nor the value of the &lt;code&gt;int&lt;/code&gt; object the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;code&gt;int const *&lt;/code&gt; - pointer to constant &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This statement is equivalent to 1. &lt;code&gt;const int*&lt;/code&gt; - You can change the value of the pointer but you can not change the value of the &lt;code&gt;int&lt;/code&gt; object, the pointer points to.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Actually, there is a 4th option:&lt;/p&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;code&gt;int * const&lt;/code&gt; - constant pointer to &lt;code&gt;int&lt;/code&gt; object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can change the value of the object the pointer points to but you can not change the value of the pointer itself. The pointer will always point to the same &lt;code&gt;int&lt;/code&gt; object but this value of this &lt;code&gt;int&lt;/code&gt; object can be changed.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you want to determine a certain type of C or C++ construct you can use the &lt;a href=&quot;http://c-faq.com/decl/spiral.anderson.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Clockwise/Spiral Rule&lt;/a&gt; made by David Anderson; but not to confuse with &lt;a href=&quot;https://en.wikipedia.org/wiki/Anderson%27s_rule_(computer_science)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Anderson`s Rule&lt;/a&gt; made by Ross J. Anderson, which is something quite distinct.&lt;/p&gt;\n    ","\n&lt;p&gt;simple mnemonic:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; pointer &amp;lt;- &lt;code&gt;*&lt;/code&gt; -&amp;gt; pointee &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I like to think of &lt;code&gt;int *i&lt;/code&gt; as declaring &quot;the dereference of &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;&quot;; in this sense, &lt;code&gt;const int *i&lt;/code&gt; means &quot;the deref of &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;const int&lt;/code&gt;&quot;, while &lt;code&gt;int *const i&lt;/code&gt; means &quot;deref of &lt;code&gt;const i&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;(the one danger of thinking like this is it may lead to favoring &lt;code&gt;int const *i&lt;/code&gt; style of declaration, which people might hate/disallow)&lt;/p&gt;\n    ","\n&lt;p&gt;I drew an image below to explain this, maybe helpful.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;int const v&lt;/code&gt; and &lt;code&gt;const int v&lt;/code&gt; are identical.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JwWMu.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JwWMu.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Lot of people answered correctly I will just organize well here and put some Extra info which is missing in given Answers.&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Const is keyword in C language also known as qualifier. Const can\napplied to the declaration of any variable to specify that it&apos;s value\nwill not changed&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int a=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,b;\n\na=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// give error&lt;/span&gt;\nb=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// give error as b is also const int &lt;/span&gt;\n\nyou have &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; intialize &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; declaring itself &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; no way &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; assign\nit afterwards.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;How to read ?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;just read from right to left every statement works smoothly&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;3 main things&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; b.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; int \n \n&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; c.    p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;[Error]&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; * comes before &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;two types&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *\n\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;we look first&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Major type 1. const int&lt;/strong&gt;*&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ways to arrange 3 things at 3 places 3!=6&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;i. * at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;*&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p      [Error]\n*&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p      [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;ii. const at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p      type a. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p      [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;iii. int at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-go&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a. \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; b. p is &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Major type 2. const const int&lt;/strong&gt;*&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ways to arrange 4 things at 4 places in which 2 are alike 4!/2!=12&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;i. * at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     [Error]\n* &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     [Error]\n* &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; p     [Error]\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;ii. int at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      type a. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     type c. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     type b. p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;iii. const at start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p    [Error]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p      &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; a.\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p     &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; c.\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p    [Error]\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p    [Error]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;squeezing all in one&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type a. p is ptr to const int  (5)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  *p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; *p\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type b.  p is const ptr to int (2)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;type c. p is const ptr to const int (2)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;just little calculation&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;. const int * &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;        total arrangemets (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)   &lt;span class=&quot;hljs-selector-attr&quot;&gt;[Errors]&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;. const const int * &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;  total arrangemets (&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)  &lt;span class=&quot;hljs-selector-attr&quot;&gt;[Errors]&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;little Extra&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int const * p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;here p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (type a.) \nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; please note that it &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; not ptr\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int * const p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;similarly \nhere p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; const ptr to &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; b.)   \nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; even cost &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;int const * const p,p2 ;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;here p &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ptr to &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;  (type c.)\nbut p2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; just &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;. \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Finished&lt;/strong&gt;&lt;/p&gt;\n    "],"id":495,"title":"What is the difference between const int*, const int * const, and int const *?","content":"\n                \n&lt;p&gt;I always mess up how to use &lt;code&gt;const int*&lt;/code&gt;, &lt;code&gt;const int * const&lt;/code&gt;, and &lt;code&gt;int const *&lt;/code&gt; correctly. Is there a set of rules defining what you can and cannot do?&lt;/p&gt;\n\n&lt;p&gt;I want to know all the do&apos;s and all don&apos;ts in terms of assignments, passing to the functions, etc.&lt;/p&gt;\n    ","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604","postType":"QUESTION","createdAt":"2022-07-09T17:36:24.000Z","updatedAt":"2022-07-09T17:36:24.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"Submit same Partial View called multiple times data to controller?","slug":"submit-same-partial-view-called-multiple-times-data-to-controller-1657387887213"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How do I detect a click outside an element?","slug":"how-do-i-detect-a-click-outside-an-element-1657387505351"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":".prop() vs .attr()","slug":".prop()-vs-.attr()-1657384898328"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"Reference: mod_rewrite, URL rewriting and \"pretty links\" explained","slug":"reference:-mod_rewrite-url-rewriting-and-\"pretty-links\"-explained-1657384905504"},{"title":"How do I make Git forget about a file that was tracked, but is now in .gitignore?","slug":"how-do-i-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-.gitignore-1657387328843"},{"title":"Do I cast the result of malloc?","slug":"do-i-cast-the-result-of-malloc-1657384271583"},{"title":"Web-scraping JavaScript page with Python","slug":"web-scraping-javascript-page-with-python-1657388240875"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"}]},"__N_SSG":true}