{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;sub&gt;(See the history on this answer to get the more elaborate text, but I now think it&apos;s easier for the reader to see real command lines).&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Common files shared by all below commands&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ cat a.cpp\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n\n$ cat b.cpp\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = b;\n\n$ cat d.cpp\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Linking to static libraries&lt;/h1&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ g++ -c b.cpp -o b.o\n$ ar cr libb.a b.o\n$ g++ -c d.cpp -o d.o\n$ ar cr libd.a d.o\n\n$ g++ -L. -ld -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ -L. -lb -ld a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ a.cpp -L. -lb -ld &lt;span class=&quot;hljs-meta&quot;&gt;# right order&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The linker searches from left to right, and notes unresolved symbols as it goes. If a library resolves the symbol, it takes the object files of that library to resolve the symbol (b.o out of libb.a in this case).&lt;/p&gt;\n&lt;p&gt;Dependencies of static libraries against each other work the same - the library that needs symbols must be first, then the library that resolves the symbol.&lt;/p&gt;\n&lt;p&gt;If a static library depends on another library, but the other library again depends on the former library, there is a cycle. You can resolve this by enclosing the cyclically dependent libraries by &lt;code&gt;-(&lt;/code&gt; and &lt;code&gt;-)&lt;/code&gt;, such as &lt;code&gt;-( -la -lb -)&lt;/code&gt; (you may need to escape the parens, such as &lt;code&gt;-\\(&lt;/code&gt; and &lt;code&gt;-\\)&lt;/code&gt;). The linker then searches those enclosed lib multiple times to ensure cycling dependencies are resolved. Alternatively, you can specify the libraries multiple times, so each is before one another: &lt;code&gt;-la -lb -la&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Linking to dynamic libraries&lt;/h1&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ export LD_LIBRARY_PATH=. &lt;span class=&quot;hljs-meta&quot;&gt;# not needed &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; libs go to /usr/lib etc&lt;/span&gt;\n$ g++ -fpic -shared d.cpp -o libd.so\n$ g++ -fpic -shared b.cpp -L. -ld -o libb.so &lt;span class=&quot;hljs-meta&quot;&gt;# specifies its dependency!&lt;/span&gt;\n\n$ g++ -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (works on some distributions)&lt;/span&gt;\n$ g++ -Wl,--as-needed -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -lb &lt;span class=&quot;hljs-meta&quot;&gt;# right order&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s the same here - the libraries must follow the object files of the program. The difference here compared with static libraries is that you need not care about the dependencies of the libraries against each other, because &lt;em&gt;dynamic libraries sort out their dependencies themselves&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Some recent distributions apparently default to using the &lt;code&gt;--as-needed&lt;/code&gt; linker flag, which enforces that the program&apos;s object files come before the dynamic libraries. If that flag is passed, the linker will not link to libraries that are not actually needed by the executable (and it detects this from left to right). My recent archlinux distribution doesn&apos;t use this flag by default, so it didn&apos;t give an error for not following the correct order.&lt;/p&gt;\n&lt;p&gt;It is not correct to omit the dependency of &lt;code&gt;b.so&lt;/code&gt; against &lt;code&gt;d.so&lt;/code&gt; when creating the former. You will be required to specify the library when linking &lt;code&gt;a&lt;/code&gt; then, but &lt;code&gt;a&lt;/code&gt; doesn&apos;t really need the integer &lt;code&gt;b&lt;/code&gt; itself, so it should not be made to care about &lt;code&gt;b&lt;/code&gt;&apos;s own dependencies.&lt;/p&gt;\n&lt;p&gt;Here is an example of the implications if you miss specifying the dependencies for &lt;code&gt;libb.so&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ export LD_LIBRARY_PATH=. &lt;span class=&quot;hljs-meta&quot;&gt;# not needed &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; libs go to /usr/lib etc&lt;/span&gt;\n$ g++ -fpic -shared d.cpp -o libd.so\n$ g++ -fpic -shared b.cpp -o libb.so &lt;span class=&quot;hljs-meta&quot;&gt;# wrong (but links)&lt;/span&gt;\n\n$ g++ -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, as above&lt;/span&gt;\n$ g++ -Wl,--as-needed -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, as above&lt;/span&gt;\n$ g++ a.cpp -L. -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, missing libd.so&lt;/span&gt;\n$ g++ a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (works on some distributions)&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (like static libs)&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -lb -ld # &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you now look into what dependencies the binary has, you note the binary itself depends also on &lt;code&gt;libd&lt;/code&gt;, not just &lt;code&gt;libb&lt;/code&gt; as it should. The binary will need to be relinked if &lt;code&gt;libb&lt;/code&gt; later depends on another library, if you do it this way. And if someone else loads &lt;code&gt;libb&lt;/code&gt; using &lt;code&gt;dlopen&lt;/code&gt; at runtime (think of loading plugins dynamically), the call will fail as well. So the &lt;code&gt;&quot;right&quot;&lt;/code&gt; really should be a &lt;code&gt;wrong&lt;/code&gt; as well.&lt;/p&gt;\n    ","\n&lt;p&gt;The GNU ld linker is a so-called smart linker.  It will keep track of the functions used by preceding static libraries, permanently tossing out those functions that are not used from its lookup tables.  The result is that if you link a static library too early, then the functions in that library are no longer available to static libraries later on the link line.  &lt;/p&gt;\n\n&lt;p&gt;The typical UNIX linker works from left to right, so put all your dependent libraries on the left, and the ones that satisfy those dependencies on the right of the link line.  You may find that some libraries depend on others while at the same time other libraries depend on them.  This is where it gets complicated.  When it comes to circular references, fix your code!&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s an example to make it clear how things work with GCC when &lt;strong&gt;static&lt;/strong&gt; libraries are involved. So let&apos;s assume we have the following scenario:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;myprog.o&lt;/code&gt; - containing &lt;code&gt;main()&lt;/code&gt; function, dependent on &lt;code&gt;libmysqlclient&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;libmysqlclient&lt;/code&gt; - static, for the sake of the example (you&apos;d prefer the shared library, of course, as the &lt;code&gt;libmysqlclient&lt;/code&gt; is huge); in &lt;code&gt;/usr/local/lib&lt;/code&gt;; and dependent on stuff from &lt;code&gt;libz&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;libz&lt;/code&gt; (dynamic)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;How do we link this? (Note: examples from compiling on Cygwin using gcc 4.3.4)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc -L/usr/local/lib -lmysqlclient myprog.o\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_mysql_init&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# myprog depends on libmysqlclient&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# so myprog has to come earlier on the command &lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n\ngcc myprog.o -L/usr/local/lib -lmysqlclient\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_uncompress&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# we have to link with libz, too&lt;/span&gt;\n\ngcc myprog.o -lz -L/usr/local/lib -lmysqlclient\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_uncompress&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# libz is needed by libmysqlclient&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# so it has to appear *after* it on the command &lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n\ngcc myprog.o -L/usr/local/lib -lmysqlclient -lz\n&lt;span class=&quot;hljs-meta&quot;&gt;# this works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you add &lt;code&gt;-Wl,--start-group&lt;/code&gt; to the linker flags it does not care which order they&apos;re in or if there are circular dependencies.&lt;/p&gt;\n\n&lt;p&gt;On Qt this means adding: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;QMAKE_LFLAGS += -Wl,--start-group\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Saves loads of time messing about and it doesn&apos;t seem to slow down linking much (which takes far less time than compilation anyway).&lt;/p&gt;\n    ","\n&lt;p&gt;Another alternative would be to specify the list of libraries twice:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc prog.o libA.a libB.a libA.a libB.a -o prog.x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Doing this, you don&apos;t have to bother with the right sequence since the reference will be resolved in the second block.&lt;/p&gt;\n    ","\n&lt;p&gt;A quick tip that tripped me up: if you&apos;re invoking the linker as &quot;gcc&quot; or &quot;g++&quot;, then using &quot;--start-group&quot; and &quot;--end-group&quot; won&apos;t pass those options through to the linker -- nor will it flag an error. It will just fail the link with undefined symbols if you had the library order wrong.&lt;/p&gt;\n\n&lt;p&gt;You need to write them as &quot;-Wl,--start-group&quot; etc. to tell GCC to pass the argument through to the linker.&lt;/p&gt;\n    ","\n&lt;p&gt;You may can use -Xlinker option.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;g++ -o foobar  -Xlinker -start-group  -Xlinker libA.a -Xlinker libB.a -Xlinker libC.a  -Xlinker -end-group \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is ALMOST equal to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;g++ -o foobar  -Xlinker -start-group  -Xlinker libC.a -Xlinker libB.a -Xlinker libA.a  -Xlinker -end-group \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Careful !&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The order within a group is important !\nHere&apos;s an example: a debug library has a debug routine, but the non-debug\nlibrary has a weak version of the same. You must put the debug library\nFIRST in the group or you will resolve to the non-debug version.&lt;/li&gt;\n&lt;li&gt;You need to precede each library in the group list with -Xlinker&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Link order certainly does matter, at least on some platforms. I have seen crashes for applications linked with libraries in wrong order (where wrong means A linked before B but B depends on A).&lt;/p&gt;\n    ","\n&lt;p&gt;I have seen this a lot, some of our modules link in excess of a 100 libraries of our code plus system &amp;amp; 3rd party libs. &lt;/p&gt;\n\n&lt;p&gt;Depending on different linkers HP/Intel/GCC/SUN/SGI/IBM/etc you can get unresolved functions/variables etc, on some platforms you have to list libraries twice. &lt;/p&gt;\n\n&lt;p&gt;For the most part we use structured hierarchy of libraries, core, platform, different layers of abstraction, but for some systems you still have to play with the order in the link command.&lt;/p&gt;\n\n&lt;p&gt;Once you hit upon a solution document it so the next developer does not have to work it out again.&lt;/p&gt;\n\n&lt;p&gt;My old lecturer used to say, &quot;&lt;em&gt;high cohesion &amp;amp; low coupling&lt;/em&gt;&quot;, its still true today.&lt;/p&gt;\n    "],"id":316,"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","content":"\n                \n&lt;p&gt;Why does the order in which libraries are linked sometimes cause errors in GCC?&lt;/p&gt;\n    ","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554","postType":"QUESTION","createdAt":"2022-07-09T17:26:49.000Z","updatedAt":"2022-07-09T17:26:49.000Z","tags":[{"id":1854,"name":"linker","slug":"linker","createdAt":"2022-07-09T17:26:49.000Z","updatedAt":"2022-07-09T17:26:49.000Z","Questions_Tags":{"questionId":316,"tagId":1854}}],"relatedQuestions":[{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554","tags":[{"name":"linker","Questions_Tags":{"questionId":316,"tagId":1854}}]}]},"randomQuestions":[{"title":"How to use PHP's password_hash to hash and verify passwords","slug":"how-to-use-php's-password_hash-to-hash-and-verify-passwords-1657387808784"},{"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"},{"title":"C++ Singleton design pattern","slug":"c++-singleton-design-pattern-1657387830040"},{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"What is the best algorithm for overriding GetHashCode?","slug":"what-is-the-best-algorithm-for-overriding-gethashcode-1657387848932"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"How do I format a date in JavaScript?","slug":"how-do-i-format-a-date-in-javascript-1657384649498"},{"title":"Scanner is skipping nextLine() after using next() or nextFoo()?","slug":"scanner-is-skipping-nextline()-after-using-next()-or-nextfoo()-1657384379697"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":"How do I make a redirect in PHP?","slug":"how-do-i-make-a-redirect-in-php-1657387381903"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"}]},"__N_SSG":true}