{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;Table and Column names CANNOT be replaced by parameters in PDO.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In that case you will simply want to filter and sanitize the data manually. One way to do this is to pass in shorthand parameters to the function that will execute the query dynamically and then use a &lt;code&gt;switch()&lt;/code&gt; statement to create a white list of valid values to be used for the table name or column name. That way no user input ever goes directly into the query. So for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;buildQuery&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$get_var&lt;/span&gt; &lt;/span&gt;) \n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$get_var&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            &lt;span class=&quot;hljs-variable&quot;&gt;$tbl&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;users&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM &lt;span class=&quot;hljs-subst&quot;&gt;$tbl&lt;/span&gt;&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By leaving no default case or using a default case that returns an error message you ensure that only values that you want used get used.&lt;/p&gt;\n    ","\n&lt;p&gt;To understand &lt;em&gt;why&lt;/em&gt; binding a table (or column) name doesn&apos;t work, you have to understand how the placeholders in prepared statements work: they are not simply substituted in as (suitably escaped) strings, and the resulting SQL executed. Instead, a DBMS asked to &quot;prepare&quot; a statement comes up with a complete query plan for how it would execute that query, including which tables and indexes it would use, which will be the same regardless of how you fill in the placeholders.&lt;/p&gt;\n\n&lt;p&gt;The plan for &lt;code&gt;SELECT name FROM my_table WHERE id = :value&lt;/code&gt; will be the same whatever you substitute for &lt;code&gt;:value&lt;/code&gt;, but the seemingly similar &lt;code&gt;SELECT name FROM :table WHERE id = :value&lt;/code&gt; cannot be planned, because the DBMS has no idea what table you&apos;re actually going to select from.&lt;/p&gt;\n\n&lt;p&gt;This is not something an abstraction library like PDO can or should work around, either, since it would defeat the 2 key purposes of prepared statements: 1) to allow the database to decide in advance how a query will be run, and use the same plan multiple times; and 2) to prevent security issues by separating the logic of the query from the variable input.&lt;/p&gt;\n    ","\n&lt;p&gt;I see this is an old post, but I found it useful and thought I&apos;d share a solution similar to what @kzqai suggested:&lt;/p&gt;\n\n&lt;p&gt;I have a function that receives two parameters like...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTableInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$inTableName&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$inColumnName&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Inside I check against arrays I&apos;ve set up to make sure only tables and columns with &quot;blessed&quot; tables are accessible:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$allowed_tables_array&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tblTheTable&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$allowed_columns_array&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;tblTheTable&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;the_col_to_check&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the PHP check before running PDO looks like...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;in_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$inTableName&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$allowed_tables_array&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;in_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$inColumnName&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$allowed_columns_array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$inTableName&lt;/span&gt;]))\n{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT &lt;span class=&quot;hljs-subst&quot;&gt;$inColumnName&lt;/span&gt; AS columnInfo\n            FROM &lt;span class=&quot;hljs-subst&quot;&gt;$inTableName&lt;/span&gt;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;); \n    &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using the former isn&apos;t inherently more safe than the latter, you need to sanitize the input whether it&apos;s part of a parameter array or a simple variable.  So I don&apos;t see anything wrong with using the latter form with &lt;code&gt;$table&lt;/code&gt;, provided you make sure that the content of &lt;code&gt;$table&lt;/code&gt; is safe (alphanum plus underscores?) before using it.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;(Late answer, consult my side note).&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The same rule applies when trying to create a &quot;database&quot;.&lt;/p&gt;\n\n&lt;p&gt;You cannot use a prepared statement to bind a database.&lt;/p&gt;\n\n&lt;p&gt;I.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;CREATE DATABASE IF NOT EXISTS :database\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will not work. Use a safelist instead.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; I added this answer (as a community wiki) because it often used to close questions with, where some people posted questions similar to this in trying to bind a &lt;strong&gt;database&lt;/strong&gt; and not a table and/or column.&lt;/p&gt;\n    ","\n&lt;p&gt;Part of me wonders if you could provide your own custom sanitizing function as simple as this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/[^a-zA-Z_]*/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I haven&apos;t really thought through it, but it seems like removing anything except characters and underscores might work.&lt;/p&gt;\n    ","\n&lt;p&gt;As for the main question in this thread, the other posts made it clear why we can&apos;t bind values to column names when preparing statements, so here is one solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myPdo&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;   = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dbuser&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;   = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dbpass&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$host&lt;/span&gt;   = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dbhost&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dbname&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dbInfo&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;pdo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;host.&lt;span class=&quot;hljs-string&quot;&gt;&apos;;dbname=&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;db.&lt;span class=&quot;hljs-string&quot;&gt;&apos;;charset=utf8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;user,&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;pass);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-comment&quot;&gt;//when class is called upon, it stores column names and column types from the table of you choice in $this-&amp;gt;dbInfo;&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;select distinct column_name,column_type from information_schema.columns where table_name=&apos;sometable&apos;;&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;pdo-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//not really necessary since this stmt doesn&apos;t contain any dynamic values;&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;dbInfo = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pdo_param&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$param_type&lt;/span&gt; = PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;dbInfo &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strstr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_type&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;)){\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$param_type&lt;/span&gt; = PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_INT&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                }\n            }\n        }&lt;span class=&quot;hljs-comment&quot;&gt;//for testing purposes i only used INT and VARCHAR column types. Adjust to your needs...&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$param_type&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;columnIsAllowed&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$colisAllowed&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;dbInfo &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column_name&apos;&lt;/span&gt;] === &lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;){\n                &lt;span class=&quot;hljs-variable&quot;&gt;$colisAllowed&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$colisAllowed&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;q&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;//$data is received by post as a JSON object and looks like this&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//{&quot;data&quot;:{&quot;column_a&quot;:&quot;value&quot;,&quot;column_b&quot;:&quot;value&quot;,&quot;column_c&quot;:&quot;value&quot;},&quot;get&quot;:&quot;column_x&quot;}&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$continue&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$column_name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;columnIsAllowed&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$column_name&lt;/span&gt;)){\n                 &lt;span class=&quot;hljs-variable&quot;&gt;$continue&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                 &lt;span class=&quot;hljs-comment&quot;&gt;//means that someone possibly messed with the post and tried to get data from a column that does not exist in the current table, or the column name is a sql injection string and so on...&lt;/span&gt;\n                 &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n             }\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//since $data[&apos;get&apos;] is also a column, check if its allowed as well&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;]) &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;columnIsAllowed&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;])){\n             &lt;span class=&quot;hljs-variable&quot;&gt;$continue&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable&quot;&gt;$continue&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;possible injection attempt&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//continue with the rest of the func, as you normally would&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT DISTINCT &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot; from sometable WHERE &quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos; LIKE :&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;_val AND &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&quot; order by &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;];\n        &lt;span class=&quot;hljs-comment&quot;&gt;//$stmt should look like this&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//SELECT DISTINCT column_x from sometable WHERE column_a LIKE :column_a_val AND column_b LIKE :column_b_val AND column_c LIKE :column_c_val order by column_x&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;pdo-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//obviously now i have to bindValue()&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;_val&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_param&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;));\n            &lt;span class=&quot;hljs-comment&quot;&gt;//setting PDO::PARAM... type based on column_type from $this-&amp;gt;dbInfo&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//or whatever&lt;/span&gt;\n    }\n}\n&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;myPdo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anything&apos;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//anything so that isset() evaluates to TRUE.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;q&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$some_json_object_as_described_above&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above is just an example, so needless to say, copy-&amp;gt;paste won&apos;t work. Adjust for your needs.\nNow this may not provide 100% security, but it allows some control over the column names when they &quot;come in&quot; as dynamic strings and may be changed on users end. Furthermore, there is no need to build some array with your table column names and types since they are extracted from the information_schema.&lt;/p&gt;\n    ","\n&lt;p&gt;Short answer is NO you cannot use dynamic table name, field names,  etc in the Prepared execute statement with PDO because it adds quotes to them which will break the query.  But if you can sanitize them, then you can safely plop them right in the query itself just like you would with MySQLi anyway.&lt;/p&gt;\n&lt;p&gt;The correct way to do this is with mysqli&apos;s mysqli_real_escape_string() function because the mysql_real_escape_string was removed from PHP hastily without any consideration into how that affects dynamic structure applications.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$unsanitized_table_name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;users&apos; OR &apos;1&apos;=&apos;1&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//SQL Injection attempt&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sanitized_table_name&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sanitize_input&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$unsanitized_table_name&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM &lt;span class=&quot;hljs-subst&quot;&gt;{$unsanitized_table_name}&lt;/span&gt; WHERE 1&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--- REALLY bad idea&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM &lt;span class=&quot;hljs-subst&quot;&gt;{$sanitized_table_name}&lt;/span&gt; WHERE 1&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--- Not ideal but hey, at least you&apos;re safe.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//PDO Cant sanitize everything so we limp along with mysqli instead&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sanitize_input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;UsahName&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Passerrrd&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":274,"title":"Can PHP PDO Statements accept the table or column name as parameter?","content":"\n                \n&lt;p&gt;Why can&apos;t I pass the table name to a prepared PDO statement?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM :table WHERE 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:table&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;users&apos;&lt;/span&gt;))) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there another safe way to insert a table name into a SQL query? With safe, I mean that I don&apos;t want to do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM &lt;span class=&quot;hljs-subst&quot;&gt;$table&lt;/span&gt; WHERE 1&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588","postType":"QUESTION","createdAt":"2022-07-09T17:24:38.000Z","updatedAt":"2022-07-09T17:24:38.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"What is the best regular expression to check if a string is a valid URL?","slug":"what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url-1657387618306"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"Why do I need to override the equals and hashCode methods in Java?","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"How do I expire a PHP session after 30 minutes?","slug":"how-do-i-expire-a-php-session-after-30-minutes-1657387990658"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"Using regular expressions to parse HTML: why not?","slug":"using-regular-expressions-to-parse-html:-why-not-1657387543969"},{"title":"Get the values from the \"GET\" parameters (JavaScript) [duplicate]","slug":"get-the-values-from-the-\"get\"-parameters-(javascript)-duplicate-1657387656693"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"}]},"__N_SSG":true}