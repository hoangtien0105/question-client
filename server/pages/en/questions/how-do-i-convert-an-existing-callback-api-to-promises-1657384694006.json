{"pageProps":{"data":{"answer":["\n&lt;p&gt;Promises have state, they start as pending and can settle to:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;fulfilled&lt;/strong&gt; meaning that the computation completed successfully.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;rejected&lt;/strong&gt; meaning that the computation failed.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Promise returning functions &lt;a href=&quot;https://stackoverflow.com/q/21887856/1048572&quot;&gt;&lt;em&gt;should never throw&lt;/em&gt;&lt;/a&gt;, they should return rejections instead. Throwing from a promise returning function will force you to use both a &lt;code&gt;} catch {&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; a &lt;code&gt;.catch&lt;/code&gt;. People using promisified APIs do not expect promises to throw. If you&apos;re not sure how async APIs work in JS - please &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-asynchronous-call/16825593#16825593&quot;&gt;see this answer&lt;/a&gt; first.&lt;/p&gt;\n\n&lt;h3&gt;1. DOM load or other one time event:&lt;/h3&gt;\n\n&lt;p&gt;So, creating promises generally means specifying when they settle - that means when they move to the fulfilled or rejected phase to indicate the data is available (and can be accessed with &lt;code&gt;.then&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;With modern promise implementations that support the &lt;code&gt;Promise&lt;/code&gt; constructor like native ES6 promises:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = resolve;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would then use the resulting promise like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do things after onload&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With libraries that support deferred (Let&apos;s use $q for this example here, but we&apos;ll also use jQuery later):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $q.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(); };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or with a jQuery like API, hooking on an event happening once:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;();\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#myObject&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;once&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;2. Plain callback:&lt;/h3&gt;\n\n&lt;p&gt;These APIs are rather common since well callbacks are common in JS. Let&apos;s look at the common case of having &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onFail&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId, onLoad, onFail&lt;/span&gt;) { \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With modern promise implementations that support the &lt;code&gt;Promise&lt;/code&gt; constructor like native ES6 promises:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, resolve, reject);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With libraries that support deferred (Let&apos;s use jQuery for this example here, but we&apos;ve also used $q above):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;){ d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res); }, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;){ d.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err); });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;jQuery also offers a &lt;code&gt;$.Deferred(fn)&lt;/code&gt; form, which has the advantage of allowing us to write an expression that emulates very closely the &lt;code&gt;new Promise(fn)&lt;/code&gt; form, as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dfrd&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, dfrd.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt;, dfrd.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt;);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Here we exploit the fact that a jQuery deferred&apos;s &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods are &quot;detachable&quot;; ie. they are bound to the &lt;em&gt;instance&lt;/em&gt; of a jQuery.Deferred(). Not all libs offer this feature.&lt;/p&gt;\n\n&lt;h3&gt;3. Node style callback (&quot;nodeback&quot;):&lt;/h3&gt;\n\n&lt;p&gt;Node style callbacks (nodebacks) have a particular format where the callbacks is always the last argument and its first parameter is an error. Let&apos;s first promisify one manually:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataParam&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) { \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStuffAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(param, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n        });\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With deferreds you can do the following (let&apos;s use Q for this example, although Q now supports the new syntax &lt;a href=&quot;https://stackoverflow.com/q/28687566/1048572&quot;&gt;which you should prefer&lt;/a&gt;): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStuffAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = Q.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(param, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) d.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In general, you should not promisify things manually too much, most promise libraries that were designed with Node in mind as well as native promises in Node 8+ have a built in method for promisifying nodebacks. For example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Bluebird&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = Q.&lt;span class=&quot;hljs-title function_&quot;&gt;denodeify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Q&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Native promises, node only&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;4. A whole library with node style callbacks:&lt;/h3&gt;\n\n&lt;p&gt;There is no golden rule here, you promisify them one by one. However, some promise implementations allow you to do this in bulk, for example in Bluebird, converting a nodeback API to a promise API is as simple as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;promisifyAll&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or with &lt;em&gt;native promises&lt;/em&gt; in &lt;strong&gt;Node&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { promisify } = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promiseAPI = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[key, v]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({key, &lt;span class=&quot;hljs-attr&quot;&gt;fn&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(v)}))\n                         .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(o, {[p.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;]: p.&lt;span class=&quot;hljs-property&quot;&gt;fn&lt;/span&gt;}), {});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Of course, when you are in a &lt;code&gt;.then&lt;/code&gt; handler you do not need to promisify things. Returning a promise from a &lt;code&gt;.then&lt;/code&gt; handler will resolve or reject with that promise&apos;s value. Throwing from a &lt;code&gt;.then&lt;/code&gt; handler is also good practice and will reject the promise - this is the famous promise throw safety. &lt;/li&gt;\n&lt;li&gt;In an actual &lt;code&gt;onload&lt;/code&gt; case, you should use &lt;code&gt;addEventListener&lt;/code&gt; rather than &lt;code&gt;onX&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Today, I can use &lt;code&gt;Promise&lt;/code&gt; in &lt;code&gt;Node.js&lt;/code&gt; as a plain Javascript method.&lt;/p&gt;\n\n&lt;p&gt;A simple and basic example to &lt;code&gt;Promise&lt;/code&gt; (with &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot; rel=&quot;noreferrer&quot;&gt;KISS&lt;/a&gt;&lt;/strong&gt; way):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Plain&lt;/strong&gt; Javascript Async API code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider, successCallback, errorCallback) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;errorCallback&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;) )\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;successCallback&lt;/span&gt;( number / divider )\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/strong&gt; Javascript Async API code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rejected&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;) )\n        }\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( number / divider )\n\n     })\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I recommend visiting &lt;a href=&quot;http://exploringjs.com/es6/ch_promises.html&quot; rel=&quot;noreferrer&quot;&gt;this beautiful source&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;Also &lt;code&gt;Promise&lt;/code&gt; can be used with together &lt;code&gt;async\\await&lt;/code&gt; in &lt;code&gt;ES7&lt;/code&gt; to make the program flow wait for a &lt;code&gt;fullfiled&lt;/code&gt; result like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// wait 3000 milliseconds before calling fulfilled() method&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt; ( \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( name )\n            }, \n            &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;\n        )\n\n    })\n\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// awaits for a fulfilled result!&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(name); &lt;span class=&quot;hljs-comment&quot;&gt;// the console writes &quot;John Doe&quot; after 3000 milliseconds&lt;/span&gt;\n\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// calling the foo() method to run the code&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another usage with the same code by using &lt;code&gt;.then()&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// wait 3000 milliseconds before calling fulfilled() method&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt; ( \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( name )\n            }, \n            &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;\n        )\n\n    })\n\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the console writes &quot;John Doe&quot; after 3000 milliseconds&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){ &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(name) })\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; can also be used on any platform that is based on Node.js like &lt;code&gt;react-native&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: An &lt;strong&gt;hybrid&lt;/strong&gt; method &lt;br&gt;\n(The callback method is assumed to have two parameters as error and result)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider, callback) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;)\n            callback &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;( error )\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rejected&lt;/span&gt;( error )\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = number / divider\n        callback &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;( &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, result )\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( result )\n\n     })\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above method can respond result for old fashion callback and Promise usages.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Before converting a function as promise In Node.JS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//http wrapped module&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url, callback&lt;/span&gt;) {\n    request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(err);\n      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, response);             \n      }      \n    })\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err, response)\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;After Converting It&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//returning promise&lt;/span&gt;\n    request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err); &lt;span class=&quot;hljs-comment&quot;&gt;//promise reject&lt;/span&gt;\n      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response); &lt;span class=&quot;hljs-comment&quot;&gt;//promise resolve&lt;/span&gt;\n      }\n    })\n  })\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/1&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response) &lt;span class=&quot;hljs-comment&quot;&gt;//resolve callback(success)&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error) &lt;span class=&quot;hljs-comment&quot;&gt;//reject callback(failure)&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Incase you need to handle multiple request&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; allRequests = [];\nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/1&apos;&lt;/span&gt;)) \nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/2&apos;&lt;/span&gt;))\nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/5&apos;&lt;/span&gt;))    \n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(allRequests).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(results);&lt;span class=&quot;hljs-comment&quot;&gt;//result will be array which contains each promise response&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err)\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t think the &lt;code&gt;window.onload&lt;/code&gt; suggestion by @Benjamin will work all the time, as it doesn&apos;t detect whether it is called after the load. I have been bitten by that many times. Here is a version which should always work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseDOMready&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;complete&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;, resolve);\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;promiseDOMready&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(initOnLoad);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Node.js 8.0.0 includes a new &lt;code&gt;util.promisify()&lt;/code&gt; API that allows standard Node.js callback style APIs to be wrapped in a function that returns a Promise. An example use of &lt;code&gt;util.promisify()&lt;/code&gt; is shown below.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; util = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/some/file&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://nodejs.org/en/blog/release/v8.0.0/#improved-support-for-promises&quot; rel=&quot;nofollow noreferrer&quot;&gt;Improved support for Promises&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;A simple generic function I normally use.&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;fn, ...args&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...args, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n      }\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n    });\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;How to use it&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The function &lt;code&gt;promisify&lt;/code&gt; accepts a function with a callback:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;`The result is &lt;span class=&quot;hljs-subst&quot;&gt;${result}&lt;/span&gt;`&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, b, cb&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = a + b;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(result); &lt;span class=&quot;hljs-comment&quot;&gt;// passing args to the callback function&lt;/span&gt;\n   }\n\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// using the util&lt;/span&gt;\n  promise = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(sum, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, cb);\n  promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x)) &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You are probably not looking for this answer, but this will help understand the inner workings of the available utils&lt;/p&gt;\n    ","\n&lt;p&gt;In release candidate for Node.js 8.0.0, there&apos;s a new utility, &lt;code&gt;util.promisify&lt;/code&gt; (I&apos;ve written about &lt;a href=&quot;https://brunoscopelliti.com/new-util-promisify-in-nodejs/&quot; rel=&quot;noreferrer&quot;&gt;util.promisify&lt;/a&gt;), that encapsulates the capacity of promisifying whatever function.&lt;/p&gt;\n\n&lt;p&gt;It is not much different from the approaches suggested in the other answers, but has the advantage of being a core method, and not requiring additional dependencies. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; util = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you&apos;ve a &lt;code&gt;readFile&lt;/code&gt; method that returns a native &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./notes.txt&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;txt&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(txt))\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(...);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use JavaScript native promises with Node JS.&lt;/p&gt;\n\n&lt;p&gt;My Cloud 9 code link: &lt;a href=&quot;https://ide.c9.io/adx2803/native-promises-in-node&quot; rel=&quot;noreferrer&quot;&gt;https://ide.c9.io/adx2803/native-promises-in-node&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n* Created by dixit-lab on 20/6/16.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;express&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;//Simplified HTTP request client.&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;hljs-title function_&quot;&gt;express&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;error, response, body&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!error &amp;amp;&amp;amp; response.&lt;span class=&quot;hljs-property&quot;&gt;statusCode&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(body);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error);\n            }\n        })\n    });\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get all the albums of a user who have posted post 100&lt;/span&gt;\napp.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/listAlbums&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;req, res&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//get the post with post id 100&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://jsonplaceholder.typicode.com/posts/100&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://jsonplaceholder.typicode.com/users/&apos;&lt;/span&gt; + obj.&lt;span class=&quot;hljs-property&quot;&gt;userId&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/albums&apos;&lt;/span&gt;)\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e);\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        res.&lt;span class=&quot;hljs-title function_&quot;&gt;end&lt;/span&gt;(result);\n    })\n})\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = app.&lt;span class=&quot;hljs-title function_&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; host = server.&lt;span class=&quot;hljs-title function_&quot;&gt;address&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; port = server.&lt;span class=&quot;hljs-title function_&quot;&gt;address&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;port&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Example app listening at http://%s:%s&quot;&lt;/span&gt;, host, port)\n})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//run webservice on browser : http://localhost:8081/listAlbums&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With plain old vanilla javaScript, here&apos;s a solution to promisify an api callback.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url, callback&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;, url);\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;readystatechange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;successful ... should call callback ... &apos;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(xhr.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;));\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error ... callback with error data ... &apos;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(xhr, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                }\n            }\n        });\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@function&lt;/span&gt; promisify: convert api based callbacks to promises\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@description&lt;/span&gt; takes in a factory function and promisifies it\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@params&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} input function to promisify\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@params&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;} an array of inputs to the function to be promisified\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} promisified function\n     * */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n                fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, args.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n                }));\n            });\n        }\n    }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; get_promisified = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(get);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promise = &lt;span class=&quot;hljs-title function_&quot;&gt;get_promisified&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;some_url&apos;&lt;/span&gt;);\npromise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// corresponds to the resolve function&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;successful operation: &apos;&lt;/span&gt;, data);\n}, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Q library by kriskowal includes callback-to-promise functions.\nA method like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dosomething&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;params, cb&lt;/span&gt;) {\n  ...blah blah...\n  &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(error, results);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can be converted with Q.ninvoke&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;Q.&lt;span class=&quot;hljs-title function_&quot;&gt;ninvoke&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;dosomething&quot;&lt;/span&gt;,params).\n&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you have a few functions that take a callback and you want them to return a promise instead you can use this function to do the conversion.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callbackToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// change this to use what ever promise lib you are using&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// In this case i&apos;m using angular $q that I exposed on a util module&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defered = util.&lt;span class=&quot;hljs-property&quot;&gt;$q&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;) =&amp;gt; {\n            defered.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(val);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n        args.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(cb);    \n        func.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, args);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; defered.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Under node v7.6+ which has built in promises and async:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// promisify.js&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; = fn =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...args, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n        })\n    );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = promisify;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How to use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; readdir = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;readdir&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; promisify = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./promisify&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; readdirP = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(readdir);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myAsyncFn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; entries = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readdirP&lt;/span&gt;(path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; entries;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Node.js 8 you can &lt;strong&gt;promisify&lt;/strong&gt; object methods &lt;em&gt;on the fly&lt;/em&gt; using this npm module:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/doasync&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.npmjs.com/package/doasync&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It uses &lt;strong&gt;util.promisify&lt;/strong&gt; and &lt;strong&gt;Proxies&lt;/strong&gt; so that your objects stay unchanged. &lt;strong&gt;Memoization&lt;/strong&gt; is also done with the use of WeakMaps). Here are some examples:&lt;/p&gt;\n\n&lt;p&gt;With objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; doAsync = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;doasync&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(fs).&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;package.json&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dir&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result), {&lt;span class=&quot;hljs-attr&quot;&gt;colors&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n  });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(request)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://www.google.com&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{body}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(body);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n  });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can even use native &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; to bind some context:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(myFunc).&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(context, params)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/*...*/&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;strong&gt;native Promise&lt;/strong&gt; in ES6, for exemple dealing with setTimeout:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;enqueue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// returns the Promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt; {\n                queue.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(data);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(queue); &lt;span class=&quot;hljs-comment&quot;&gt;//call native resolve when finish&lt;/span&gt;\n            }\n            , &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// resolve() will be called in 10 ms&lt;/span&gt;\n    });\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this exemple, the Promise has no reason to fail, so &lt;code&gt;reject()&lt;/code&gt; is never called.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;callback style&lt;/strong&gt; function always like this(almost all function in node.js is this style):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//fs.readdir(path[, options], callback)&lt;/span&gt;\nfs.&lt;span class=&quot;hljs-title function_&quot;&gt;readdir&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mypath&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err,files&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(files))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This style has same feature: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;the callback function is passed by last argument. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;the callback function always accept the error object as it&apos;s first argument. &lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So, you could write a function for convert a function with this style like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; R =&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ramda&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * A convenient function for handle error in callback function.\n * Accept two function res(resolve) and rej(reject) ,\n * return a wrap function that accept a list arguments,\n * the first argument as error, if error is null,\n * the res function will call,else the rej function.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} res the function which will call when no error throw\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} rej the function which will call when  error occur\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} return a function that accept a list arguments,\n * the first argument as error, if error is null, the res function\n * will call,else the rej function\n **/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkErr&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;res, rej&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, ...data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; R.&lt;span class=&quot;hljs-title function_&quot;&gt;ifElse&lt;/span&gt;(\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;propEq&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;err&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;),\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(\n        res,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;)\n    ),\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(\n        rej,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;err&apos;&lt;/span&gt;)\n    )\n)({err, data})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * wrap the callback style function to Promise style function,\n * the callback style function must restrict by convention:\n * 1. the function must put the callback function where the last of arguments,\n * such as (arg1,arg2,arg3,arg...,callback)\n * 2. the callback function must call as callback(err,arg1arg2,arg...)\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} fun the callback style function to transform\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} return the new function that will return a Promise,\n * while the origin function throw a error, the Promise will be Promise.reject(error),\n * while the origin function work fine, the Promise will be Promise.resolve(args: array),\n * the args is which callback function accept\n * */&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;fun&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(\n    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res, rej&lt;/span&gt;) =&amp;gt;&lt;/span&gt; R.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(\n        fun,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title function_&quot;&gt;checkErr&lt;/span&gt;(res, rej),\n            args\n        )\n    )\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more concise, above example used ramda.js. Ramda.js is a excellent library for functional programming. In above code, we used it&apos;s &lt;strong&gt;apply&lt;/strong&gt;(like javascript &lt;code&gt;function.prototype.apply&lt;/code&gt;) and append(like javascript &lt;code&gt;function.prototype.push&lt;/code&gt; ).\nSo, we could convert the a callback style function to promise style function now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {readdir} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readdirP = &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt;(readdir)\n&lt;span class=&quot;hljs-title function_&quot;&gt;readdir&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(\n        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;files&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(files),\n        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err)\n    )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;toPromise&lt;/strong&gt; and &lt;strong&gt;checkErr&lt;/strong&gt; function is own by &lt;a href=&quot;https://github.com/jituanlin/berserk&quot; rel=&quot;nofollow noreferrer&quot;&gt;berserk&lt;/a&gt; library, it&apos;s a functional programming library fork by &lt;strong&gt;ramda.js&lt;/strong&gt;(create by me).&lt;/p&gt;\n\n&lt;p&gt;Hope this answer is useful for you.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;es6-promisify&lt;/code&gt; converts callback-based functions to Promise-based functions.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promisify = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;es6-promisify&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promisedFn = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(callbackedFn, args);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ref: &lt;a href=&quot;https://www.npmjs.com/package/es6-promisify&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.npmjs.com/package/es6-promisify&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can do something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// @flow&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;f: (any) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;any&amp;gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result)\n      })\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(e)\n    }\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; toPromise\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then use it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; friends = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;FriendsManager&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loadFriends&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(friends)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My promisify version of a &lt;code&gt;callback&lt;/code&gt; function is the &lt;code&gt;P&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; P = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; method = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (method &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(method) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n      params.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(state)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n      });\n      method.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(self, params);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;not a function&apos;&lt;/span&gt;));\n  });\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; callback = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;par, callback&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rnd = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rnd &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, par) : &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;trap&quot;&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;P&lt;/code&gt; function requires that the callback signature must be &lt;code&gt;callback(error,result)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Below is the implementation of how a function (callback API) can be converted to a promise.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToExec&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(resolve)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n         functionToExec.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, array);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n         &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error)\n      }\n    })\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// USE SCENARIO&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;apiFunction&lt;/span&gt; (path, callback) { &lt;span class=&quot;hljs-comment&quot;&gt;// Not a promise&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Logic&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promisedFunction = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(apiFunction);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;promisedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Receive the result here (callback)&lt;/span&gt;\n})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Or use it with await like this&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;);\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Perhaps already answered, but this is how I do it typically:&lt;br&gt;&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// given you&apos;ve defined this `Future` fn somewhere:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Future&lt;/span&gt; = fn =&amp;gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r,t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(r,t))}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// define an eventFn that takes a promise `resolver`&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eventFn&lt;/span&gt; = resolve =&amp;gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do event related closure actions here. When finally done, call `resolve()`&lt;/span&gt;\n  something.&lt;span class=&quot;hljs-property&quot;&gt;oneventfired&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(e)}\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// invoke eventFn in an `async` workflowFn using `Future`&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// to obtain a `promise` wrapper&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;workflowFn&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;(eventFn)}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Especially for things like &lt;code&gt;indexedDb&lt;/code&gt; event wrappers to simplify usage.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Or you might find this variation of &lt;code&gt;Future&lt;/code&gt; to be more general purpose&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PromiseEx&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Promise&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,...a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settledValue&lt;/span&gt; = v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve_&lt;/span&gt;(v,...a))\n  }\n  &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,...a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settledValue&lt;/span&gt; = v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reject_&lt;/span&gt;(v,...a))\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;(fn,...args) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; r,t,ft = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PromiseEx&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r_,t_&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {r=r_;t=t_})\n    ft.&lt;span class=&quot;hljs-property&quot;&gt;resolve_&lt;/span&gt; = r; ft.&lt;span class=&quot;hljs-property&quot;&gt;reject_&lt;/span&gt; = t; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(ft,...args);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(ft)\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Necromancing a little, bit this &lt;a href=&quot;https://gist.github.com/jonathan-annett/1a8ae0cc504427317ba2912d2620aae5&quot; rel=&quot;nofollow noreferrer&quot;&gt;link&lt;/a&gt; may be useful....&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;TLDR; look at the snippet example at the end of this answer&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h1&gt;write/convert functions that can be called expecting&lt;/h1&gt;\n&lt;h1&gt;a &lt;code&gt;cb(error,result)&lt;/code&gt; or &lt;code&gt;new Promise (...)&lt;/code&gt; format&lt;/h1&gt;\n&lt;hr&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;promiseToCB&lt;/code&gt; converts and exports an existing function that&apos;s been previously coded to return a promise&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;cbToPromise&lt;/code&gt; converts and exports an existing function that&apos;s been previously coded to call the last argument with (error,result)\n&lt;ul&gt;\n&lt;li&gt;if wrapped function supplies more than 1 result, the result will be an array of results&lt;/li&gt;\n&lt;li&gt;eg &lt;code&gt;cb(undefined,path,stat)&lt;/code&gt; ---&amp;gt; &lt;code&gt;resolve([path,stat])&lt;/code&gt; / &lt;code&gt;cb(undefined,[path,stat])&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;asPromise&lt;/code&gt; lets you code a new function to return a promise, but it can be called either way&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;asCallback&lt;/code&gt; lets you code a new function to call &lt;code&gt;cb(err,result)&lt;/code&gt;, but it can be invoked either way&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;sample functions&lt;/h2&gt;\n&lt;p&gt;each sample takes 2 arguments, and resolves/rejects/errors based on random number.&lt;/p&gt;\n&lt;p&gt;arg2 can be also be used to force pass or fail. (looks for &quot;-pass&quot; or &quot;-fail&quot;).&lt;/p&gt;\n&lt;h2&gt;wrap existing functions&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;exports the function to current &quot;this&quot; (or use &lt;code&gt;promiseToCB(function myFunc(){},newThis);&lt;/code&gt; )&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       \n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n    \n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n        });\n    });\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    },local);\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;or code new functions, which embed a wrapper.&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;test scipt for above functions&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; local = {}; \n    &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       \n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n    \n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n        });\n    });\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    },local);\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),info=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),error=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    \n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cpArgs = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;call&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt; (nm,fn,&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; nm===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=fn;fn=nm;nm=fn.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; args = &lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;){\n                   cb (&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,r);\n                }).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb);  \n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n            }\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(func,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:nm,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm]) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm];\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,nm,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:func,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt; (nm,fn,&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; nm===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=fn;fn=nm;nm=fn.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; args = &lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n                    \n                    args.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err,result&lt;/span&gt;){\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n                             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n                          }\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n                    });\n                              \n                    fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n                    \n                });\n            }\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(func,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:nm,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm]) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm];\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,nm,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:func,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func;\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt; (args,resolver,no_err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        promise  = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(resolver);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cb===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)  ? promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(no_err,result)}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb) : promise;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt; (args,wrap,no_err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        promise=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolver&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrap (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err,result&lt;/span&gt;) {\n                 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                 &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n            });\n        });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cb===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)  ? promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(no_err,result)}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb) : promise;\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cbPromiseTest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*global sampleFunc1,sampleFunc2*/&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; local = {}; \n        &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n           \n               &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n               \n               &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n        \n                       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                       &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                       &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n                   }\n               },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n            });\n        });\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        },local);\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        });}\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        });}\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),info=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),error=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        \n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n     \n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbPromiseTest&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Promises always have a &lt;code&gt;resolve&lt;/code&gt; and a &lt;code&gt;reject&lt;/code&gt;. When you write an async wrapper, just call the resolve and there you go.&lt;/p&gt;\n&lt;p&gt;You can write a wrapper function for pretty much any function taking a callback like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myAsyncWrapper&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; \n    &lt;span class=&quot;hljs-title function_&quot;&gt;someFunctionWithCallback&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error, response&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n      error ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response)\n    )\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can take this further to write a conversion function of callbacks to promises:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; =\n  (&lt;span class=&quot;hljs-params&quot;&gt;functionWithCallback&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;functionWithCallback&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error, response&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        error ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response)\n      )\n    );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This concept of wrapper functions is especially useful when using older libraries or SDKs. For example, consider the Facebook Graph API&apos;s JavaScript SDK, which uses a similar callback structure for making API requests.&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(apiURL, options, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; || !request) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// handle request&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In modern applications, it is much more useful to use a promise-based API.\nIf you use a function only once or twice, it may be better to promisify the response individually:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// in an async function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(apiURL, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res)))\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you use the function a lot, you can use the same wrapper concept to write a function like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;apiWrapper&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; \n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res)))\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although promisifiers are great sometimes, they won&apos;t work for specific instances like this. In times like these, look on Github for a modern wrapper, or write your own like this.&lt;/p&gt;\n    ","\n&lt;p&gt;since we know the characteristics of a callback-based function in advance,\nwe can create a function that transforms a callback-based function\ninto an equivalent function returning a Promise.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The callback is the last argument of the function&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If there is an error, it always the first argument passed to the callback&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Any return value is passed after the error to the callback&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;yourCallbackApi&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisified&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// newArgs=[..args,callback]&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArgs = [\n          ...args,\n          &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            }\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n          },\n        ];\n        &lt;span class=&quot;hljs-comment&quot;&gt;// invoke yourCallbackApi with the new list of arguments&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;yourCallbackApi&lt;/span&gt;(...newArgs);\n      });\n    };\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It is like 5 years late, but I wanted to post here my promesify version which takes functions from callbacks API and turns them into promises&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promesify&lt;/span&gt; = fn =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    &lt;span class=&quot;hljs-attr&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;cbThen&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n      &lt;span class=&quot;hljs-attr&quot;&gt;catch&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;cbCatch&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...params, cbThen, cbCatch);\n      }\n    })\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take a look to this very simple version here:\n&lt;a href=&quot;https://gist.github.com/jdtorregrosas/aeee96dd07558a5d18db1ff02f31e21a&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://gist.github.com/jdtorregrosas/aeee96dd07558a5d18db1ff02f31e21a&lt;/a&gt;&lt;/p&gt;\n    "],"id":124,"title":"How do I convert an existing callback API to promises?","content":"\n                \n&lt;p&gt;I want to work with promises but I have a callback API in a format like:&lt;/p&gt;\n\n&lt;h3&gt;1. DOM load or other one time event:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// set to callback&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;2. Plain callback:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;onChangeHandler&lt;/span&gt;) {\n    ...\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// change happened&lt;/span&gt;\n    ...\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;3. Node style callback (&quot;nodeback&quot;):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dat, callback&lt;/span&gt;) {\n    ...\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataParam&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n    ...\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;4. A whole library with node style callbacks:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;three&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data3&lt;/span&gt;) {\n            ...\n        });\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;How do I work with the API in promises, how do I &quot;promisify&quot; it?&lt;/h3&gt;\n    ","slug":"how-do-i-convert-an-existing-callback-api-to-promises-1657384694006","postType":"QUESTION","createdAt":"2022-07-09T16:38:14.000Z","updatedAt":"2022-07-09T16:38:14.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"How to horizontally center an element","slug":"how-to-horizontally-center-an-element-1657384634147"},{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588"},{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"Secure hash and salt for PHP passwords","slug":"secure-hash-and-salt-for-php-passwords-1657387363258"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"}]},"__N_SSG":true}