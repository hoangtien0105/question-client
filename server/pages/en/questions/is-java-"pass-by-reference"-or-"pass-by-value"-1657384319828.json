{"pageProps":{"data":{"answer":["\n&lt;p&gt;Java is always &lt;strong&gt;pass-by-value&lt;/strong&gt;.  Unfortunately, when we deal with objects we are really dealing with object-handles called &lt;em&gt;references&lt;/em&gt; which are passed-by-value as well.  This terminology and semantics easily confuse many beginners.&lt;/p&gt;\n&lt;p&gt;It goes like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aDog;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// we pass the object to foo&lt;/span&gt;\n    foo(aDog);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// aDog variable is still pointing to the &quot;Max&quot; dog when foo(...) returns&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    aDog == oldDog; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt; {\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// change d inside of foo() to point to a new Dog instance &quot;Fifi&quot;&lt;/span&gt;\n    d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the example above &lt;code&gt;aDog.getName()&lt;/code&gt; will still return &lt;code&gt;&quot;Max&quot;&lt;/code&gt;. The value &lt;code&gt;aDog&lt;/code&gt; within &lt;code&gt;main&lt;/code&gt; is not changed in the function &lt;code&gt;foo&lt;/code&gt; with the &lt;code&gt;Dog&lt;/code&gt; &lt;code&gt;&quot;Fifi&quot;&lt;/code&gt; as the object reference is passed by value. If it were passed by reference, then the &lt;code&gt;aDog.getName()&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt; would return &lt;code&gt;&quot;Fifi&quot;&lt;/code&gt; after the call to &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Likewise:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aDog;\n\n    foo(aDog);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// when foo(...) returns, the name of the dog has been changed to &quot;Fifi&quot;&lt;/span&gt;\n    aDog.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// but it is still the same dog:&lt;/span&gt;\n    aDog == oldDog; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt; {\n    d.getName().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this changes the name of d to be &quot;Fifi&quot;&lt;/span&gt;\n    d.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the above example, &lt;code&gt;Fifi&lt;/code&gt; is the dog&apos;s name after call to &lt;code&gt;foo(aDog)&lt;/code&gt; because the object&apos;s name was set inside of &lt;code&gt;foo(...)&lt;/code&gt;. Any operations that &lt;code&gt;foo&lt;/code&gt; performs on &lt;code&gt;d&lt;/code&gt; are such that, for all practical purposes, they are performed on &lt;code&gt;aDog&lt;/code&gt;, but it is &lt;strong&gt;not&lt;/strong&gt; possible to change the value of the variable &lt;code&gt;aDog&lt;/code&gt; itself.&lt;/p&gt;\n&lt;p&gt;For more information on pass by reference and pass by value, consult the following SO answer: &lt;a href=&quot;https://stackoverflow.com/a/430958/6005228&quot;&gt;https://stackoverflow.com/a/430958/6005228&lt;/a&gt;. This explains more thoroughly the semantics and history behind the two and also explains why Java and many other modern languages appear to do both in certain cases.&lt;/p&gt;\n    ","\n&lt;p&gt;I just noticed you referenced &lt;a href=&quot;http://javadude.com/articles/passbyvalue.htm&quot; rel=&quot;noreferrer&quot;&gt;my article&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The Java Spec says that everything in Java is pass-by-value. There is no such thing as &quot;pass-by-reference&quot; in Java.&lt;/p&gt;\n&lt;p&gt;The key to understanding this is that something like&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Dog myDog;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is &lt;em&gt;not&lt;/em&gt; a Dog; it&apos;s actually a &lt;em&gt;pointer&lt;/em&gt; to a Dog. The use of the term &quot;reference&quot; in Java is very misleading and is what causes most of the confusion here. What they call &quot;references&quot; act/feel more like what we&apos;d call &quot;pointers&quot; in most other languages.&lt;/p&gt;\n&lt;p&gt;What that means, is when you have&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myDog&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rover&quot;&lt;/span&gt;);\nfoo(myDog);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you&apos;re essentially passing the &lt;em&gt;address&lt;/em&gt; of the created &lt;code&gt;Dog&lt;/code&gt; object to the &lt;code&gt;foo&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;(I say essentially because Java pointers/references aren&apos;t direct addresses, but it&apos;s easiest to think of them that way.)&lt;/p&gt;\n&lt;p&gt;Suppose the &lt;code&gt;Dog&lt;/code&gt; object resides at memory address 42. This means we pass 42 to the method.&lt;/p&gt;\n&lt;p&gt;if the Method were defined as&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog someDog)&lt;/span&gt; {\n    someDog.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Max&quot;&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// AAA&lt;/span&gt;\n    someDog = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifi&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// BBB&lt;/span&gt;\n    someDog.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Rowlf&quot;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// CCC&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;let&apos;s look at what&apos;s happening.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the parameter &lt;code&gt;someDog&lt;/code&gt; is set to the value 42&lt;/li&gt;\n&lt;li&gt;at line &quot;AAA&quot;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;someDog&lt;/code&gt; is followed to the &lt;code&gt;Dog&lt;/code&gt; it points to (the &lt;code&gt;Dog&lt;/code&gt; object at address 42)&lt;/li&gt;\n&lt;li&gt;that &lt;code&gt;Dog&lt;/code&gt; (the one at address 42) is asked to change his name to Max&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;at line &quot;BBB&quot;\n&lt;ul&gt;\n&lt;li&gt;a new &lt;code&gt;Dog&lt;/code&gt; is created. Let&apos;s say he&apos;s at address 74&lt;/li&gt;\n&lt;li&gt;we assign the parameter &lt;code&gt;someDog&lt;/code&gt; to 74&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;at line &quot;CCC&quot;\n&lt;ul&gt;\n&lt;li&gt;someDog is followed to the &lt;code&gt;Dog&lt;/code&gt; it points to (the &lt;code&gt;Dog&lt;/code&gt; object at address 74)&lt;/li&gt;\n&lt;li&gt;that &lt;code&gt;Dog&lt;/code&gt; (the one at address 74) is asked to change his name to Rowlf&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;then, we return&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Now let&apos;s think about what happens outside the method:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Did &lt;code&gt;myDog&lt;/code&gt; change?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;There&apos;s the key.&lt;/p&gt;\n&lt;p&gt;Keeping in mind that &lt;code&gt;myDog&lt;/code&gt; is a &lt;em&gt;pointer&lt;/em&gt;, and not an actual &lt;code&gt;Dog&lt;/code&gt;, the answer is NO. &lt;code&gt;myDog&lt;/code&gt; still has the value 42; it&apos;s still pointing to the original &lt;code&gt;Dog&lt;/code&gt; (but note that because of line &quot;AAA&quot;, its name is now &quot;Max&quot; - still the same Dog; &lt;code&gt;myDog&lt;/code&gt;&apos;s value has not changed.)&lt;/p&gt;\n&lt;p&gt;It&apos;s perfectly valid to &lt;em&gt;follow&lt;/em&gt; an address and change what&apos;s at the end of it; that does not change the variable, however.&lt;/p&gt;\n&lt;p&gt;Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, the caller will not see any changes you make to where that pointer points. (In a language with pass-by-reference semantics, the method function &lt;em&gt;can&lt;/em&gt; change the pointer and the caller will see that change.)&lt;/p&gt;\n&lt;p&gt;In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.&lt;/p&gt;\n&lt;p&gt;If Java had pass-by-reference semantics, the &lt;code&gt;foo&lt;/code&gt; method we defined above would have changed where &lt;code&gt;myDog&lt;/code&gt; was pointing when it assigned &lt;code&gt;someDog&lt;/code&gt; on line BBB.&lt;/p&gt;\n&lt;p&gt;Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.&lt;/p&gt;\n    ","\n&lt;p&gt;Java always passes arguments &lt;em&gt;by value&lt;/em&gt;, NOT by reference.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Let me explain this through an &lt;a href=&quot;https://stackoverflow.com/a/9404727/597657&quot;&gt;example&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Main&lt;/span&gt; {\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n          &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;);\n          changeReference(f); &lt;span class=&quot;hljs-comment&quot;&gt;// It won&apos;t change the reference!&lt;/span&gt;\n          modifyReference(f); &lt;span class=&quot;hljs-comment&quot;&gt;// It will modify the object that the reference variable &quot;f&quot; refers to!&lt;/span&gt;\n     }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo a)&lt;/span&gt; {\n          &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n          a = b;\n     }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modifyReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo c)&lt;/span&gt; {\n          c.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;);\n     }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I will explain this in steps:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Declaring a reference named &lt;code&gt;f&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; and assign it a new object of type &lt;code&gt;Foo&lt;/code&gt; with an attribute &lt;code&gt;&quot;f&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/arXpP.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;From the method side, a reference of type &lt;code&gt;Foo&lt;/code&gt; with a name &lt;code&gt;a&lt;/code&gt; is declared and it&apos;s initially assigned &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeReference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Foo a)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/k2LBD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you call the method &lt;code&gt;changeReference&lt;/code&gt;, the reference &lt;code&gt;a&lt;/code&gt; will be assigned the object which is passed as an argument.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;changeReference(f);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/1Ez74.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declaring a reference named &lt;code&gt;b&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; and assign it a new object of type &lt;code&gt;Foo&lt;/code&gt; with an attribute &lt;code&gt;&quot;b&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Krx4N.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;a = b&lt;/code&gt; makes a new assignment to the reference &lt;code&gt;a&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;f&lt;/code&gt;, of the object whose attribute is &lt;code&gt;&quot;b&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/rCluu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you call &lt;code&gt;modifyReference(Foo c)&lt;/code&gt; method, a reference &lt;code&gt;c&lt;/code&gt; is created and assigned the object with attribute &lt;code&gt;&quot;f&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/PRZPg.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;c.setAttribute(&quot;c&quot;);&lt;/code&gt; will change the attribute of the object that reference &lt;code&gt;c&lt;/code&gt; points to it, and it&apos;s the same object that reference &lt;code&gt;f&lt;/code&gt; points to it.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/H9Qsf.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;I hope you understand now how passing objects as arguments works in Java :)&lt;/p&gt;\n    ","\n&lt;p&gt;Java is always pass by value, with no exceptions, &lt;strong&gt;ever&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java &lt;strong&gt;never&lt;/strong&gt; provides direct access to the values of &lt;em&gt;objects themselves&lt;/em&gt;, in &lt;em&gt;any&lt;/em&gt; circumstances. The only access to objects is through a &lt;em&gt;reference&lt;/em&gt; to that object. Because Java objects are &lt;em&gt;always&lt;/em&gt; accessed through a reference, rather than directly, it is common to talk about fields and variables &lt;em&gt;and method arguments&lt;/em&gt; as being &lt;em&gt;objects&lt;/em&gt;, when pedantically they are only &lt;em&gt;references to objects&lt;/em&gt;. &lt;strong&gt;The confusion stems from this (strictly speaking, incorrect) change in nomenclature.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So, when calling a method&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;For primitive arguments (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, etc.), the pass by value is &lt;em&gt;the actual value&lt;/em&gt; of the primitive (for example, 3).&lt;/li&gt;\n&lt;li&gt;For objects, the pass by value is the value of &lt;em&gt;the reference to the object&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So if you have &lt;code&gt;doSomething(foo)&lt;/code&gt; and &lt;code&gt;public void doSomething(Foo foo) { .. }&lt;/code&gt; the two Foos have copied &lt;em&gt;references&lt;/em&gt; that point to the same objects.&lt;/p&gt;\n\n&lt;p&gt;Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you&apos;ll just smile :-)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Step one please erase from your mind that word that starts with &apos;p&apos; &quot;_ _ _ _ _ _ _&quot;, especially if you come from other programming languages. Java and &apos;p&apos; cannot be written in the same book, forum, or even txt.&lt;/p&gt;\n\n&lt;p&gt;Step two remember that when you pass an Object into a method you&apos;re passing the Object reference and not the Object itself.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;Student&lt;/em&gt;: Master, does this mean that Java is pass-by-reference?&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Master&lt;/em&gt;: Grasshopper, No.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now think of what an Object&apos;s reference/variable does/is:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;A variable holds the bits that tell the JVM how to get to the referenced Object in memory (Heap).&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;When passing arguments to a method &lt;strong&gt;you ARE NOT passing the reference variable, but a copy of the bits in the reference variable&lt;/strong&gt;. Something like this: 3bad086a. 3bad086a represents a way to get to the passed object.&lt;/li&gt;\n&lt;li&gt;So you&apos;re just passing 3bad086a that it&apos;s the value of the reference.&lt;/li&gt;\n&lt;li&gt;You&apos;re passing the value of the reference and not the reference itself (and not the object).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;This value is actually COPIED and given to the method&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In the following (please don&apos;t try to compile/execute this...):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; Person person;\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; person = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; changeName(person);\n&lt;span class=&quot;hljs-number&quot;&gt;4.&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//I didn&apos;t use Person person below as an argument to be nice&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6.&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Person anotherReferenceToTheSamePersonObject)&lt;/span&gt; {\n&lt;span class=&quot;hljs-number&quot;&gt;7.&lt;/span&gt;     anotherReferenceToTheSamePersonObject.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jerry&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-number&quot;&gt;8.&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What happens?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The variable &lt;em&gt;person&lt;/em&gt; is created in line #1 and it&apos;s null at the beginning.&lt;/li&gt;\n&lt;li&gt;A new Person Object is created in line #2, stored in memory, and the variable &lt;em&gt;person&lt;/em&gt; is given the reference to the Person object. That is, its address. Let&apos;s say 3bad086a.&lt;/li&gt;\n&lt;li&gt;The variable &lt;em&gt;person&lt;/em&gt; holding the address of the Object is passed to the function in line #3.&lt;/li&gt;\n&lt;li&gt;In line #4 you can listen to the sound of silence &lt;/li&gt;\n&lt;li&gt;Check the comment on line #5&lt;/li&gt;\n&lt;li&gt;A method local variable -&lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt;- is created and then comes the magic in line #6:\n\n&lt;ul&gt;\n&lt;li&gt;The variable/reference &lt;em&gt;person&lt;/em&gt; is copied bit-by-bit and passed to &lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt; inside the function.&lt;/li&gt;\n&lt;li&gt;No new instances of Person are created.&lt;/li&gt;\n&lt;li&gt;Both &quot;&lt;em&gt;person&lt;/em&gt;&quot; and &quot;&lt;em&gt;anotherReferenceToTheSamePersonObject&lt;/em&gt;&quot; hold the same value of 3bad086a.&lt;/li&gt;\n&lt;li&gt;Don&apos;t try this but person==anotherReferenceToTheSamePersonObject would be true.&lt;/li&gt;\n&lt;li&gt;Both variables have IDENTICAL COPIES of the reference and they both refer to the same Person Object, the SAME Object on the Heap and NOT A COPY.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A picture is worth a thousand words:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ba3hJ.jpg&quot; alt=&quot;Pass by Value&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you didn&apos;t get it then just trust me and remember that it&apos;s better to say that &lt;strong&gt;Java is pass by value&lt;/strong&gt;. Well, &lt;strong&gt;pass by reference value&lt;/strong&gt;. Oh well, even better is &lt;strong&gt;&lt;em&gt;pass-by-copy-of-the-variable-value! ;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Now feel free to hate me but note that given this &lt;strong&gt;there is no difference between passing primitive data types and Objects&lt;/strong&gt; when talking about method arguments.&lt;/p&gt;\n\n&lt;p&gt;You always pass a copy of the bits of the value of the reference!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If it&apos;s a primitive data type these bits will contain the value of the primitive data type itself.&lt;/li&gt;\n&lt;li&gt;If it&apos;s an Object the bits will contain the value of the address that tells the JVM how to get to the Object.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you&apos;ll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Of course you can cut it short and just say that  &lt;strong&gt;Java is pass-by-value!&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Java passes references by value.&lt;/p&gt;\n\n&lt;p&gt;So you can&apos;t change the reference that gets passed in.&lt;/p&gt;\n    ","\n&lt;p&gt;I feel like arguing about &quot;pass-by-reference vs pass-by-value&quot; is not super-helpful.&lt;/p&gt;\n\n&lt;p&gt;If you say, &quot;Java is pass-by-whatever (reference/value)&quot;, in either case, you&apos;re not provide a complete answer. Here&apos;s some additional information that will hopefully aid in understanding what&apos;s happening in memory.&lt;/p&gt;\n\n&lt;p&gt;Crash course on stack/heap before we get to the Java implementation:\nValues go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.\nMemory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.&lt;/p&gt;\n\n&lt;p&gt;Okay. First off, local primitives go on the stack. So this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;101.1f&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;amIAwesome&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results in this:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/7nGKU.png&quot; alt=&quot;primitives on the stack&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are against the word &quot;pointer&quot;. Whatever. Just know that the address of the object goes on the stack.&lt;/p&gt;\n\n&lt;p&gt;Like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;problems&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jay-Z&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/yTIYp.png&quot; alt=&quot;a b*7ch aint one!&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;JButton[] marxBros = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Groucho&quot;&lt;/span&gt;);\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Zeppo&quot;&lt;/span&gt;);\nmarxBros[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harpo&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/v2b33.png&quot; alt=&quot;marx brothers&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So, what gets passed in when you call a method? If you pass in an object, what you&apos;re actually passing in is the address of the object. Some might say the &quot;value&quot; of the address, and some say it&apos;s just a reference to the object. This is the genesis of the holy war between &quot;reference&quot; and &quot;value&quot; proponents. What you call it isn&apos;t as important as that you understand that what&apos;s getting passed in is the address to the object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt;{\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;There goes &quot;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;!&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hisName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;John J. Jingleheimerschmitz&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; hisName;\n    shout(myName);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier &lt;code&gt;hisName&lt;/code&gt;, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call &lt;code&gt;shout()&lt;/code&gt;: a new stack frame is created and a new identifier, &lt;code&gt;name&lt;/code&gt; is created and assigned the address of the already-existing String.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/q0prc.png&quot; alt=&quot;la da di da da da da&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So, value, reference? You say &quot;potato&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, reassigning Object parameters doesn&apos;t affect the argument, e.g.,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object bar)&lt;/span&gt; {\n    bar = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hah!&quot;&lt;/span&gt;;\n    foo(baz);\n    System.out.println(baz);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will print out &lt;code&gt;&quot;Hah!&quot;&lt;/code&gt; instead of &lt;code&gt;null&lt;/code&gt;. The reason this works is because &lt;code&gt;bar&lt;/code&gt; is a copy of the value of &lt;code&gt;baz&lt;/code&gt;, which is just a reference to &lt;code&gt;&quot;Hah!&quot;&lt;/code&gt;. If it were the actual reference itself, then &lt;code&gt;foo&lt;/code&gt; would have redefined &lt;code&gt;baz&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to show the contrast, compare the following &lt;a href=&quot;https://en.wikipedia.org/wiki/C++&quot; rel=&quot;noreferrer&quot;&gt;C++&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; snippets:&lt;/p&gt;\n\n&lt;p&gt;In C++: &lt;strong&gt;Note: Bad code - memory leaks!&lt;/strong&gt;  But it demonstrates the point.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cppMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;ref, Dog obj, Dog &amp;amp;objRef, Dog *objPtr, Dog *&amp;amp;objPtrRef)&lt;/span&gt;\n{\n    val = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy&lt;/span&gt;\n    ref = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original variable&lt;/span&gt;\n    obj.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of Dog passed&lt;/span&gt;\n    objRef.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objRef&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog passed&lt;/span&gt;\n    objPtr-&amp;gt;SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objPtr&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                               &lt;span class=&quot;hljs-comment&quot;&gt;// by the copy of the pointer passed.&lt;/span&gt;\n    objPtr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtr&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of the pointer, &lt;/span&gt;\n                                   &lt;span class=&quot;hljs-comment&quot;&gt;// leaving the original object alone.&lt;/span&gt;\n    objPtrRef-&amp;gt;SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objRefPtr&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                                    &lt;span class=&quot;hljs-comment&quot;&gt;// by the original pointer passed. &lt;/span&gt;\n    objPtrRef = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtrRef&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original pointer passed&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dog(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d0&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dog(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d1&quot;&lt;/span&gt;);\n    Dog *d2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d2&quot;&lt;/span&gt;);\n    Dog *d3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d3&quot;&lt;/span&gt;);\n    cppMethod(a, b, d0, d1, d2, d3);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// a is still set to 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// b is now set to 7&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d0 still have name &quot;d0&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d1 now has name &quot;objRef&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d2 now has name &quot;objPtr&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d3 now has name &quot;newObjPtrRef&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Java, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;javaMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val, Dog objPtr)&lt;/span&gt;\n{\n   val = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy&lt;/span&gt;\n   objPtr.SetName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;objPtr&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the original Dog pointed to &lt;/span&gt;\n                            &lt;span class=&quot;hljs-comment&quot;&gt;// by the copy of the pointer passed.&lt;/span&gt;\n   objPtr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;newObjPtr&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Modifies the copy of the pointer, &lt;/span&gt;\n                                  &lt;span class=&quot;hljs-comment&quot;&gt;// leaving the original object alone.&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d0&quot;&lt;/span&gt;);\n    javaMethod(a, d0);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// a is still set to 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// d0 now has name &quot;objPtr&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.&lt;/p&gt;\n    ","\n&lt;p&gt;Java passes references to objects by value.&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term &lt;em&gt;call by sharing&lt;/em&gt; (also known as &lt;em&gt;call by object-sharing&lt;/em&gt; and &lt;em&gt;call by object&lt;/em&gt;) for this specific case of &quot;call by value where the value is a reference&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;The crux of the matter is that the word &lt;em&gt;reference&lt;/em&gt; in the expression &quot;pass by reference&quot; means something completely different from the usual meaning of the word &lt;em&gt;reference&lt;/em&gt; in Java. &lt;/p&gt;\n\n&lt;p&gt;Usually in Java &lt;em&gt;reference&lt;/em&gt; means a a &lt;em&gt;reference to an object&lt;/em&gt;. But the technical terms &lt;em&gt;pass by reference/value&lt;/em&gt; from programming language theory is talking about a &lt;em&gt;reference to the memory cell holding the variable&lt;/em&gt;, which is something completely different.&lt;/p&gt;\n    ","\n&lt;p&gt;In java everything is reference, so when you have something like:\n    &lt;code&gt;Point pnt1 = new Point(0,0);&lt;/code&gt; Java does following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Creates new Point object&lt;/li&gt;\n&lt;li&gt;Creates new Point reference and initialize that reference to &lt;em&gt;point (refer to)&lt;/em&gt; on previously created Point object.&lt;/li&gt;\n&lt;li&gt;From here, through Point object life, you will access to that object through pnt1\n reference. So we can say that in Java you manipulate object through its reference.&lt;br&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/jM54f.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Java doesn&apos;t pass method arguments by reference; it passes them by value.&lt;/strong&gt; I will use example from &lt;a href=&quot;http://www.javaworld.com/javaqa/2000-05/03-qa-0526-pass.html&quot; rel=&quot;noreferrer&quot;&gt;this site&lt;/a&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tricky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Point arg1, Point arg2)&lt;/span&gt; {\n  arg1.x = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n  arg1.y = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arg1;\n  arg1 = arg2;\n  arg2 = temp;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String [] args)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1: &quot;&lt;/span&gt; +pnt1.y); \n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n  tricky(pnt1,pnt2);\n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1:&quot;&lt;/span&gt; + pnt1.y); \n  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);  \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Flow of the program:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnt2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Creating two different Point object with two different reference associated.\n&lt;img src=&quot;https://i.stack.imgur.com/5LIKC.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1: &quot;&lt;/span&gt; + pnt1.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y1: &quot;&lt;/span&gt; +pnt1.y); \nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2: &quot;&lt;/span&gt; + pnt2.x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Y2: &quot;&lt;/span&gt; +pnt2.y);\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As expected output will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;X1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     Y1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;On this line &apos;pass-by-value&apos; goes into the play...&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;tricky(pnt1,pnt2);           &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tricky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Point arg1, Point arg2)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;References &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;pnt2&lt;/code&gt; are &lt;strong&gt;passed by value&lt;/strong&gt; to the tricky method, which means that now yours references &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;pnt2&lt;/code&gt; have their &lt;code&gt;copies&lt;/code&gt; named &lt;code&gt;arg1&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;.So &lt;code&gt;pnt1&lt;/code&gt; and &lt;code&gt;arg1&lt;/code&gt; &lt;em&gt;points&lt;/em&gt; to the same object. (Same for the &lt;code&gt;pnt2&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;)\n&lt;img src=&quot;https://i.stack.imgur.com/qd1GH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;In the &lt;code&gt;tricky&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; arg1.x = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n arg1.y = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/o4WT0.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Next in the &lt;code&gt;tricky&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arg1;\narg1 = arg2;\narg2 = temp;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, you first create new &lt;code&gt;temp&lt;/code&gt; Point reference which will &lt;em&gt;point&lt;/em&gt; on same place like &lt;code&gt;arg1&lt;/code&gt; reference. Then you move reference &lt;code&gt;arg1&lt;/code&gt; to &lt;em&gt;point&lt;/em&gt; to the same place like &lt;code&gt;arg2&lt;/code&gt; reference.\nFinally &lt;code&gt;arg2&lt;/code&gt; will &lt;em&gt;point&lt;/em&gt; to the same place like &lt;code&gt;temp&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fX5Q3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;From here scope of &lt;code&gt;tricky&lt;/code&gt; method is gone and you don&apos;t have access any more to the references: &lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt;, &lt;code&gt;temp&lt;/code&gt;. &lt;strong&gt;But important note is that everything you do with these references when they are &apos;in life&apos; will permanently affect object on which they are &lt;em&gt;point&lt;/em&gt; to.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;So after executing method &lt;code&gt;tricky&lt;/code&gt;, when you return to &lt;code&gt;main&lt;/code&gt;, you have this situation:\n&lt;img src=&quot;https://i.stack.imgur.com/LRETe.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So now, completely execution of program will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;X1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y1: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nX1: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;       Y1: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\nX2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         Y2: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Java is always pass by value, not pass by reference&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;First of all, we need to understand what pass by value and pass by reference are.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pass by value means that you are making a copy in memory of the actual parameter&apos;s value that is passed in. This is a copy of the contents of the actual parameter&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pass by reference (also called pass by address) means that a copy of the address of the actual parameter is stored&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Sometimes Java can give the illusion of pass by reference. Let&apos;s see how it works by using the example below:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n        t.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;initialvalue&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeValue(t);\n        System.out.println(t.name);\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Test f)&lt;/span&gt; {\n        f.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;changevalue&quot;&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    String name;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output of this program is:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;changevalue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Let&apos;s understand step by step:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As we all know it will create an object in the heap and return the reference value back to t. For example, suppose the value of t is &lt;code&gt;0x100234&lt;/code&gt; (we don&apos;t know the actual JVM internal value, this is just an example) .&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/AVrhI.png&quot; alt=&quot;first illustration&quot;&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeValue(t);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When passing reference t to the function it will not directly pass the actual reference value of object test,  but it will create a copy of t and then pass it to the function. Since it is &lt;strong&gt;passing by value&lt;/strong&gt;, it passes a copy of the variable rather than the actual reference of it. Since we said the value of t was &lt;code&gt;0x100234&lt;/code&gt;, both t and f will have the same value and hence they will point to the same object.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/WwdPh.png&quot; alt=&quot;second illustration&quot;&gt;&lt;/p&gt;\n&lt;p&gt;If you change anything in the function using reference f it will modify the existing contents of the object. That is why we got the output &lt;code&gt;changevalue&lt;/code&gt;,   which is updated in the function.&lt;/p&gt;\n&lt;p&gt;To understand this more clearly, consider the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;();\n        t.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;initialvalue&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValue&lt;/span&gt;().changeRefence(t);\n        System.out.println(t.name);\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeRefence&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Test f)&lt;/span&gt; {\n        f = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    String name;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will this throw a &lt;code&gt;NullPointerException&lt;/code&gt;? No, because it only passes a copy of the reference.\nIn the case of passing by reference, it could have thrown a &lt;code&gt;NullPointerException&lt;/code&gt;, as seen below:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/jH6KP.png&quot; alt=&quot;third illustration&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Hopefully this will help.&lt;/p&gt;\n    ","\n&lt;p&gt;There are already great answers that cover this. I wanted to make a small contribution by sharing a &lt;strong&gt;very simple example&lt;/strong&gt; (which will compile) contrasting the behaviors between Pass-by-reference in c++ and Pass-by-value in Java.&lt;/p&gt;\n\n&lt;p&gt;A few points:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The term &quot;reference&quot; is a overloaded with two separate meanings. In Java it simply means a pointer, but in the context of &quot;Pass-by-reference&quot; it means a handle to the original variable which was passed in.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Java is Pass-by-value&lt;/strong&gt;. Java is a descendent of C (among other languages). Before C, several (but not all) earlier languages like FORTRAN and COBOL supported PBR, but C did not. PBR allowed these other languages to make changes to the passed variables inside sub-routines. In order to accomplish the same thing (i.e. change the values of variables inside functions), C programmers passed pointers to variables into functions. Languages inspired by C, such as Java, borrowed this idea and continue to pass pointer to methods as C did, except that Java calls its pointers References. Again, this is a different use of the word &quot;Reference&quot; than in &quot;Pass-By-Reference&quot;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;C++ allows Pass-by-reference&lt;/strong&gt; by declaring a reference parameter using the &quot;&amp;amp;&quot; character (which happens to be the same character used to indicate &quot;the address of a variable&quot; in both C and C++). For example, if we pass in a pointer by reference, the parameter and the argument are not just pointing to the same object. Rather, they are the same variable. If one gets set to a different address or to null, so does the other.&lt;/li&gt;\n&lt;li&gt;In the C++ example below I&apos;m passing a &lt;strong&gt;pointer&lt;/strong&gt; to a null terminated string &lt;strong&gt;by reference&lt;/strong&gt;. And in the Java example below I&apos;m passing a Java reference to a String (again, the same as a pointer to a String) by value. Notice the output in the comments.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;C++ pass by reference example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;using namespace std;\n#include &amp;lt;iostream&amp;gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&amp;amp;str)&lt;/span&gt;{   &lt;span class=&quot;hljs-comment&quot;&gt;// the &apos;&amp;amp;&apos; makes this a reference parameter&lt;/span&gt;\n    str = NULL;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;not Null&quot;&lt;/span&gt;;\n    change(str);\n    cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;str is &quot;&lt;/span&gt; &amp;lt;&amp;lt; str;      &lt;span class=&quot;hljs-comment&quot;&gt;// ==&amp;gt;str is &amp;lt;null&amp;gt;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Java pass &quot;a Java reference&quot; by value example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueDemo&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String str)&lt;/span&gt;{\n        str = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;ValueDemo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueDemo&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;not null&quot;&lt;/span&gt;;\n        vd.change(str);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str is &quot;&lt;/span&gt; + str);    &lt;span class=&quot;hljs-comment&quot;&gt;// ==&amp;gt; str is not null!!&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// Note that if &quot;str&quot; was&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// passed-by-reference, it&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// WOULD BE NULL after the&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-comment&quot;&gt;// call to change().&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Several people have written comments which seem to indicate that either they are not looking at my examples or they don&apos;t get the c++ example. Not sure where the disconnect is, but guessing the c++ example is not clear. I&apos;m posting the same example in pascal because I think pass-by-reference looks cleaner in pascal, but I could be wrong. I might just be confusing people more; I hope not.&lt;/p&gt;\n\n&lt;p&gt;In pascal, parameters passed-by-reference are called &quot;var parameters&quot;. In the procedure setToNil below, please note the keyword &apos;var&apos; which precedes the parameter &apos;ptr&apos;. When a pointer is passed to this procedure, it will be passed &lt;strong&gt;by reference&lt;/strong&gt;. Note the behavior: when this procedure sets ptr to nil (that&apos;s pascal speak for NULL), it will set the argument to nil--you can&apos;t do that in Java.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;program passByRefDemo;\n&lt;span class=&quot;hljs-type&quot;&gt;type&lt;/span&gt; \n   &lt;span class=&quot;hljs-variable&quot;&gt;iptr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ^integer;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;\n   ptr: iptr;\n\n   procedure &lt;span class=&quot;hljs-title function_&quot;&gt;setToNil&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ptr : iptr)&lt;/span&gt;;\n   begin\n       ptr := nil;\n   end;\n\nbegin\n   &lt;span class=&quot;hljs-title function_&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ptr)&lt;/span&gt;;\n   ptr^ := &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n   setToNil(ptr);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ptr = nil) then\n       &lt;span class=&quot;hljs-title function_&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ptr seems to be nil&apos;&lt;/span&gt;)&lt;/span&gt;;     { ptr should be nil, so &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; line will run. }\nend.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Some excerpts from &lt;strong&gt;&quot;THE Java Programming Language&quot;&lt;/strong&gt; by Ken Arnold, &lt;strong&gt;James Gosling (the guy who invented Java)&lt;/strong&gt;, and David Holmes, chapter 2, section 2.6.5&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;All parameters to methods are passed &quot;by value&quot;&lt;/strong&gt;. In other words,\n  values of parameter variables in a method are copies of the invoker\n  specified as arguments.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;He goes on to make the same point regarding objects . . . &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You should note that when the parameter is an object reference, it is\n  the object reference-not the object itself-that is &lt;strong&gt;passed &quot;by value&quot;&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And towards the end of the same section he makes a broader statement about java being only pass by value and never pass by reference.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The Java programming language &lt;strong&gt;does not pass objects by reference; it&lt;/strong&gt;\n  &lt;strong&gt;passes object references by value&lt;/strong&gt;. Because two copies of the same\n  reference refer to the same actual object, changes made through one\n  reference variable are visible through the other. There is exactly one\n  parameter passing mode-&lt;strong&gt;pass by value&lt;/strong&gt;-and that helps keep things\n  simple.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This section of the book has a great explanation of parameter passing in Java and of the distinction between pass-by-reference and pass-by-value and it&apos;s by the creator of Java. I would encourage anyone to read it, especially if you&apos;re still not convinced.&lt;/p&gt;\n\n&lt;p&gt;I think the difference between the two models is very subtle and unless you&apos;ve done programming where you actually used pass-by-reference, it&apos;s easy to miss where two models differ.&lt;/p&gt;\n\n&lt;p&gt;I hope this settles the debate, but probably won&apos;t.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I might be a little obsessed with this post. Probably because I feel that the makers of Java inadvertently spread misinformation. If instead of using the word &quot;reference&quot; for pointers they had used something else, say \ndingleberry, there would&apos;ve been no problem. You could say, &quot;Java passes dingleberries by value and not by reference&quot;, and nobody would be confused.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s the reason only Java developers have issue with this. They look at the word &quot;reference&quot; and think they know exactly what that means, so they don&apos;t even bother to consider the opposing argument.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I noticed a comment in an older post, which made a balloon analogy which I really liked. So much so that I decided to glue together some clip-art to make a set of cartoons to illustrate the point.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Passing a reference by value&lt;/strong&gt;--Changes to the reference are not reflected in the caller&apos;s scope, but the changes to the object are. This is because the reference is copied, but the both the original and the copy refer to the same object.\n&lt;a href=&quot;https://i.stack.imgur.com/RvkqU.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RvkqU.png&quot; alt=&quot;Passing Object references By Value&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pass by reference&lt;/strong&gt;--There is no copy of the reference. Single reference is shared by both the caller and the function being called. Any changes to the reference or the Object&apos;s data are reflected in the caller&apos;s scope.\n&lt;a href=&quot;https://i.stack.imgur.com/SHXkC.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SHXkC.png&quot; alt=&quot;Pass by reference&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 4&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I have seen posts on this topic which describe the low level implementation of parameter passing in Java, which I think is great and very helpful because it makes an abstract idea concrete. However, to me the question is more about &lt;strong&gt;the behavior described in the language specification&lt;/strong&gt; than about the technical implementation of the behavior. This is an exerpt from the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1&quot; rel=&quot;noreferrer&quot;&gt;Java Language Specification, section 8.4.1&lt;/a&gt; :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the\n  actual argument expressions initialize newly created parameter\n  variables, each of the declared type, before execution of the body of\n  the method or constructor.&lt;/strong&gt; The Identifier that appears in the\n  DeclaratorId may be used as a simple name in the body of the method or\n  constructor to refer to the formal parameter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Which means, java creates a copy of the passed parameters before executing a method. Like most people who studied compilers in college, I used &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201100886&quot; rel=&quot;noreferrer&quot;&gt;&quot;The Dragon Book&quot;&lt;/a&gt; which is &lt;strong&gt;THE&lt;/strong&gt; compilers book. It has a good description of &quot;Call-by-value&quot; and &quot;Call-by-Reference&quot; in Chapter 1. The Call-by-value description matches up with Java Specs exactly.&lt;/p&gt;\n\n&lt;p&gt;Back when I studied compilers-in the 90&apos;s, I used the first edition of the book from 1986 which pre-dated Java by about 9 or 10 years. However, I just ran across a copy of the &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B009TGD06W&quot; rel=&quot;noreferrer&quot;&gt;2nd Eddition&lt;/a&gt; from 2007 &lt;strong&gt;which actually mentions Java!&lt;/strong&gt; Section 1.6.6 labeled &quot;Parameter Passing Mechanisms&quot; describes parameter passing pretty nicely. Here is an excerpt under the heading &quot;Call-by-value&quot; which mentions Java:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In call-by-value, the actual parameter is evaluated (if it is an\n  expression) or copied (if it is a variable). The value is placed in\n  the location belonging to the corresponding formal parameter of the\n  called procedure. &lt;strong&gt;This method is used in C and Java, and is a common\n  option in C++ , as well as in most other languages.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Java is a pass by value(stack memory)&lt;/p&gt;\n&lt;p&gt;How it works&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Let&apos;s first understand that where java stores primitive data type and object data type.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Primitive data types itself and object references are stored in the stack.\nObjects themselves are stored in the heap.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It means, Stack memory stores primitive data types and also the\naddresses of objects.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And you always pass a copy of the bits of the value of the reference.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it&apos;s a primitive data type then these copied bits contain the value of the primitive data type itself, That&apos;s why when we change the value of argument inside the method then it does not reflect the changes outside.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it&apos;s an object data type like &lt;strong&gt;Foo foo=new Foo()&lt;/strong&gt; then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file &lt;strong&gt;abc.txt&lt;/strong&gt; at &lt;strong&gt;C:\\desktop&lt;/strong&gt; and suppose we make shortcut of the same file and put this inside &lt;strong&gt;C:\\desktop\\abc-shortcut&lt;/strong&gt; so when you access the file from &lt;strong&gt;C:\\desktop\\abc.txt&lt;/strong&gt; and write &lt;strong&gt;&apos;Stack Overflow&apos;&lt;/strong&gt; and close the file and again you open the file from shortcut then you write &lt;strong&gt;&apos; is the largest online community for programmers to learn&apos;&lt;/strong&gt; then total file change will be &lt;strong&gt;&apos;Stack Overflow is the largest online community for programmers to learn&apos;&lt;/strong&gt; which means it doesn&apos;t matter from where you open the file , each time we were accessing the same file , here we can assume &lt;strong&gt;Foo&lt;/strong&gt; as a file and suppose foo stored at &lt;strong&gt;123hd7h&lt;/strong&gt;(original address like &lt;strong&gt;C:\\desktop\\abc.txt&lt;/strong&gt; ) address and &lt;strong&gt;234jdid&lt;/strong&gt;(copied address like &lt;strong&gt;C:\\desktop\\abc-shortcut&lt;/strong&gt; which actually contains the original address of the file inside) ..\nSo for better understanding make shortcut file and feel.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;A reference is always a value when represented, no matter what language you use.&lt;/h2&gt;\n\n&lt;p&gt;Getting an outside of the box view, let&apos;s look at Assembly or some low level memory management. At the CPU level a &lt;em&gt;reference&lt;/em&gt; to anything immediately becomes a &lt;em&gt;value&lt;/em&gt; if it gets written to memory or to one of the CPU registers. (That is why &lt;em&gt;pointer&lt;/em&gt; is a good definition. It is a value, which has a purpose at the same time).&lt;/p&gt;\n\n&lt;p&gt;Data in memory has a &lt;strong&gt;Location&lt;/strong&gt; and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a &lt;strong&gt;Name&lt;/strong&gt; to certain &lt;strong&gt;Location&lt;/strong&gt; (aka variable), but when compiling the code, the assembler simply replaces &lt;strong&gt;Name&lt;/strong&gt; with the designated location just like your browser replaces domain names with IP addresses.&lt;/p&gt;\n\n&lt;p&gt;Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).&lt;/p&gt;\n\n&lt;p&gt;Lets say we have a variable Foo, its &lt;strong&gt;Location&lt;/strong&gt; is at the 47th byte in memory and its &lt;strong&gt;Value&lt;/strong&gt; is 5. We have another variable &lt;strong&gt;Ref2Foo&lt;/strong&gt; which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two &lt;strong&gt;Values&lt;/strong&gt;.\nIf you use them as references then to reach to &lt;code&gt;5&lt;/code&gt; we have to travel:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;(Name)[Location] -&amp;gt; [Value at the Location]\n---------------------\n(Ref2Foo)[&lt;span class=&quot;hljs-number&quot;&gt;223&lt;/span&gt;]  -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;\n(Foo)[&lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;]       -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how jump-tables work. &lt;/p&gt;\n\n&lt;p&gt;If we want to call a method/function/procedure with Foo&apos;s value, there are a few possible way to pass the variable to the method, depending on the &lt;strong&gt;language&lt;/strong&gt; and its several method invocation modes:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;5 gets copied to one of the CPU registers (ie. EAX).&lt;/li&gt;\n&lt;li&gt;5 gets PUSHd to the stack.&lt;/li&gt;\n&lt;li&gt;47 gets copied to one of the CPU registers&lt;/li&gt;\n&lt;li&gt;47 PUSHd to the stack.&lt;/li&gt;\n&lt;li&gt;223 gets copied to one of the CPU registers.&lt;/li&gt;\n&lt;li&gt;223 gets PUSHd to the stack.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In every cases above a value - a &lt;strong&gt;copy&lt;/strong&gt; of an existing value - has been created, it is now upto the receiving method to handle it. When you write &quot;Foo&quot; inside the method, it is either read out from EAX, or automatically  &lt;strong&gt;dereferenced&lt;/strong&gt;, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a &lt;em&gt;reference&lt;/em&gt; is a &lt;em&gt;value&lt;/em&gt; when represented, because a reference is a value that has to be processed (at language level).&lt;/p&gt;\n\n&lt;p&gt;Now we have passed Foo to the method:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;in case 1. and 2. if you change Foo (&lt;code&gt;Foo = 9&lt;/code&gt;) it only affects local scope as you have a copy of the Value. From inside the method we cannot even determine where in memory the original Foo was located.&lt;/li&gt;\n&lt;li&gt;in case 3. and 4. if you use default language constructs and change Foo (&lt;code&gt;Foo = 11&lt;/code&gt;), it could change Foo globally (depends on the language, ie. Java or like Pascal&apos;s &lt;code&gt;procedure findMin(x, y, z: integer;&lt;/code&gt;&lt;strong&gt;var m&lt;/strong&gt;&lt;code&gt;: integer);&lt;/code&gt;). However if the language allows you to circumvent the dereference process, you can change &lt;code&gt;47&lt;/code&gt;, say to &lt;code&gt;49&lt;/code&gt;. At that point Foo seems to have been changed if you read it, because you have changed the &lt;strong&gt;local pointer&lt;/strong&gt; to it. And if you were to modify this Foo inside the method (&lt;code&gt;Foo = 12&lt;/code&gt;) you will probably FUBAR the execution of the program (aka. segfault) because you will write to a different memory than expected, you can even modify an area that is destined to hold executable program and writing to it will modify running code (Foo is now not at &lt;code&gt;47&lt;/code&gt;). BUT Foo&apos;s value of &lt;code&gt;47&lt;/code&gt; did not change globally, only the one inside the method, because &lt;code&gt;47&lt;/code&gt; was also a copy to the method.&lt;/li&gt;\n&lt;li&gt;in case 5. and 6. if you modify &lt;code&gt;223&lt;/code&gt; inside the method it creates the same mayhem as in 3. or 4. (a pointer, pointing to a now bad value, that is again used as a pointer) but this is still a local problem, as 223 was &lt;strong&gt;copied&lt;/strong&gt;. However if you are able to dereference &lt;code&gt;Ref2Foo&lt;/code&gt; (that is &lt;code&gt;223&lt;/code&gt;), reach to and modify the pointed value &lt;code&gt;47&lt;/code&gt;, say, to &lt;code&gt;49&lt;/code&gt;, it will affect Foo &lt;strong&gt;globally&lt;/strong&gt;, because in this case the methods got a copy of &lt;code&gt;223&lt;/code&gt;  but the referenced &lt;code&gt;47&lt;/code&gt; exists only once, and changing that to &lt;code&gt;49&lt;/code&gt; will lead every &lt;code&gt;Ref2Foo&lt;/code&gt; double-dereferencing to a wrong value.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only &lt;em&gt;pass-by-reference&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Strict &lt;em&gt;pass-by-value&lt;/em&gt; is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller&apos;s view) and a few languages allows to modify the Value of the reference itself.&lt;/p&gt;\n\n&lt;p&gt;So in short and in Java&apos;s own terminology, Java is &lt;em&gt;pass-by-value&lt;/em&gt; where &lt;em&gt;value&lt;/em&gt; can be: either a &lt;strong&gt;real value&lt;/strong&gt; or a &lt;strong&gt;value&lt;/strong&gt; that is a representation of a &lt;strong&gt;reference&lt;/strong&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In Java, method arguments are all passed by value :&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Java arguments are &lt;strong&gt;all passed by value&lt;/strong&gt; (the value  or reference is copied when used by the method) :&lt;/p&gt;\n&lt;p&gt;In the case of primitive types, Java behaviour is simple:\nThe value is copied in another instance of the primitive type.&lt;/p&gt;\n&lt;p&gt;In case of Objects, this is the same:\nObject variables are references (mem buckets holding only Objects &lt;strong&gt;address&lt;/strong&gt; instead of a primitive value) that was created using the &quot;new&quot; keyword, and are copied like primitive types.&lt;/p&gt;\n&lt;p&gt;The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).\nObject&apos;s &lt;strong&gt;content/members&lt;/strong&gt; might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference.&lt;/p&gt;\n&lt;p&gt;&quot;String&quot; Objects appear to be a good &lt;strong&gt;counter-example&lt;/strong&gt; to the urban legend saying that &quot;Objects are passed by reference&quot;:&lt;/p&gt;\n&lt;p&gt;In effect, using a method, you will never be able, to update the value of a String passed as argument:&lt;/p&gt;\n&lt;p&gt;A String Object, holds characters by an array declared &lt;strong&gt;final&lt;/strong&gt; that can&apos;t be modified.\nOnly the address of the Object might be replaced by another using &quot;new&quot;.\nUsing &quot;new&quot; to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringBuffer s1, StringBuffer s2)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s1;\n    s1 = s2;\n    s2 = temp;\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;);\n    swap(s1, s2);\n    System.out.println(s1);\n    System.out.println(s2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringBuffer s1)&lt;/span&gt; {\n    s1.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt;{\n    s = s+&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However you could make a wrapper for String like this which would make it able to use it with Strings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringWrapper&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String value;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;StringWrapper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.value = value;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendWorld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(StringWrapper s)&lt;/span&gt;{\n    s.value = s.value +&lt;span class=&quot;hljs-string&quot;&gt;&quot; World&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringWrapper&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    appendWorld(s);\n    System.out.println(s.value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit: i believe this is also the reason to use StringBuffer when it comes to &quot;adding&quot; two Strings because you can modifie the original object which u can&apos;t with immutable objects like String is.&lt;/p&gt;\n    ","\n&lt;p&gt;No, it&apos;s not pass by reference.&lt;/p&gt;\n\n&lt;p&gt;Java is pass by value according to the Java Language Specification:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the actual argument expressions initialize newly created parameter variables&lt;/strong&gt;, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.1&quot; rel=&quot;noreferrer&quot;&gt;formal parameter&lt;/a&gt;. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference&lt;/p&gt;\n\n&lt;p&gt;/**&lt;/p&gt;\n\n&lt;p&gt;Pass By Value&lt;/p&gt;\n\n&lt;p&gt;In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueString&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueString&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;valueflag&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(value, valueflag);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;value&apos; and &apos;valueflag&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value : &quot;&lt;/span&gt; + value);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueflag : &quot;&lt;/span&gt; + valueflag);\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; valueflag)&lt;/span&gt; {\n        value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;;\n        valueflag = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nvalue : Nikhil\nvalueflag : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**\n * \n * Pass By Value\n *\n */&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueNewString&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueNewString&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;valueflag&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(value, valueflag);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;value&apos; and &apos;valueflag&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value : &quot;&lt;/span&gt; + value);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueflag : &quot;&lt;/span&gt; + valueflag);\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; valueflag)&lt;/span&gt; {\n        value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;;\n        valueflag = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nvalue : Nikhil\nvalueflag : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**\n  This &apos;Pass By Value has a feeling of &apos;Pass By Reference&apos;&lt;/p&gt;\n\n&lt;p&gt;Some people say primitive types and &apos;String&apos; are &apos;pass by value&apos;\n  and objects are &apos;pass by reference&apos;.&lt;/p&gt;\n\n&lt;p&gt;But from this example, we can understand that it is infact pass by value only,\n  keeping in mind that here we are passing the reference as the value.\n  ie: reference is passed by value.\n  That&apos;s why are able to change and still it holds true after the local scope.\n  But we cannot change the actual reference outside the original scope.\n  what that means is demonstrated by next example of PassByValueObjectCase2.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase1&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n        String name;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id, String name)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        }\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Student [id=&quot;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, name=&quot;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase1&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(student);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;student&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;student : &quot;&lt;/span&gt; + student);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Student student)&lt;/span&gt; {\n        student.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nstudent : Student [id=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, name=Anand]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;/**&lt;/p&gt;\n\n&lt;p&gt;In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope.&quot;&lt;/p&gt;\n\n&lt;p&gt;Note: I am not pasting the code for &lt;code&gt;private class Student&lt;/code&gt;. The class definition for &lt;code&gt;Student&lt;/code&gt; is same as Example3.&lt;/p&gt;\n\n&lt;p&gt;*/&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase2&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByValueObjectCase2&lt;/span&gt;().caller();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// student has the actual reference to a Student object created&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// can we change this actual reference outside the local scope? Let&apos;s see&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nikhil&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; method(student);\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         * &apos;output&apos; is insignificant in this example. we are more interested in\n         * &apos;student&apos;\n         */&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;output : &quot;&lt;/span&gt; + output);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;student : &quot;&lt;/span&gt; + student); &lt;span class=&quot;hljs-comment&quot;&gt;// Will it print Nikhil or Anand?&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Student student)&lt;/span&gt; {\n        student = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Anand&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;output : output\nstudent : Student [id=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, name=Nikhil]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I thought I&apos;d contribute this answer to add more details from the Specifications.&lt;/p&gt;\n&lt;p&gt;First, &lt;a href=&quot;https://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value&quot;&gt;What&apos;s the difference between passing by reference vs. passing by value?&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Passing by reference means the called functions&apos; parameter will be the\nsame as the callers&apos; passed argument (not the value, but the identity&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the variable itself).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Pass by value means the called functions&apos; parameter will be a copy of\nthe callers&apos; passed argument.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Or from wikipedia, &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_by_reference#Call_by_reference&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the subject of pass-by-reference&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In call-by-reference evaluation (also referred to as\npass-by-reference), a function receives an implicit reference to a\nvariable used as argument, rather than a copy of its value. This\ntypically means that the function can modify (i.e. assign to) the\nvariable used as argumentsomething that will be seen by its caller.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_by_value#Call_by_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the subject of pass-by-value&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In call-by-value, the argument expression is evaluated, and the\nresulting value is bound to the corresponding variable in the function [...].\nIf the function or procedure is able to assign values to its\nparameters, only its local copy is assigned [...].&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Second, we need to know what Java uses in its method invocations. The &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Language Specification&lt;/a&gt; states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;When the method or constructor is invoked (§15.12), &lt;strong&gt;the values of the\nactual argument expressions initialize newly created parameter\nvariables&lt;/strong&gt;, each of the declared type, before execution of the body of\nthe method or constructor.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So it assigns (or binds) the value of the argument to the corresponding parameter variable.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;What is the value of the argument?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s consider reference types, the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Virtual Machine Specification&lt;/a&gt; states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There are three kinds of &lt;strong&gt;reference types&lt;/strong&gt;: class types, array types,\nand interface types. &lt;strong&gt;Their values are references to dynamically\ncreated class instances, arrays, or class instances or arrays that\nimplement interfaces, respectively.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Language Specification&lt;/a&gt; also states&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;The reference values (often just references) are pointers to these objects&lt;/strong&gt;, and a special null reference, which refers to no object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (&lt;code&gt;new ...&lt;/code&gt;) all resolve to a reference type value.&lt;/p&gt;\n&lt;p&gt;So&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String param)&lt;/span&gt; {}\n...\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ref&quot;&lt;/span&gt;);\nmethod(variable);\nmethod(variable.toString());\nmethod(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ref&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;all bind the value of a reference to a &lt;code&gt;String&lt;/code&gt; instance to the method&apos;s newly created parameter, &lt;code&gt;param&lt;/code&gt;. This is exactly what the definition of pass-by-value describes. As such, &lt;strong&gt;Java is pass-by-value&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation.&lt;/strong&gt; The definition of pass-by-reference was&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This typically means that the function can modify (i.e. assign to) the\nvariable used as argumentsomething that will be seen by its caller.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. &lt;strong&gt;Modifying the object referenced by the variable is a different concept entirely.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Primitive values are also defined in the Java Virtual Machine Specification, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.3&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).&lt;/p&gt;\n    ","\n&lt;p&gt;You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; arg1, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; arg2)&lt;/span&gt; {\n    arg1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    arg2 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y;\n    getValues(x, y);\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &quot;&lt;/span&gt; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sometimes you want to use the same pattern in Java, but you can&apos;t; at least not directly. Instead you could do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arg1, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arg2)&lt;/span&gt; {\n    arg1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    arg2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] x = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] y = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    getValues(x, y);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &quot;&lt;/span&gt; + x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + y[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As was explained in previous answers, in Java you&apos;re passing a pointer to the array as a value into &lt;code&gt;getValues&lt;/code&gt;. That is enough, because the method then modifies the array element, and by convention you&apos;re expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn&apos;t necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.&lt;/p&gt;\n    ","\n&lt;p&gt;The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.&lt;/p&gt;\n    ","\n&lt;p&gt;As many people mentioned it before, &lt;a href=&quot;http://academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/JavaPassByValue.htm&quot; rel=&quot;noreferrer&quot;&gt;Java is always pass-by-value&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is another example that will help you understand the difference (&lt;a href=&quot;http://www.javaranch.com/campfire/StoryPassBy.jsp&quot; rel=&quot;noreferrer&quot;&gt;the classic swap example&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Before: a = &quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, b = &quot;&lt;/span&gt; + b);\n    swap(a,b);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After: a = &quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, b = &quot;&lt;/span&gt; + b);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer iA, Integer iB)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iA;\n    iA = iB;\n    iB = tmp;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Prints:  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Before: a = 2, b = 3&lt;br&gt;\n  After: a = 2, b = 3&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.&lt;/p&gt;\n    ","\n&lt;p&gt;I always think of it as &quot;pass by copy&quot;. It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PassByCopy&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Dog d)&lt;/span&gt;{\n        d.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Fido&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Maxx&quot;&lt;/span&gt;);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name= &quot;&lt;/span&gt;+ d.name);\n        changeName(d);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name= &quot;&lt;/span&gt;+ d.name);\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String name;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = s;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output of java PassByCopy:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;name= Maxx&lt;br&gt;\n  name= Fido&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.&lt;/p&gt;\n    ","\n&lt;p&gt;Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-referenceall arguments are passed by value. A method call can pass two types of values to a methodcopies of primitive values (e.g., values of int and double) and copies of references to objects.&lt;/p&gt;\n\n&lt;p&gt;When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.&lt;/p&gt;\n\n&lt;p&gt;When it comes to objects, objects themselves cannot be passed to methods. So we pass the reference(address) of the object. We can manipulate the original object using this reference.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How Java creates and stores objects:&lt;/strong&gt; When we create an object we store the objects address in a reference variable. Let&apos;s analyze the following statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;account1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Account&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Account account1 is the type and name of the reference variable, = is the assignment operator, new asks for the required amount of space from the system. The constructor to the right of keyword new which creates the object is called implicitly by the keyword new. Address of the created object(result of right value, which is an expression called &quot;class instance creation expression&quot;) is assigned to the left value (which is a reference variable with a name and a type specified) using the assign operator.&lt;/p&gt;\n\n&lt;p&gt;Although an objects reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the objects reference. Since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory.&lt;/p&gt;\n\n&lt;p&gt;Passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. Because everything in Java is passed by value, if array objects were passed,\na copy of each element would be passed. For large arrays, this would waste time and consume\nconsiderable storage for the copies of the elements.&lt;/p&gt;\n\n&lt;p&gt;In the image below you can see we have two reference variables(These are called pointers in C/C++, and I think that term makes it easier to understand this feature.) in the main method. Primitive and reference variables are kept in stack memory(left side in images below). array1 and array2 reference variables &quot;point&quot; (as C/C++ programmers call it) or reference to a and b arrays respectively, which are objects (values these reference variables hold are addresses of objects) in heap memory (right side in images below).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/sF7QZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/sF7QZ.png&quot; alt=&quot;Pass by value example 1&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If we pass the value of array1 reference variable as an argument to the reverseArray method, a reference variable is created in the method and that reference variable starts pointing to the same array (a). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reverseArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1 = { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; };\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n\n        reverseArray(array1);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/W1wgZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/W1wgZ.png&quot; alt=&quot;Pass by value example 2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, if we say &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;array1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in reverseArray method, it will make a change in array a.&lt;/p&gt;\n\n&lt;p&gt;We have another reference variable in reverseArray method (array2) that points to an array c. If we were to say &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;array1 = array2;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in reverseArray method, then the reference variable array1 in method reverseArray would stop pointing to array a and start pointing to array c (Dotted line in second image).&lt;/p&gt;\n\n&lt;p&gt;If we return value of reference variable array2 as the return value of method reverseArray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c.&lt;/p&gt;\n\n&lt;p&gt;So let&apos;s write all the things we have done at once now.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] reverseArray(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n\n        array1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// array a becomes 5, 10, -7&lt;/span&gt;\n\n        array1 = array2; &lt;span class=&quot;hljs-comment&quot;&gt;/* array1 of reverseArray starts\n          pointing to c instead of a (not shown in image below) */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array2;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array1 = { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; };\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array2 = { &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n\n        array1 = reverseArray(array1); &lt;span class=&quot;hljs-comment&quot;&gt;/* array1 of \n         main starts pointing to c instead of a */&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5hRyX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5hRyX.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And now that reverseArray method is over, its reference variables(array1 and array2) are gone. Which means we now only have the two reference variables in main method array1 and array2 which point to c and b arrays respectively. No reference variable is pointing to object (array) a. So it is eligible for garbage collection.&lt;/p&gt;\n\n&lt;p&gt;You could also assign value of array2 in main to array1. array1 would start pointing to b.&lt;/p&gt;\n    ","\n&lt;p&gt;Java has only pass by value. A very simple example to validate this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    init(obj);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//After calling init method, obj still points to null&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//this is because obj is passed as value and not as reference.&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MyClass objVar)&lt;/span&gt; {\n    objVar = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To make a long story short, &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt; objects have some very peculiar properties.&lt;/p&gt;\n\n&lt;p&gt;In general, Java has primitive types (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc) that are passed directly by value. Then Java has objects (everything that derives from &lt;code&gt;java.lang.Object&lt;/code&gt;). Objects are actually always handled through a reference (a reference being a pointer that you can&apos;t touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value.&lt;/p&gt;\n\n&lt;p&gt;Does this sound strange and confusing? Let&apos;s consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. &lt;code&gt;void foo(int x)&lt;/code&gt; passes an int by value. &lt;code&gt;void foo(int *x)&lt;/code&gt; is a function that does not want an &lt;code&gt;int a&lt;/code&gt;, but a pointer to an int: &lt;code&gt;foo(&amp;amp;a)&lt;/code&gt;. One would use this with the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to pass a variable address.&lt;/p&gt;\n\n&lt;p&gt;Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: &lt;code&gt;void foo(int &amp;amp;x)&lt;/code&gt; is called by &lt;code&gt;foo(a)&lt;/code&gt;, where the compiler itself knows that it is a reference and the address of the non-reference &lt;code&gt;a&lt;/code&gt; should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.&lt;/p&gt;\n    ","\n&lt;p&gt;I have created a thread devoted to these kind of questions for &lt;em&gt;any&lt;/em&gt; programming languages &lt;a href=&quot;https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value#2028&quot;&gt;Java is also mentioned&lt;/a&gt;. Here is the short summary:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Java passes it parameters by value&lt;/li&gt;\n&lt;li&gt;&quot;by value&quot; is the only way in java to pass a parameter to a method&lt;/li&gt;\n&lt;li&gt;using methods from the object given as parameter will alter the\nobject as the references point to\nthe original objects. (if that\nmethod itself alters some values)&lt;/li&gt;\n&lt;/ul&gt;\n    "],"id":26,"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","content":"\n                \n&lt;p&gt;I always thought Java uses &lt;strong&gt;pass-by-reference&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;However, I&apos;ve seen &lt;a href=&quot;http://javadude.com/articles/passbyvalue.htm&quot; rel=&quot;noreferrer&quot;&gt;a blog post&lt;/a&gt; that claims that Java uses &lt;strong&gt;pass-by-value&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;I don&apos;t think I understand the distinction they&apos;re making.&lt;/p&gt;\n&lt;p&gt;What is the explanation?&lt;/p&gt;\n    ","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828","postType":"QUESTION","createdAt":"2022-07-09T16:31:59.000Z","updatedAt":"2022-07-09T16:31:59.000Z","tags":[{"id":83,"name":"methods","slug":"methods","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":83}},{"id":84,"name":"parameter-passing","slug":"parameter-passing","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":84}},{"id":85,"name":"pass-by-reference","slug":"pass-by-reference","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":85}},{"id":86,"name":"pass-by-value","slug":"pass-by-value","createdAt":"2022-07-09T16:32:00.000Z","updatedAt":"2022-07-09T16:32:00.000Z","Questions_Tags":{"questionId":26,"tagId":86}}],"relatedQuestions":[{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828","tags":[{"name":"methods","Questions_Tags":{"questionId":26,"tagId":83}},{"name":"parameter-passing","Questions_Tags":{"questionId":26,"tagId":84}},{"name":"pass-by-reference","Questions_Tags":{"questionId":26,"tagId":85}},{"name":"pass-by-value","Questions_Tags":{"questionId":26,"tagId":86}}]}]},"randomQuestions":[{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"How do I split a list into equally-sized chunks?","slug":"how-do-i-split-a-list-into-equally-sized-chunks-1657384580399"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"In CSS Flexbox, why are there no \"justify-items\" and \"justify-self\" properties?","slug":"in-css-flexbox-why-are-there-no-\"justify-items\"-and-\"justify-self\"-properties-1657384782711"},{"title":"Is an array name a pointer?","slug":"is-an-array-name-a-pointer-1657387874827"},{"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"How can I upload files asynchronously with jQuery?","slug":"how-can-i-upload-files-asynchronously-with-jquery-1657384815389"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Make container shrink-to-fit child elements as they wrap","slug":"make-container-shrink-to-fit-child-elements-as-they-wrap-1657388134549"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Dynamic tabs with user-click chosen components","slug":"dynamic-tabs-with-user-click-chosen-components-1657388465232"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"Convert Rows to columns using 'Pivot' in SQL Server","slug":"convert-rows-to-columns-using-'pivot'-in-sql-server-1657388372528"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"How do I install pip on Windows?","slug":"how-do-i-install-pip-on-windows-1657388147761"}]},"__N_SSG":true}