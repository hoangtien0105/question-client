{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can pass callback, and call callback inside async call&lt;/p&gt;\n\n&lt;p&gt;something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;completionHandler&lt;/span&gt;: (&lt;span class=&quot;hljs-title class_&quot;&gt;genres&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTaskWithURL(url) {\n        data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n        resultsArray &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; results\n        completionHandler(genres: resultsArray)\n    }\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    task.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then call this method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres {\n        genres &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;View Controller: &lt;span class=&quot;hljs-subst&quot;&gt;\\(genres)&lt;/span&gt;&quot;&lt;/span&gt;)     \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Introduced in Swift 5.5 (iOS 15, macOS 12), we would now use the &lt;code&gt;async&lt;/code&gt;-&lt;code&gt;await&lt;/code&gt; pattern:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchGenres&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;] {\n    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; (data, &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(for: request)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode([&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;].&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: data)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And we would call it like:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetchGenres()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;async&lt;/code&gt;-&lt;code&gt;await&lt;/code&gt; syntax is far more concise and natural than the traditional completion handler pattern outlined in my original answer, below.&lt;/p&gt;\n&lt;p&gt;For more information, see &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2021/10132/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Meet async/await in Swift&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The historic pattern is to use completion handlers closure.&lt;/p&gt;\n&lt;p&gt;For example, we would often use &lt;code&gt;Result&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchGenres&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: request) { data, &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt;, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n            &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                completion(.failure(error))\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// parse response here&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n            completion(.success(results))\n        }\n    }.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And youd call it like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;fetchGenres { results &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; results {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .failure(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.localizedDescription)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .success(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres):\n        &lt;span class=&quot;hljs-comment&quot;&gt;// use `genres` here, e.g. update model and UI            &lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// but dont try to use `genres` here, as the above runs asynchronously&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note, above Im dispatching the completion handler back to the main queue to simplify model and UI updates. Some developers take exception to this practice and either use whatever queue &lt;code&gt;URLSession&lt;/code&gt; used or use their own queue (requiring the caller to manually synchronize the results themselves).&lt;/p&gt;\n&lt;p&gt;But thats not material here. The key issue is the use of completion handler to specify the block of code to be run when the asynchronous request is done.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Note, above I retired the use of &lt;code&gt;NSArray&lt;/code&gt; (we dont use &lt;a href=&quot;https://developer.apple.com/documentation/foundation/object_runtime/classes_bridged_to_swift_standard_library_value_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;those bridged Objective-C types&lt;/a&gt; any more). I assume that we had a &lt;code&gt;Genre&lt;/code&gt; type and we presumably used &lt;code&gt;JSONDecoder&lt;/code&gt;, rather than &lt;code&gt;JSONSerialization&lt;/code&gt;, to decode it. But this question didnt have enough information about the underlying JSON to get into the details here, so I omitted that to avoid clouding the core issue, the use of closures as completion handlers.&lt;/p&gt;\n    ","\n&lt;p&gt;Swiftz already offers Future, which is the basic building block of a Promise. A Future is a Promise that cannot fail (all terms here are based on the Scala interpretation, &lt;a href=&quot;https://stackoverflow.com/questions/22724883/js-deferred-promise-future-compared-to-functional-languages-like-scala?rq=1&quot;&gt;where a Promise is a Monad&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/maxpow4h/swiftz/blob/master/swiftz/Future.swift&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/maxpow4h/swiftz/blob/master/swiftz/Future.swift&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hopefully will expand to a full Scala-style Promise eventually (I may write it myself at some point; I&apos;m sure other PRs would be welcome; it&apos;s not that difficult with Future already in place).&lt;/p&gt;\n\n&lt;p&gt;In your particular case, I would probably create a &lt;code&gt;Result&amp;lt;[Book]&amp;gt;&lt;/code&gt; (based on &lt;a href=&quot;http://nomothetis.svbtle.com/error-handling-in-swift-part-ii&quot; rel=&quot;noreferrer&quot;&gt;Alexandros Salazar&apos;s version of &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;). Then your method signature would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;fetchGenres&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Result&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-title class_&quot;&gt;Book&lt;/span&gt;]&amp;gt;&amp;gt; {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I do not recommend prefixing functions with &lt;code&gt;get&lt;/code&gt; in Swift. It will break certain kinds of interoperability with ObjC.&lt;/li&gt;\n&lt;li&gt;I recommend parsing all the way down to a &lt;code&gt;Book&lt;/code&gt; object before returning your results as a &lt;code&gt;Future&lt;/code&gt;. There are several ways this system can fail, and it&apos;s much more convenient if you check for all of those things before wrapping them up into a &lt;code&gt;Future&lt;/code&gt;. Getting to &lt;code&gt;[Book]&lt;/code&gt; is much better for the rest of your Swift code than handing around an &lt;code&gt;NSArray&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Swift 4.0&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For async Request-Response you can use completion handler. See below I have modified the solution with completion handle paradigm. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: url) { (data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data, options: &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ReadingOptions&lt;/span&gt;.mutableContainers) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSDictionary&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsonResult[&lt;span class=&quot;hljs-string&quot;&gt;&quot;genres&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(results)\n                    completion(results)\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;//Catch Error here...&lt;/span&gt;\n            }\n        }\n        task.resume()\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can call this function as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;getGenres { (array) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do operation with array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Swift 3 version of @Alexey Globchastyy&apos;s answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;completionHandler&lt;/span&gt;: @&lt;span class=&quot;hljs-title class_&quot;&gt;escaping&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;genres&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n&lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with:url) {\n    data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    resultsArray &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; results\n    completionHandler(genres: resultsArray)\n}\n&lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\ntask.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Swift 5.5, async/wait-based solution&lt;/p&gt;\n&lt;p&gt;The original test URL provided by the original poster is no longer functional, so I had to change things a bit.  This solution is based on a jokes API I found.  That API returns a single joke, but I return it as an array of String (&lt;code&gt;[String]&lt;/code&gt;), to keep it as consistent as possible with the original post.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bookshop&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;() &lt;span class=&quot;hljs-title class_&quot;&gt;async&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;] {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello inside getGenres&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://geek-jokes.sameerkumar.website/api?format=json&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Continuation&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CheckedContinuation&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;Never&lt;/span&gt;&amp;gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; withCheckedContinuation { (continuation: &lt;span class=&quot;hljs-type&quot;&gt;Continuation&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: url) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task completed&quot;&lt;/span&gt;)\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; []\n                &lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; {\n                    continuation.resume(returning: result)\n                }\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.localizedDescription)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data, options: [.mutableContainers])\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jsonResult is &lt;span class=&quot;hljs-subst&quot;&gt;\\(jsonResult)&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; joke &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (jsonResult &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; [String: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;])&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;joke&quot;&lt;/span&gt;] {\n                        result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [joke]\n                    }\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JSON Error &lt;span class=&quot;hljs-subst&quot;&gt;\\(error.localizedDescription)&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data was &lt;span class=&quot;hljs-subst&quot;&gt;\\(String(describing: String(data: data, encoding: .utf8)))&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n            }\n            task.resume()\n        }\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; genres\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Final is &lt;span class=&quot;hljs-subst&quot;&gt;\\(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;withCheckedContinuation&lt;/code&gt; is how you made the Swift &lt;code&gt;async&lt;/code&gt; function actually run in a separate task/thread.&lt;/p&gt;\n    ","\n&lt;p&gt;I hope you&apos;re not still stuck on this, but the short answer is that you can&apos;t do this in Swift.&lt;/p&gt;\n\n&lt;p&gt;An alternative approach would be to return a callback that will provide the data you need as soon as it is ready.&lt;/p&gt;\n    ","\n&lt;p&gt;There are 3 ways of creating call back functions namely:\n1. Completion handler\n2. Notification\n3. Delegates&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Completion Handler&lt;/strong&gt;\nInside set of block is executed and returned when source is available, Handler will wait until response comes so that UI can be updated after.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Notification&lt;/strong&gt;\nBunch of information is triggered over all the app, Listner can retrieve n make use of that info. Async way of getting info through out the project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Delegates&lt;/strong&gt;\nSet of methods will get triggered when delegate is been called, Source must be provided via methods itself&lt;/p&gt;\n    ","\n&lt;p&gt;Swift 5.5:&lt;/p&gt;\n&lt;p&gt;TL;DR: Swift 5.5 is not yet released(at the time of writing). To use swift 5.5, download swift toolchain development snapshot from &lt;a href=&quot;https://swift.org/download/#snapshots&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; and add compiler flag &lt;code&gt;-Xfrontend -enable-experimental-concurrency&lt;/code&gt;. Read more &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This can be achieved easily with &lt;code&gt;async/await&lt;/code&gt; feature.&lt;/p&gt;\n&lt;p&gt;To do so, you should mark your function as &lt;code&gt;async&lt;/code&gt; then do the operation inside &lt;code&gt;withUnsafeThrowingContinuation&lt;/code&gt; block like following.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bookshop&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;() &lt;span class=&quot;hljs-title class_&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello inside getGenres&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; withUnsafeThrowingContinuation { continuation &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: url, completionHandler: {data, response, error -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task completed&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(error &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.localizedDescription)\n          continuation.resume(throwing: error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, options: .mutableContainers) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; [String: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]\n          &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results: &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsonResult&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;genres&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;\n          continuation.resume(returning: results)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n          continuation.resume(throwing: error)\n        }\n      })\n      task.resume()\n    }\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can call this function like&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@asyncHandler&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;() {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &lt;span class=&quot;hljs-subst&quot;&gt;\\(genres)&lt;/span&gt;&quot;&lt;/span&gt;)\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: &lt;span class=&quot;hljs-subst&quot;&gt;\\(error)&lt;/span&gt;&quot;&lt;/span&gt;)\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep in mind that, when calling &lt;code&gt;Bookshop.getGenres&lt;/code&gt; method, the caller method should be either &lt;code&gt;async&lt;/code&gt; or marked as &lt;code&gt;@asyncHandler&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.urlSession.dataTask(with: request, completionHandler: { (data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.endNetworkActivity()\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; responseError: &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error\n            &lt;span class=&quot;hljs-comment&quot;&gt;// handle http response status&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; httpResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt; {\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; httpResponse.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;299&lt;/span&gt; , httpResponse.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;422&lt;/span&gt;  {\n                    responseError &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;.errorForHTTPStatus(httpResponse.statusCode)\n                }\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; apiResponse: &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError {\n                apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, responseError&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.logError(apiResponse.error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, request: request)\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Handle if access token is invalid&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nsError: &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;? , nsError.code &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;401&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                        apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message()\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Unautorized access&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// User logout&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                    }\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nsError: &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;? , nsError.code &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;503&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                        apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message()\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Down time&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Server is currently down due to some maintenance&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                    }\n                }\n\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.logResponse(data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, forRequest: request)\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.removeRequestedURL(request.url&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n\n            &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async(execute: { () -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                completionHandler(apiResponse)\n            })\n        }).resume()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;There are mainly 3 ways of achieving callback in swift&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Closures/Completion handler&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Delegates&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Notifications&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Observers can also be used to get notified once the async task has been completed.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some very generic requirements that would like every good API Manager to satisfy:\nwill implement a &lt;strong&gt;protocol-oriented API Client.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;APIClient Initial Interface&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIClient&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;,\n              &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;?, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Encodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIResponse&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now Please check complete api structure &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ******* This is API Call Class  *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ResultCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Value&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Implementation of a generic-based  API client&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIClient&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; baseEndpointUrl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: &lt;span class=&quot;hljs-string&quot;&gt;&quot;irl&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;(configuration: .default)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {\n\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Sends a request to servers, calling the completion method when finished&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ResultCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;&amp;gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; endpoint &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.endpoint(for: request)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: endpoint)) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Decode the top level response, and look up the decoded response to see&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// if it&apos;s a success or a failure&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode(&lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: data)\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; dataContainer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.data {\n                        completion(.success(dataContainer))\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message {\n                        completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.server(message: message)))\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                        completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.decoding))\n                    }\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                    completion(.failure(error))\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Encodes a URL based on the given request&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Everything needed for a public request to api servers is encoded directly in this URL&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;endpoint&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; baseUrl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: request.resourceName, relativeTo: baseEndpointUrl) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bad resourceName: &lt;span class=&quot;hljs-subst&quot;&gt;\\(request.resourceName)&lt;/span&gt;&quot;&lt;/span&gt;)\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; components &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLComponents&lt;/span&gt;(url: baseUrl, resolvingAgainstBaseURL: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Common query items needed for all api requests&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; timestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;\\(Date().timeIntervalSince1970)&lt;/span&gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; hash &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;\\(timestamp)&lt;/span&gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; commonQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ts&quot;&lt;/span&gt;, value: timestamp),\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hash&quot;&lt;/span&gt;, value: hash),\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;apikey&quot;&lt;/span&gt;, value: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        ]\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Custom query items needed for this specific request&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; customQueryItems: [&lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;]\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n            customQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItemEncoder&lt;/span&gt;.encode(request)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrong parameters: &lt;span class=&quot;hljs-subst&quot;&gt;\\(error)&lt;/span&gt;&quot;&lt;/span&gt;)\n        }\n\n        components.queryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; commonQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; customQueryItems\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Construct the final URL with all the previous data&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; components.url&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ******  API Request Encodable Protocol *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Encodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Response (will be wrapped with a DataContainer)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Decodable&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Endpoint for this request (the last part of the URL)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** This Results type  Data Container Struct ******&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Results&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt;&amp;gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; offset: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; limit: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; total: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; count: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results: &lt;span class=&quot;hljs-type&quot;&gt;Results&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** API Errro Enum ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; encoding\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; decoding\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; server(message: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** API Response Struct ******&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIResponse&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Response&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt;&amp;gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Whether it was ok or not&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; status: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Message that usually gives more information about some error&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Requested data&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data: &lt;span class=&quot;hljs-type&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;?\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** URL Query Encoder OR JSON Encoder *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URLQueryItemEncoder&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;encode&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Encodable&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;encodable&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;] {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; parametersData &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONEncoder&lt;/span&gt;().encode(encodable)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode([String: &lt;span class=&quot;hljs-type&quot;&gt;HTTPParam&lt;/span&gt;].&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: parametersData)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parameters.map { &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;, value: &lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;.description) }\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** HTTP Pamater Conversion Enum *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HTTPParam&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;CustomStringConvertible&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; string(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; bool(&lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; int(&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; double(&lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;decoder&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Decoder&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; container &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; decoder.singleValueContainer()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .string(string)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bool &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .bool(bool)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; int &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .int(int)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; double &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .double(double)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.decoding\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; description: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .string(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .bool(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bool):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: bool)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .int(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; int):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: int)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .double(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; double):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: double)\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// **** This is your API Request Endpoint  Method in Struct *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GetCharacters&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;MyCharacter&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;characters&quot;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Parameters&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameStartsWith: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; limit: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; offset: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note that nil parameters will not be used&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;nameStartsWith&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;offset&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; name\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.nameStartsWith &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameStartsWith\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.limit &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; limit\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; offset\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// *** This is Model for Above Api endpoint method ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCharacter&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; id: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; description: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** These below line you used to call any api call in your controller or view model ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiClient &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;APIClient&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A simple request with no parameters&lt;/span&gt;\n    apiClient.send(&lt;span class=&quot;hljs-type&quot;&gt;GetCharacters&lt;/span&gt;()) { response &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n\n        response.map { dataContainer &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dataContainer.results)\n        }\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a small use case that might be helpful:- &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testUrlSession&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;urlStr&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completionHandler&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; ((&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlStr)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: url){(data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; strContent &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(data: data, encoding: .utf8) {\n            completionHandler(strContent)\n            }\n        }\n\n\n        task.resume()\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While calling the function:-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;testUrlSession(urlStr: &lt;span class=&quot;hljs-string&quot;&gt;&quot;YOUR-URL&quot;&lt;/span&gt;) { (value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Your string value ::- &lt;span class=&quot;hljs-subst&quot;&gt;\\(value)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":270,"title":"Returning data from async call in Swift function","content":"\n                \n&lt;p&gt;I have created a utility class in my Swift project that handles all the REST requests and responses. I have built a simple REST API so I can test my code. I have created a class method that needs to return an NSArray but because the API call is async I need to return from the method inside the async call. The problem is the async returns void.\nIf I were doing this in Node I would use JS promises but I can&apos;t figure out a solution that works in Swift.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Foundation\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bookshop&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt; {\n        println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello inside getGenres&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list&quot;&lt;/span&gt;\n        println(urlPath)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url: &lt;span class=&quot;hljs-type&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSURL&lt;/span&gt;(string: urlPath)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSURLSession&lt;/span&gt;.sharedSession()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultsArray:&lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;!\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTaskWithURL(url, completionHandler: {data, response, error -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task completed&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(error) {\n                println(error.localizedDescription)\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; err: &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;?\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; options:&lt;span class=&quot;hljs-type&quot;&gt;NSJSONReadingOptions&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSJSONReadingOptions&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;MutableContainers&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSJSONSerialization&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;JSONObjectWithData&lt;/span&gt;(data, options: options, error: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;err) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSDictionary&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(err &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n                println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JSON Error &lt;span class=&quot;hljs-subst&quot;&gt;\\(err&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.localizedDescription)&lt;/span&gt;&quot;&lt;/span&gt;)\n            }\n            &lt;span class=&quot;hljs-comment&quot;&gt;//NSLog(&quot;jsonResults %@&quot;, jsonResult)&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results: &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsonResult[&lt;span class=&quot;hljs-string&quot;&gt;&quot;genres&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jsonResults %@&quot;&lt;/span&gt;, results)\n            resultsArray &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; results\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; resultsArray &lt;span class=&quot;hljs-comment&quot;&gt;// error [anyObject] is not a subType of &apos;Void&apos;&lt;/span&gt;\n        })\n        task.resume()\n        &lt;span class=&quot;hljs-comment&quot;&gt;//return &quot;Hello World!&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// I want to return the NSArray...&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"returning-data-from-async-call-in-swift-function-1657387469218","postType":"QUESTION","createdAt":"2022-07-09T17:24:29.000Z","updatedAt":"2022-07-09T17:24:29.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202"},{"title":"Using global variables in a function","slug":"using-global-variables-in-a-function-1657384796002"},{"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"How do I convert an existing callback API to promises?","slug":"how-do-i-convert-an-existing-callback-api-to-promises-1657384694006"},{"title":"Safely turning a JSON string into an object","slug":"safely-turning-a-json-string-into-an-object-1657388194824"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"Submit same Partial View called multiple times data to controller?","slug":"submit-same-partial-view-called-multiple-times-data-to-controller-1657387887213"},{"title":"What is event bubbling and capturing?","slug":"what-is-event-bubbling-and-capturing-1657388059203"},{"title":"Where should I put <script> tags in HTML markup?","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"Undefined behavior and sequence points","slug":"undefined-behavior-and-sequence-points-1657384639493"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"How do you get the footer to stay at the bottom of a Web page?","slug":"how-do-you-get-the-footer-to-stay-at-the-bottom-of-a-web-page-1657387817544"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"}]},"__N_SSG":true}