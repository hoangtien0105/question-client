{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;ECMAScript 2018 Standard Method&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You would use &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot; rel=&quot;noreferrer&quot;&gt;object spread&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; merged = {...obj1, ...obj2};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;merged&lt;/code&gt; is now the union of &lt;code&gt;obj1&lt;/code&gt; and &lt;code&gt;obj2&lt;/code&gt;. Properties in &lt;code&gt;obj2&lt;/code&gt; will overwrite those in &lt;code&gt;obj1&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/** There&apos;s no limit to the number of objects you can merge.\n *  Later properties overwrite earlier properties with the same name. */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; allRules = {...obj1, ...obj2, ...obj3};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;MDN documentation&lt;/a&gt; for this syntax. If you&apos;re using babel you&apos;ll need the &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread.html&quot; rel=&quot;noreferrer&quot;&gt;babel-plugin-transform-object-rest-spread&lt;/a&gt; plugin for it to work.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ECMAScript 2015 (ES6) Standard Method&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* For the case in question, you would do: */&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(obj1, obj2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** There&apos;s no limit to the number of objects you can merge.\n *  All objects get merged into the first object. \n *  Only the object in the first argument is mutated and returned.\n *  Later properties overwrite earlier properties with the same name. */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; allRules = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj1, obj2, obj3, etc);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;MDN JavaScript Reference&lt;/a&gt;)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method for ES5 and Earlier&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attrname &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj2) { obj1[attrname] = obj2[attrname]; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that this will simply add all attributes of &lt;code&gt;obj2&lt;/code&gt; to &lt;code&gt;obj1&lt;/code&gt; which might not be what you want if you still want to use the unmodified &lt;code&gt;obj1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If you&apos;re using a framework that craps all over your prototypes then you have to get fancier with checks like &lt;code&gt;hasOwnProperty&lt;/code&gt;, but that code will work for 99% of cases.&lt;/p&gt;\n&lt;p&gt;Example function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Overwrites obj1&apos;s values with obj2&apos;s and adds obj2&apos;s if non existent in obj1\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj1&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj2&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; obj3 a new object based on obj1 and obj2\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;merge_options&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1,obj2&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj3 = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attrname &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj1) { obj3[attrname] = obj1[attrname]; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attrname &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj2) { obj3[attrname] = obj2[attrname]; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj3;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;jQuery also has a utility for this: &lt;a href=&quot;http://api.jquery.com/jQuery.extend/&quot; rel=&quot;noreferrer&quot;&gt;http://api.jquery.com/jQuery.extend/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Taken from the jQuery documentation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge options object into settings object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; settings = { &lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; options  = { &lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; };\njQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(settings, options);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now the content of settings object is the following:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { validate: true, limit: 5, name: &quot;bar&quot; }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above code will mutate the &lt;strong&gt;existing object&lt;/strong&gt; named &lt;em&gt;&lt;code&gt;settings&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you want to create a &lt;strong&gt;new object&lt;/strong&gt; without modifying either argument, use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defaults = { &lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; options = { &lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Merge defaults and options, without modifying defaults */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; settings = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({}, defaults, options);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The content of settings variable is now the following:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// {validate: true, limit: 5, name: &quot;bar&quot;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The &apos;defaults&apos; and &apos;options&apos; variables remained the same.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-object.assign&quot; rel=&quot;noreferrer&quot;&gt;Harmony ECMAScript 2015 (ES6)&lt;/a&gt; specifies &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; which will do this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(obj1, obj2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Current browser support is &lt;a href=&quot;http://kangax.github.io/compat-table/es6/#test-Object_static_methods_Object.assign&quot; rel=&quot;noreferrer&quot;&gt;getting better&lt;/a&gt;, but if you&apos;re developing for browsers that don&apos;t have support, you can use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill&quot; rel=&quot;noreferrer&quot;&gt;polyfill&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I googled for code to merge object properties and ended up here. However since there wasn&apos;t any code for recursive merge I wrote it myself. (Maybe jQuery extend is recursive BTW?) Anyhow, hopefully someone else will find it useful as well.&lt;/p&gt;\n\n&lt;p&gt;(Now the code does not use &lt;code&gt;Object.prototype&lt;/code&gt; :)&lt;/p&gt;\n\n&lt;h2&gt;Code&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n* Recursively merge properties of two objects \n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MergeRecursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj2) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Property in destination object set; update its value.&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( obj2[p].&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;==&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; ) {\n        obj1[p] = &lt;span class=&quot;hljs-title class_&quot;&gt;MergeRecursive&lt;/span&gt;(obj1[p], obj2[p]);\n\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        obj1[p] = obj2[p];\n\n      }\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Property in destination object not set; create it and set its value.&lt;/span&gt;\n      obj1[p] = obj2[p];\n\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;An example&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;o1 = {  a : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        b : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        c : {\n          ca : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n          cb : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n          cc : {\n            cca : &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,\n            ccb : &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; } } };\n\no2 = {  a : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n        c : {\n          ca : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n          cb : &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, \n          cc : {\n            cca : &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,\n            ccb : &lt;span class=&quot;hljs-number&quot;&gt;202&lt;/span&gt; } } };\n\no3 = &lt;span class=&quot;hljs-title class_&quot;&gt;MergeRecursive&lt;/span&gt;(o1, o2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Produces object o3 like&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;o3 = {  a : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n        b : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        c : {\n          ca : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n          cb : &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,\n          cc : { \n            cca : &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,\n            ccb : &lt;span class=&quot;hljs-number&quot;&gt;202&lt;/span&gt; } } };\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Note that &lt;a href=&quot;http://underscorejs.org/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;underscore.js&lt;/code&gt;&lt;/a&gt;&apos;s &lt;a href=&quot;http://underscorejs.org/#extend&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;extend&lt;/code&gt;-method&lt;/a&gt; does this in a one-liner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({name : &lt;span class=&quot;hljs-string&quot;&gt;&apos;moe&apos;&lt;/span&gt;}, {age : &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;});\n=&amp;gt; {name : &lt;span class=&quot;hljs-string&quot;&gt;&apos;moe&apos;&lt;/span&gt;, age : &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Similar to jQuery extend(), you have the same function in &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot; rel=&quot;noreferrer&quot;&gt;AngularJS&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge the &apos;options&apos; object into the &apos;settings&apos; object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; settings = {&lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; options  = {&lt;span class=&quot;hljs-attr&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;};\nangular.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(settings, options);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I need to merge objects today, and this question (and answers) helped me a lot. I tried some of the answers, but none of them fit my needs, so I combined some of the answers, added something myself and came up with a new merge function. Here it is:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; merge = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {},\n        i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        il = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,\n        key;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; i &amp;lt; il; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key)) {\n                obj[key] = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][key];\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some example usages:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t1 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;key1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;key2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;key3&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t2 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;key1&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;ik1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;ik2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;ik3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t3 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;key2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;key3&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;t1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;t2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;t3&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;a1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;a2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;a4&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;asd&quot;&lt;/span&gt;]\n        }\n    }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(t1, t2));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(t1, t3));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(t2, t3));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(t1, t2, t3));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;({}, t1, { &lt;span class=&quot;hljs-attr&quot;&gt;key1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;object spread syntax&lt;/a&gt; to achieve this. It&apos;s a part of ES2018 and beyond.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj3 = { ...obj1, ...obj2 };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj3);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The given solutions should be modified to check &lt;code&gt;source.hasOwnProperty(property)&lt;/code&gt; in the &lt;code&gt;for..in&lt;/code&gt; loops before assigning - otherwise, you end up copying the properties of the whole prototype chain, which is rarely desired...&lt;/p&gt;\n    ","\n&lt;h1&gt;Merge properties of N objects in one line of code&lt;/h1&gt;\n&lt;p&gt;An &lt;code&gt;Object.assign&lt;/code&gt; method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need. (&lt;code&gt;IE&lt;/code&gt; not supported)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;polyfill&lt;/strong&gt; to support older browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assign&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;assign&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (target === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || target === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cannot convert first argument to object&apos;&lt;/span&gt;);\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; to = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(target);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextSource = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        }\n        nextSource = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(nextSource);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keysArray = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(nextSource);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = keysArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; nextIndex &amp;lt; len; nextIndex++) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextKey = keysArray[nextIndex];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; desc = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(nextSource, nextKey);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (desc !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; desc.&lt;span class=&quot;hljs-property&quot;&gt;enumerable&lt;/span&gt;) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n    }\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following two are probably a good starting point. lodash also has a customizer function for those special needs!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;_.extend&lt;/code&gt; (&lt;a href=&quot;http://underscorejs.org/#extend&quot; rel=&quot;noreferrer&quot;&gt;http://underscorejs.org/#extend&lt;/a&gt;) &lt;br&gt;\n&lt;code&gt;_.merge&lt;/code&gt; (&lt;a href=&quot;https://lodash.com/docs#merge&quot; rel=&quot;noreferrer&quot;&gt;https://lodash.com/docs#merge&lt;/a&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my stab which&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Supports deep merge&lt;/li&gt;\n&lt;li&gt;Does not mutate arguments&lt;/li&gt;\n&lt;li&gt;Takes any number of arguments&lt;/li&gt;\n&lt;li&gt;Does not extend the object prototype&lt;/li&gt;\n&lt;li&gt;Does not depend on another library (&lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/MooTools&quot; rel=&quot;noreferrer&quot;&gt;MooTools&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot; rel=&quot;noreferrer&quot;&gt;Underscore.js&lt;/a&gt;, etc.)&lt;/li&gt;\n&lt;li&gt;Includes check for hasOwnProperty&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Is short :)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    Recursively merge properties and return new object\n    obj1 &amp;amp;lt;- obj2 [ &amp;amp;lt;- ... ]\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dst = {}\n        ,src\n        ,p\n        ,args = [].&lt;span class=&quot;hljs-property&quot;&gt;splice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    ;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        src = args.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; src) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (src.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(p)) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(src[p]) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt;) {\n                        dst[p] = &lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(dst[p] || {}, src[p]);\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                        dst[p] = src[p];\n                    }\n                }\n            }\n        }\n    }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dst;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1a&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p2&quot;&lt;/span&gt;: [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p3&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p5&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p6&quot;&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p61&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p61a&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p62&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p62a&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p63&quot;&lt;/span&gt;: [\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;bb&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;cc&quot;&lt;/span&gt;\n        ],\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p64&quot;&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;p641&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p641a&quot;&lt;/span&gt;\n        }\n    }\n};\n\nb = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p2&quot;&lt;/span&gt;: [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p3&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p4&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p6&quot;&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p61&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p61b&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p64&quot;&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;p642&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p642b&quot;&lt;/span&gt;\n        }\n    }\n};\n\nc = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p1c&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p3&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;p6&quot;&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p62&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p62c&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;p64&quot;&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;p643&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;p641c&quot;&lt;/span&gt;\n        }\n    }\n};\n\nd = &lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(a, b, c);\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    d = {\n        &quot;p1&quot;: &quot;p1c&quot;,\n        &quot;p2&quot;: [\n            &quot;d&quot;,\n            &quot;e&quot;,\n            &quot;f&quot;\n        ],\n        &quot;p3&quot;: null,\n        &quot;p5&quot;: null,\n        &quot;p6&quot;: {\n            &quot;p61&quot;: &quot;p61b&quot;,\n            &quot;p62&quot;: &quot;p62c&quot;,\n            &quot;p63&quot;: [\n                &quot;aa&quot;,\n                &quot;bb&quot;,\n                &quot;cc&quot;\n            ],\n            &quot;p64&quot;: {\n                &quot;p641&quot;: &quot;p641a&quot;,\n                &quot;p642&quot;: &quot;p642b&quot;,\n                &quot;p643&quot;: &quot;p641c&quot;\n            }\n        },\n        &quot;p4&quot;: true\n    };\n*/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just by the way, what you&apos;re all doing is overwriting properties, not merging...&lt;/p&gt;\n\n&lt;p&gt;This is how JavaScript objects area really merged: Only keys in the &lt;code&gt;to&lt;/code&gt; object which are not objects themselves will be overwritten by &lt;code&gt;from&lt;/code&gt;. Everything else will be &lt;strong&gt;&lt;em&gt;really merged&lt;/em&gt;&lt;/strong&gt;. Of course you can change this behaviour to not overwrite anything which exists like only if &lt;code&gt;to[n] is undefined&lt;/code&gt;, etc...:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; realMerge = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;to, &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; to[n] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n            to[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[n];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[n] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n            to[n] = &lt;span class=&quot;hljs-title function_&quot;&gt;realMerge&lt;/span&gt;(to[n], &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[n]);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; merged = &lt;span class=&quot;hljs-title function_&quot;&gt;realMerge&lt;/span&gt;(obj1, obj2);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Object.assign()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ECMAScript 2015 (ES6)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a new technology, part of the ECMAScript 2015 (ES6) standard.\nThis technology&apos;s specification has been finalized, but check the compatibility table for usage and implementation status in various browsers.&lt;/p&gt;\n\n&lt;p&gt;The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1 = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o2 = { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o3 = { &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(o1, o2, o3);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 2, c: 3 }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(o1);  &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 1, b: 2, c: 3 }, target object itself is changed.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For not-too-complicated objects you could use &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON&quot; rel=&quot;noreferrer&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;chevy&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objMerge;\n\nobjMerge = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1) + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;food&quot;: &quot;pizza&quot;,&quot;car&quot;:&quot;ford&quot;}{&quot;animal&quot;:&quot;dog&quot;,&quot;car&quot;:&quot;chevy&quot;}&lt;/span&gt;\n\nobjMerge = objMerge.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\}\\{/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//  \\_ replace with comma for valid JSON&lt;/span&gt;\n\nobjMerge = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(objMerge); &lt;span class=&quot;hljs-comment&quot;&gt;// { food: &apos;pizza&apos;, animal: &apos;dog&apos;, car: &apos;chevy&apos;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Of same keys in both objects, the last object&apos;s value is retained_/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mind you that in this example &quot;}{&quot; &lt;strong&gt;&lt;em&gt;must not occur&lt;/em&gt;&lt;/strong&gt; within a string!&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a library called &lt;a href=&quot;https://github.com/nrf110/deepmerge&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;deepmerge&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot; rel=&quot;noreferrer&quot;&gt;GitHub&lt;/a&gt;: That seems to be getting some traction. It&apos;s a standalone, available through both the &lt;a href=&quot;https://en.wikipedia.org/wiki/Npm_(software)&quot; rel=&quot;noreferrer&quot;&gt;npm&lt;/a&gt; and bower package managers.&lt;/p&gt;\n\n&lt;p&gt;I would be inclined to use or improve on this instead of copy-pasting code from answers.&lt;/p&gt;\n    ","\n&lt;p&gt;The best way for you to do this is to add a proper property that is non-enumerable using Object.defineProperty. &lt;/p&gt;\n\n&lt;p&gt;This way you will still be able to iterate over your objects properties without having the newly created &quot;extend&quot; that you would get if you were to create the property with Object.prototype.extend.&lt;/p&gt;\n\n&lt;p&gt;Hopefully this helps:&lt;/p&gt;\n\n&lt;pre&gt;Object.defineProperty(Object.prototype, &quot;extend&quot;, {\n    enumerable: false,\n    value: function(from) {\n        var props = Object.getOwnPropertyNames(from);\n        var dest = this;\n        props.forEach(function(name) {\n            if (name in dest) {\n                var destination = Object.getOwnPropertyDescriptor(from, name);\n                Object.defineProperty(dest, name, destination);\n            }\n        });\n        return this;\n    }\n});\n&lt;/pre&gt;\n\n&lt;p&gt;Once you have that working, you can do:&lt;/p&gt;\n\n&lt;pre&gt;var obj = {\n    name: &apos;stack&apos;,\n    finish: &apos;overflow&apos;\n}\nvar replacement = {\n    name: &apos;stock&apos;\n};\n\nobj.extend(replacement);\n&lt;/pre&gt;\n\n&lt;p&gt;I just wrote a blog post about it here: &lt;a href=&quot;http://onemoredigit.com/post/1527191998/extending-objects-in-node-js&quot; rel=&quot;noreferrer&quot;&gt;http://onemoredigit.com/post/1527191998/extending-objects-in-node-js&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can simply use jQuery &lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;val1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;val2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; };\n\njQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(obj1, obj2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now &lt;code&gt;obj1&lt;/code&gt; contains all the values of &lt;code&gt;obj1&lt;/code&gt; and &lt;code&gt;obj2&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework&quot; rel=&quot;noreferrer&quot;&gt;Prototype&lt;/a&gt; has this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;extend&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;destination,source&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; source)\n        destination[property] = source[property];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; destination;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;obj1.extend(obj2)&lt;/code&gt; will do what you want.&lt;/p&gt;\n    ","\n&lt;p&gt;Just if anyone is using &lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_goog_object_object.js.html&quot; rel=&quot;noreferrer&quot;&gt;Google Closure Library&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;goog.&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;goog.object&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\ngoog.&lt;span class=&quot;hljs-property&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(a, b);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now object a == {&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 4};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_goog_array_array.js.html&quot; rel=&quot;noreferrer&quot;&gt;Similar helper function exists for array&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\ngoog.&lt;span class=&quot;hljs-property&quot;&gt;array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(a, b); &lt;span class=&quot;hljs-comment&quot;&gt;// Extends array &apos;a&apos;&lt;/span&gt;\ngoog.&lt;span class=&quot;hljs-property&quot;&gt;array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(a, b); &lt;span class=&quot;hljs-comment&quot;&gt;// Returns concatenation of array &apos;a&apos; and &apos;b&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;**Merging objects is simple using &lt;code&gt;Object.assign&lt;/code&gt; or the spread &lt;code&gt;...&lt;/code&gt; operator **&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;BMW&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj3 = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergedObj = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(obj1,obj2,obj3)\n &lt;span class=&quot;hljs-comment&quot;&gt;// or using the Spread operator (...)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergedObj = {...obj1,...obj2,...obj3}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mergedObj);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The objects are merged from right to left, this means that objects which have identical properties as the objects to their right will be overriden.&lt;/p&gt;\n\n&lt;p&gt;In this example &lt;code&gt;obj2.car&lt;/code&gt; overrides &lt;code&gt;obj1.car&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Wow.. this is the first StackOverflow post I&apos;ve seen with multiple pages. Apologies for adding another &quot;answer&quot;&lt;/p&gt;\n&lt;br&gt;\n&lt;h3&gt;ES5 &amp;amp; Earlier&lt;/h3&gt;\n&lt;p&gt;This method is for &lt;em&gt;ES5 &amp;amp; Earlier&lt;/em&gt; - there are plenty of other answers addressing ES6.&lt;/p&gt;\n&lt;p&gt;I did not see any &lt;em&gt;&quot;deep&quot;&lt;/em&gt; object merging utilizing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; property. Here is my answer - &lt;strong&gt;compact&lt;/strong&gt; &amp;amp; &lt;strong&gt;recursive&lt;/strong&gt;, allowing unlimited object arguments to be passed:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {}, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Uncomment to skip arguments that are not objects (to prevent errors)&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// if (arguments[i].constructor !== Object) continue;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(k)) {\n                o[k] = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k].&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n                    ? &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(o[k] || {}, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k])\n                    : &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k];\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br&gt;\n&lt;h3&gt;Example&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Extend objects\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {}, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(k)) {\n                o[k] = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k].&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n                    ? &lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(o[k] || {}, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k])\n                    : &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i][k];\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Example\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;api&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;params&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;query&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\n    }\n}, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;params&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;query&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;there&apos;&lt;/span&gt;\n    }\n})));\n&lt;span class=&quot;hljs-comment&quot;&gt;// outputs {&quot;api&quot;: 1, &quot;params&quot;: {&quot;query&quot;: &quot;there&quot;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;&lt;em&gt;This answer is now but a drop in the ocean ...&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I extended David Coallier&apos;s method:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Added the possibility to merge multiple objects&lt;/li&gt;\n&lt;li&gt;Supports deep objects&lt;/li&gt;\n&lt;li&gt;override parameter (that&apos;s detected if the last parameter is a boolean)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If override is false, no property gets overridden but new properties will be added.&lt;/p&gt;\n\n&lt;p&gt;Usage:\nobj.merge(merges... [, override]);&lt;/p&gt;\n\n&lt;p&gt;Here is my code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;merge&quot;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; override = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n            dest = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n            len = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,\n            props, merge, i, &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) {\n            override = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n            len = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyNames&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; descriptor;\n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// nesting&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(dest[name]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(dest[name]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;)\n                            &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// ensure proper types (Array rsp Object)&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(dest[name]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n                            dest[name] = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name]) ? [] : {};\n                        }\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (override) {\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(dest[name]) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name])) {\n                                dest[name] = [];\n                            }\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(dest[name]) &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name])) {\n                                dest[name] = {};\n                            }\n                        }\n                        dest[name].&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;[name], override);\n                    } \n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// flat properties&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dest &amp;amp;&amp;amp; override) || !(name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dest)) {\n                        descriptor = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;, name);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (descriptor.&lt;span class=&quot;hljs-property&quot;&gt;configurable&lt;/span&gt;) {\n                            &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(dest, name, descriptor);\n                        }\n                    }\n                });\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Examples and TestCases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt; (obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;trick&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergeObj = {\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;truck&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergeObj2 = {\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;track&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;mergeObj2&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2-mergeObj2&quot;&lt;/span&gt;,\n    value3 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value3&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Standard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(mergeObj).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;truck&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Standard no Override&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(mergeObj, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;trick&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Multiple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(mergeObj, mergeObj2).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;track&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;mergeObj2&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2-mergeObj2&quot;&lt;/span&gt;,\n    value3 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value3&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Multiple no Override&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(mergeObj, mergeObj2, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;trick&quot;&lt;/span&gt;,\n    value : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;,\n    value2 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;,\n    value3 : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value3&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deep = {\n    first : {\n        name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;trick&quot;&lt;/span&gt;,\n        val : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;\n    },\n    second : {\n        foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepMerge = {\n    first : {\n        name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;track&quot;&lt;/span&gt;,\n        anotherVal : &lt;span class=&quot;hljs-string&quot;&gt;&quot;wohoo&quot;&lt;/span&gt;\n    },\n    second : {\n        foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;,\n        bar : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bam&quot;&lt;/span&gt;\n    },\n    v : &lt;span class=&quot;hljs-string&quot;&gt;&quot;on first layer&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Deep merges&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(deep).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(deepMerge).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    first : {\n        name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;track&quot;&lt;/span&gt;,\n        val : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;,\n        anotherVal : &lt;span class=&quot;hljs-string&quot;&gt;&quot;wohoo&quot;&lt;/span&gt;\n    },\n    second : {\n        foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;,\n        bar : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bam&quot;&lt;/span&gt;\n    },\n    v : &lt;span class=&quot;hljs-string&quot;&gt;&quot;on first layer&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Deep merges no override&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(deep).&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(deepMerge, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({\n    first : {\n        name : &lt;span class=&quot;hljs-string&quot;&gt;&quot;trick&quot;&lt;/span&gt;,\n        val : &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;,\n        anotherVal : &lt;span class=&quot;hljs-string&quot;&gt;&quot;wohoo&quot;&lt;/span&gt;\n    },\n    second : {\n        foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,\n        bar : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bam&quot;&lt;/span&gt;\n    },\n    v : &lt;span class=&quot;hljs-string&quot;&gt;&quot;on first layer&quot;&lt;/span&gt;\n}));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;};\nobj1.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;});\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}));\n\nobj1.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;new property&quot;&lt;/span&gt;}, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;new property&quot;&lt;/span&gt;}));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = {};\nobj2.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;});\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1 = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o2 = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o3 = {&lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\no1.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(o2, o3);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(o1.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}));\no1.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(o2.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// checking types with arrays and objects&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bo;\na = [];\nbo = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\nb = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Array stays Array?&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n\na = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(bo);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Object stays Object?&quot;&lt;/span&gt;, !&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n\na = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(bo);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Object overrides Array&quot;&lt;/span&gt;, !&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n\na = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(bo, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Object does not override Array&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n\na = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(bo);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Array overrides Object&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n\na = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(bo);\na.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(b, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Array does not override Object&quot;&lt;/span&gt;, !&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My equals method can be found here: &lt;a href=&quot;https://stackoverflow.com/questions/1068834/object-comparison-in-javascript/5522917#5522917&quot;&gt;Object comparison in JavaScript&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In &lt;a href=&quot;http://en.wikipedia.org/wiki/MooTools&quot; rel=&quot;nofollow noreferrer&quot;&gt;MooTools&lt;/a&gt;, there&apos;s &lt;a href=&quot;http://mootools.net/docs/core/Types/Object#Object:Object-merge&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object.merge()&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(obj1, obj2);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;a href=&quot;http://en.wikipedia.org/wiki/Ext_JS&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ext&amp;nbsp;JS&lt;/a&gt; 4 it can be done as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergedObject = &lt;span class=&quot;hljs-title class_&quot;&gt;Ext&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(object1, object2)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Or shorter:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mergedObject2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Ext&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(object1, object2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;em&gt;&lt;a href=&quot;http://docs.sencha.com/ext-js/4-0/#/api/Ext.Object-method-merge&quot; rel=&quot;nofollow noreferrer&quot;&gt;merge( object ) : Object&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt; }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// result&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;result&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using jQuery.extend()&lt;/strong&gt; - &lt;a href=&quot;https://api.jquery.com/jquery.extend/&quot; rel=&quot;noreferrer&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge obj1 &amp;amp; obj2 to result&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result1 = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;( {}, obj1, obj2 );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using _.merge()&lt;/strong&gt; - &lt;a href=&quot;https://lodash.com/docs/4.17.10#merge&quot; rel=&quot;noreferrer&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge obj1 &amp;amp; obj2 to result&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result2 = _.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;( {}, obj1, obj2 );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using _.extend()&lt;/strong&gt; - &lt;a href=&quot;https://underscorejs.org/#extend&quot; rel=&quot;noreferrer&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge obj1 &amp;amp; obj2 to result&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result3 = _.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;( {}, obj1, obj2 );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using Object.assign() ECMAScript 2015 (ES6)&lt;/strong&gt; - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Merge obj1 &amp;amp; obj2 to result&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result4 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;( {}, obj1, obj2 );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output of all&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;obj1&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-attr&quot;&gt;obj2&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-attr&quot;&gt;result1&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-attr&quot;&gt;result2&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-attr&quot;&gt;result3&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-attr&quot;&gt;result4&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;pizza&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Based on &lt;a href=&quot;https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/383245#383245&quot;&gt;Markus&apos;&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/7965071#7965071&quot;&gt;vsync&apos; answer&lt;/a&gt;, this is an expanded version. The function takes any number of arguments. It can be used to set properties on &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot; rel=&quot;noreferrer&quot;&gt;DOM&lt;/a&gt; nodes and makes deep copies of values. However, the first argument is given by reference.&lt;/p&gt;\n\n&lt;p&gt;To detect a DOM node, the isDOMNode() function is used (see Stack&amp;nbsp;Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/8736129/1131084&quot;&gt;JavaScript isDOM  How do you check if a JavaScript Object is a DOM Object?&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;\n\n&lt;p&gt;It was tested in &lt;a href=&quot;http://en.wikipedia.org/wiki/Opera_%28web_browser%29&quot; rel=&quot;noreferrer&quot;&gt;Opera&lt;/a&gt; 11, Firefox 6, &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot; rel=&quot;noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; and Google Chrome 16.&lt;/p&gt;\n\n&lt;h2&gt;Code&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// _mergeRecursive does the actual job with two arguments.&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _mergeRecursive = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;dst, src&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isDOMNode&lt;/span&gt;(src) || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; src !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || src === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dst;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; src) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!src.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(p))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (src[p] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; src[p] !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || src[p] === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        dst[p] = src[p];\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; dst[p]!==&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || dst[p] === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        dst[p] = &lt;span class=&quot;hljs-title function_&quot;&gt;_mergeRecursive&lt;/span&gt;(src[p].&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;===&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; ? [] : {}, src[p]);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;_mergeRecursive&lt;/span&gt;(dst[p], src[p]);\n      }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dst;\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Loop through arguments and merge them into the first argument.&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; out = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; out !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || out === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, il = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; il; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_mergeRecursive&lt;/span&gt;(out, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Some examples&lt;/h2&gt;\n\n&lt;p&gt;Set innerHTML and style of a HTML Element&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;(\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mydiv&apos;&lt;/span&gt;),\n  {&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;5px solid green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;}},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;innerHTML&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello world!&apos;&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Merge arrays and objects. Note that undefined can be used to preserv values in the lefthand array/object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;o = &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;}, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;]], {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;});\n&lt;span class=&quot;hljs-comment&quot;&gt;// o = {0:1, 1:null, 2:[30,31], a:&apos;a&apos;, b:&apos;b&apos;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any argument not beeing a JavaScript object (including null) will be ignored. Except for the first argument, also DOM nodes are discarded. Beware that i.e. strings, created like new String() are in fact objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;o = &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;de&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// o = {0:&apos;d&apos;, 1:&apos;e&apos;, 2:3, a:&apos;a&apos;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to merge two objects into a new (without affecting any of the two) supply {} as first argument&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a={}, b={&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;}, c={&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;cde&apos;&lt;/span&gt;}, o;\no = &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;(a, b, c);\n&lt;span class=&quot;hljs-comment&quot;&gt;// o===a is true, o===b is false, o===c is false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; (by ReaperSoon):&lt;/p&gt;\n\n&lt;p&gt;To also merge arrays&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(obj2)) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(obj2); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj2) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Property in destination object set; update its value.&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( obj2[p].&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;==&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; ) {\n        obj1[p] = &lt;span class=&quot;hljs-title function_&quot;&gt;mergeRecursive&lt;/span&gt;(obj1[p], obj2[p]);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(obj2[p])) {\n        obj1[p] = obj1[p].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(obj2[p]);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        obj1[p] = obj2[p];\n      }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Property in destination object not set; create it and set its value.&lt;/span&gt;\n      obj1[p] = obj2[p];\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should use lodash&apos;s &lt;a href=&quot;https://lodash.com/docs#defaultsDeep&quot; rel=&quot;noreferrer&quot;&gt;defaultsDeep&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;defaultsDeep&lt;/span&gt;({ &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;barney&apos;&lt;/span&gt; } }, { &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;fred&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; } });\n&lt;span class=&quot;hljs-comment&quot;&gt;//  { &apos;user&apos;: { &apos;name&apos;: &apos;barney&apos;, &apos;age&apos;: 36 } }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot; rel=&quot;nofollow&quot;&gt;Underscore.js&lt;/a&gt;, to merge an array of objects do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayOfObjects = [ {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;} ];\n&lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(arrayOfObjects).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;memo, o&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(memo).&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(o); });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It results in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj1 = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj2 = {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; merged = {...obj1, ...obj2};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(merged);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"id":279,"title":"How can I merge properties of two JavaScript objects dynamically?","content":"\n                \n&lt;p&gt;I need to be able to merge two (very simple) JavaScript objects at runtime.  For example I&apos;d like to:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;pizza&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;car&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ford&apos;&lt;/span&gt; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = { &lt;span class=&quot;hljs-attr&quot;&gt;animal&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt; }\n\nobj1.&lt;span class=&quot;hljs-title function_&quot;&gt;merge&lt;/span&gt;(obj2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//obj1 now has three properties: food, car, and animal&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is there a built in way to do this?  I do not need recursion, and I do not need to merge functions, just methods on flat objects.&lt;/p&gt;\n    ","slug":"how-can-i-merge-properties-of-two-javascript-objects-dynamically-1657387492535","postType":"QUESTION","createdAt":"2022-07-09T17:24:52.000Z","updatedAt":"2022-07-09T17:24:52.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to count the number of set bits in a 32-bit integer?","slug":"how-to-count-the-number-of-set-bits-in-a-32-bit-integer-1657388437370"},{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"How can I validate an email address in JavaScript?","slug":"how-can-i-validate-an-email-address-in-javascript-1657385475959"},{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"How do I Pandas group-by to get sum?","slug":"how-do-i-pandas-group-by-to-get-sum-1657387908708"},{"title":"What methods of ‘clearfix’ can I use?","slug":"what-methods-of-'clearfix'-can-i-use-1657387672727"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"How to iterate over rows in a DataFrame in Pandas","slug":"how-to-iterate-over-rows-in-a-dataframe-in-pandas-1657387358115"},{"title":"Maintain the aspect ratio of a div with CSS","slug":"maintain-the-aspect-ratio-of-a-div-with-css-1657387513615"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"What is the best regular expression to check if a string is a valid URL?","slug":"what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url-1657387618306"},{"title":"Calling a function of a module by using its name (a string)","slug":"calling-a-function-of-a-module-by-using-its-name-(a-string)-1657388565656"},{"title":"JavaScript closure inside loops – simple practical example","slug":"javascript-closure-inside-loops-simple-practical-example-1657384278449"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"Passing data between view controllers","slug":"passing-data-between-view-controllers-1657384540021"},{"title":"How do I make Git forget about a file that was tracked, but is now in .gitignore?","slug":"how-do-i-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-.gitignore-1657387328843"}]},"__N_SSG":true}