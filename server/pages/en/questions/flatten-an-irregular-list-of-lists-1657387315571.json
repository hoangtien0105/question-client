{"pageProps":{"data":{"answer":["\n&lt;p&gt;Using generator functions can make your example easier to read and improve performance.&lt;/p&gt;\n&lt;h3&gt;Python 2&lt;/h3&gt;\n&lt;p&gt;Using the &lt;a href=&quot;https://docs.python.org/2/library/collections.html#collections-abstract-base-classes&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt; ABC&lt;/a&gt; added in 2.6:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xs:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, basestring):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(x):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; x\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Python 3&lt;/h3&gt;\n&lt;p&gt;In Python 3, &lt;code&gt;basestring&lt;/code&gt; is no more, but the tuple &lt;code&gt;(str, bytes)&lt;/code&gt; gives the same effect. Also, the &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.3.html#pep-380&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;yield from&lt;/code&gt;&lt;/a&gt; operator returns an item from a generator one at a time.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections.abc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xs:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(x)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; x\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, collections.Iterable):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [a &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(i)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A little more concise, but pretty much the same.&lt;/p&gt;\n    ","\n&lt;p&gt;Generator using recursion and duck typing (updated for Python 3):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;L&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is my functional version of recursive flatten which handles both tuples and lists, and lets you throw in any mix of positional arguments. Returns a generator which produces the entire sequence in order, arg by arg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; *n: (e &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (flatten(*a) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(a, (&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (a,)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)]]\nl2 = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), [[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,), [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]], (&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(l1, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, l2))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generator version of @unutbu&apos;s non-recursive solution, as requested by @Andrew in a comment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genflat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, ltypes=collections.&lt;span class=&quot;hljs-type&quot;&gt;Sequence&lt;/span&gt;&lt;/span&gt;):\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n    i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l[i], ltypes):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; l[i]:\n                l.pop(i)\n                i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                l[i:i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = l[i]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; l[i]\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Slightly simplified version of this generator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genflat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, ltypes=collections.&lt;span class=&quot;hljs-type&quot;&gt;Sequence&lt;/span&gt;&lt;/span&gt;):\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; l:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], ltypes):\n            l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l: &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; l.pop(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This version of &lt;code&gt;flatten&lt;/code&gt; avoids python&apos;s recursion limit (and thus works with arbitrarily deep, nested iterables). It is a generator which can handle strings and arbitrary iterables (even infinite ones).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IT\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, ltypes=collections.Iterable&lt;/span&gt;):\n    remainder = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(iterable)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        first = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(remainder)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(first, ltypes) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(first, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;)):\n            remainder = IT.chain(first, remainder)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; first\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are some examples demonstrating its use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)),&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(IT.chain(IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),\n                                       {&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;},\n                                       &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar&apos;&lt;/span&gt;.split(),\n                                       IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),)),&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [2, 2, 2, 10, 20, 30, &apos;foo&apos;, &apos;bar&apos;, 1, 1]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten([[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]])))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1, 2, 3, 4]&lt;/span&gt;\n\nseq = ([[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i),&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i-&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)] + &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(seq)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;a&apos;, &apos;A&apos;, &apos;b&apos;, &apos;B&apos;, &apos;c&apos;, &apos;C&apos;, &apos;d&apos;, &apos;D&apos;, &apos;e&apos;, &apos;E&apos;, &apos;f&apos;, &apos;F&apos;, &apos;g&apos;, &apos;G&apos;, &apos;h&apos;, &apos;H&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;i&apos;, &apos;I&apos;, &apos;j&apos;, &apos;J&apos;, &apos;k&apos;, &apos;K&apos;, &apos;l&apos;, &apos;L&apos;, &apos;m&apos;, &apos;M&apos;, &apos;n&apos;, &apos;N&apos;, &apos;o&apos;, &apos;O&apos;, &apos;p&apos;, &apos;P&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;q&apos;, &apos;Q&apos;, &apos;r&apos;, &apos;R&apos;, &apos;s&apos;, &apos;S&apos;, &apos;t&apos;, &apos;T&apos;, &apos;u&apos;, &apos;U&apos;, &apos;v&apos;, &apos;V&apos;, &apos;w&apos;, &apos;W&apos;, &apos;x&apos;, &apos;X&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;y&apos;, &apos;Y&apos;, &apos;z&apos;, &apos;Z&apos;, 0, 1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although &lt;code&gt;flatten&lt;/code&gt; can handle infinite generators, it can not handle infinite nesting:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;infinitely_nested&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; IT.chain(infinitely_nested(), IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(infinitely_nested()), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# hangs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    res = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ys&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ys:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n                loop(i)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                res.append(i)\n    loop(xs)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another answer that is even more interesting...&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TheList&lt;/span&gt;):\n    a = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(TheList)\n    b,_Anon = re.subn(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;[\\[,\\]]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, a)\n    c = b.split()\n    d = [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; c]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(d)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Basically, it converts the nested list to a string, uses a regex to strip out the nested syntax, and then converts the result back to a (flattened) list.&lt;/p&gt;\n    ","\n&lt;p&gt;It was fun trying to create a function that could flatten irregular list in Python, but of course that is what Python is for (to make programming fun). The following generator works fairly well with some caveats:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; iterable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will flatten datatypes that you might want left alone (like &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; objects). Also, the code relies on the fact that requesting an iterator from a non-iterable raises a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; iterable\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I disagree with the previous implementation. The problem is that you should not be able to flatten something that is not an iterable. It is confusing and gives the wrong impression of the argument.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\n[&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following generator is almost the same as the first but does not have the problem of trying to flatten a non-iterable object. It fails as one would expect when an inappropriate argument is given to it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Testing the generator works fine with the list that was provided. However, the new code will raise a &lt;code&gt;TypeError&lt;/code&gt; when a non-iterable object is given to it. Example are shown below of the new behavior.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;pyshell#32&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;pyshell#27&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\nTypeError: &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; iterable\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could use &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/generated/deepflatten.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;deepflatten&lt;/code&gt;&lt;/a&gt; from the 3rd party package &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/index.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;iteration_utilities&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; iteration_utilities &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepflatten\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L, types=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# only flatten &quot;inner&quot; lists&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s an iterator so you need to iterate it (for example by wrapping it with &lt;code&gt;list&lt;/code&gt; or using it in a loop). Internally it uses an iterative approach instead of an recursive approach and it&apos;s written as C extension so it can be faster than pure python approaches:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L))\n&lt;span class=&quot;hljs-number&quot;&gt;12.6&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;298&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L, types=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;8.7&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))   &lt;span class=&quot;hljs-comment&quot;&gt;# Cristian - Python 3.x approach from https://stackoverflow.com/a/2158532/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;86.4&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;4.42&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))   &lt;span class=&quot;hljs-comment&quot;&gt;# Josh Lee - https://stackoverflow.com/a/2158522/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;107&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;2.99&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(genflat(L, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# Alex Martelli - https://stackoverflow.com/a/2159079/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;23.1&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;710&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I&apos;m the author of the &lt;code&gt;iteration_utilities&lt;/code&gt; library.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple function that flattens lists of arbitrary depth. No recursion, to avoid stack overflow.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Flatten an arbitrarily nested list, without recursion (to avoid\n    stack overflows). Returns a new list, the original list is unchanged.\n\n    &amp;gt;&amp;gt; list(flatten_list([1, 2, 3, [4], [], [[[[[[[[[5]]]]]]]]]]))\n    [1, 2, 3, 4, 5]\n    &amp;gt;&amp;gt; list(flatten_list([[1, 2], 3]))\n    [1, 2, 3]\n\n    &quot;&quot;&quot;&lt;/span&gt;\n    nested_list = deepcopy(nested_list)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; nested_list:\n        sublist = nested_list.pop(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(sublist, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            nested_list = sublist + nested_list\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; sublist\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Pandas has a function that does this. It returns an iterator as you mentioned.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: pandas.core.common.flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; flatten at &lt;span class=&quot;hljs-number&quot;&gt;0x7f12ade66200&lt;/span&gt;&amp;gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pandas.core.common.flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although an elegant and very pythonic answer has been selected I would present my solution just for the review:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    ret = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n            ret.extend(flat(i))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            ret.append(i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please tell how good or bad this code is?&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer simple answers.  No generators.  No recursion or recursion limits.  Just iteration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TheList&lt;/span&gt;):\n    listIsNested = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; listIsNested:                 &lt;span class=&quot;hljs-comment&quot;&gt;#outer loop&lt;/span&gt;\n        keepChecking = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        Temp = []\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; TheList:         &lt;span class=&quot;hljs-comment&quot;&gt;#inner loop&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(element,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n                Temp.extend(element)\n                keepChecking = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                Temp.append(element)\n\n        listIsNested = keepChecking     &lt;span class=&quot;hljs-comment&quot;&gt;#determine if outer loop exits&lt;/span&gt;\n        TheList = Temp[:]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; TheList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works with two lists: an inner for loop and an outer while loop.  &lt;/p&gt;\n\n&lt;p&gt;The inner for loop iterates through the list.  If it finds a list element, it (1) uses list.extend() to flatten that part one level of nesting and (2) switches keepChecking to True.  keepchecking is used to control the outer while loop.  If the outer loop gets set to true, it triggers the inner loop for another pass.  &lt;/p&gt;\n\n&lt;p&gt;Those passes keep happening until no more nested lists are found.  When a pass finally occurs where none are found, keepChecking never gets tripped to true, which means listIsNested stays false and the outer while loop exits.  &lt;/p&gt;\n\n&lt;p&gt;The flattened list is then returned.&lt;/p&gt;\n\n&lt;p&gt;Test-run   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;]]])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;[1, 2, 3, 4, 100, 200, 300, 1000, 2000, 3000]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When trying to answer such a question you really need to give the limitations of the code you propose as a solution. If it was only about performances I wouldn&apos;t mind too much, but most of the codes proposed as solution (including the accepted answer) fail to flatten any list that has a depth greater than 1000.&lt;/p&gt;\n\n&lt;p&gt;When I say &lt;em&gt;most of the codes&lt;/em&gt; I mean all codes that use any form of recursion (or call a standard library function that is recursive). All these codes fail because for every of the recursive call made, the (call) stack grow by one unit, and the (default) python call stack has a size of 1000. &lt;/p&gt;\n\n&lt;p&gt;If you&apos;re not too familiar with the call stack, then maybe the following will help (otherwise you can just scroll to the &lt;strong&gt;Implementation&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;h2&gt;Call stack size and recursive programming (dungeon analogy)&lt;/h2&gt;\n\n&lt;h3&gt;Finding the treasure and exit&lt;/h3&gt;\n\n&lt;p&gt;Imagine you enter a huge &lt;em&gt;dungeon with numbered rooms&lt;/em&gt;, looking for a treasure. You don&apos;t know the place but you have some &lt;strong&gt;indications&lt;/strong&gt; on how to find the treasure. Each indication is a riddle (difficulty varies, but you can&apos;t predict how hard they will be). You decide to think a little bit about a strategy to save time, you make two observations: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It&apos;s hard (long) to find the treasure as you&apos;ll have to solve (potentially hard) riddles to get there. &lt;/li&gt;\n&lt;li&gt;Once the treasure found, returning to the entrance may be easy, you just have to use the same path in the other direction (though this needs a bit of memory to recall your path). &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;When entering the dungeon, you notice a small &lt;strong&gt;notebook&lt;/strong&gt; here. You decide to use it to write down every room you exit after solving a riddle (when entering a new room), this way you&apos;ll be able to return back to the entrance. That&apos;s a genius idea, you &lt;em&gt;won&apos;t even spend a cent&lt;/em&gt; implementing your strategy.&lt;/p&gt;\n\n&lt;p&gt;You enter the dungeon, solving with great success the first 1001 riddles, but here comes something you hadn&apos;t planed, you have no space left in the notebook you borrowed. You decide to &lt;em&gt;abandon&lt;/em&gt; your quest as you prefer not having the treasure than being lost forever inside the dungeon (that looks smart indeed).&lt;/p&gt;\n\n&lt;h3&gt;Executing a recursive program&lt;/h3&gt;\n\n&lt;p&gt;Basically, it&apos;s the exact same thing as finding the treasure. The dungeon is the &lt;em&gt;computer&apos;s memory&lt;/em&gt;, your goal now is not to find a treasure but to &lt;em&gt;compute some function&lt;/em&gt; (find &lt;em&gt;f(x)&lt;/em&gt; for a given &lt;em&gt;x&lt;/em&gt;). The indications simply are sub-routines that will help you solving &lt;em&gt;f(x)&lt;/em&gt;. Your strategy is the same as the &lt;em&gt;call stack&lt;/em&gt; strategy, the notebook is the stack, the rooms are the functions&apos; return addresses: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;over here&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;am&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;]\ny = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x) &lt;span class=&quot;hljs-comment&quot;&gt;# You&apos;re about to enter a room named `sorted`, note down the current room address here so you can return back: 0x4004f4 (that room address looks weird)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Seems like you went back from your quest using the return address 0x4004f4&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Let&apos;s see what you&apos;ve collected &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.join(y))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem you encountered in the dungeon will be the same here, the call stack has a finite size (here 1000) and therefore, if you enter too many functions without returning back then you&apos;ll fill the call stack and have an error that look like &lt;strike&gt;&quot;Dear adventurer, I&apos;m very sorry but your notebook is full&quot;&lt;/strike&gt;: &lt;code&gt;RecursionError: maximum recursion depth exceeded&lt;/code&gt;. Note that you don&apos;t need recursion to fill the call stack, but it&apos;s very unlikely that a non-recursive program call 1000 functions without ever returning. It&apos;s important to also understand that once you returned from a function, the call stack is freed from the address used (hence the name &quot;stack&quot;, return address are pushed in before entering a function and pulled out when returning). In the special case of a simple recursion (a function &lt;code&gt;f&lt;/code&gt; that call itself once -- over and over --) you will enter &lt;code&gt;f&lt;/code&gt; over and over until the computation is finished (until the treasure is found) and return from &lt;code&gt;f&lt;/code&gt; until you go back to the place where you called &lt;code&gt;f&lt;/code&gt; in the first place. The call stack will never be freed from anything until the end where it will be freed from all return addresses one after the other. &lt;/p&gt;\n\n&lt;h3&gt;How to avoid this issue?&lt;/h3&gt;\n\n&lt;p&gt;That&apos;s actually pretty simple: &quot;don&apos;t use recursion if you don&apos;t know how deep it can go&quot;. That&apos;s not always true as in some cases, &lt;a href=&quot;https://stackoverflow.com/questions/310974/what-is-tail-call-optimization&quot;&gt;Tail Call recursion can be Optimized (TCO)&lt;/a&gt;. But in python, this is not the case, and even &quot;well written&quot; recursive function will &lt;strong&gt;not&lt;/strong&gt; optimize stack use. There is an interesting post from Guido about this question: &lt;a href=&quot;http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Tail Recursion Elimination&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is a technique that you can use to make any recursive function iterative, this technique we could call &lt;em&gt;&lt;strong&gt;bring your own notebook&lt;/strong&gt;&lt;/em&gt;. For example, in our particular case we simply are exploring a list, entering a room is equivalent to entering a sublist, the question you should ask yourself is &lt;em&gt;how can I get back from a list to its parent list?&lt;/em&gt; The answer is not that complex, repeat the following until the &lt;code&gt;stack&lt;/code&gt; is empty:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;push the current list &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; in a &lt;code&gt;stack&lt;/code&gt; when entering a new sublist (note that a list address+index is also an address, therefore we just use the exact same technique used by the call stack);&lt;/li&gt;\n&lt;li&gt;every time an item is found, &lt;code&gt;yield&lt;/code&gt; it (or add them in a list);&lt;/li&gt;\n&lt;li&gt;once a list is fully explored, go back to the parent list using the &lt;code&gt;stack&lt;/code&gt; &lt;em&gt;return &lt;code&gt;address&lt;/code&gt; (and &lt;code&gt;index&lt;/code&gt;)&lt;/em&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Also note that this is equivalent to a DFS in a tree where some nodes are sublists &lt;code&gt;A = [1, 2]&lt;/code&gt; and some are simple items: &lt;code&gt;0, 1, 2, 3, 4&lt;/code&gt; (for &lt;code&gt;L = [0, [1,2], 3, 4]&lt;/code&gt;). The tree looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;                    L\n                    |\n           -------------------\n           |     |     |     |\n           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   --A--   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n               |   |\n               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The DFS traversal pre-order is: L, 0, A, 1, 2, 3, 4. Remember, in order to implement an iterative DFS you also &quot;need&quot; a stack. The implementation I proposed before result in having the following states (for the &lt;code&gt;stack&lt;/code&gt; and the &lt;code&gt;flat_list&lt;/code&gt;): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;init.:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n**&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n**A**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;: stack=[],               flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example, the stack maximum size is 2, because the input list (and therefore the tree) have depth 2.&lt;/p&gt;\n\n&lt;h2&gt;Implementation&lt;/h2&gt;\n\n&lt;p&gt;For the implementation, in python you can simplify a little bit by using iterators instead of simple lists. References to the (sub)iterators will be used to store &lt;em&gt;sublists return addresses&lt;/em&gt; (instead of having both the list address and the index). This is not a big difference but I feel this is more readable (and also a bit faster):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(items_from(iterable))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;items_from&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    cursor_stack = [&lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(iterable)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; cursor_stack:\n        sub_iterable = cursor_stack[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            item = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(sub_iterable)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; StopIteration:   &lt;span class=&quot;hljs-comment&quot;&gt;# post-order&lt;/span&gt;\n            cursor_stack.pop()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_list_like(item):  &lt;span class=&quot;hljs-comment&quot;&gt;# pre-order&lt;/span&gt;\n            cursor_stack.append(&lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(item))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item          &lt;span class=&quot;hljs-comment&quot;&gt;# in-order&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_list_like&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, notice that in &lt;code&gt;is_list_like&lt;/code&gt; I have &lt;code&gt;isinstance(item, list)&lt;/code&gt;, which could be changed to handle more input types, here I just wanted to have the simplest version where (iterable) is just a list. But you could also do that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_list_like&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# strings are not lists (hmm...) &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This considers strings as &quot;simple items&quot; and therefore &lt;code&gt;flatten_iter([[&quot;test&quot;, &quot;a&quot;], &quot;b])&lt;/code&gt; will return &lt;code&gt;[&quot;test&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt; and not &lt;code&gt;[&quot;t&quot;, &quot;e&quot;, &quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt;. Remark that in that case, &lt;code&gt;iter(item)&lt;/code&gt; is called twice on each item, let&apos;s pretend it&apos;s an exercise for the reader to make this cleaner. &lt;/p&gt;\n\n&lt;h2&gt;Testing and remarks on other implementations&lt;/h2&gt;\n\n&lt;p&gt;In the end, remember that you can&apos;t print a infinitely nested list &lt;code&gt;L&lt;/code&gt; using &lt;code&gt;print(L)&lt;/code&gt; because internally it will use recursive calls to &lt;code&gt;__repr__&lt;/code&gt; (&lt;code&gt;RecursionError: maximum recursion depth exceeded while getting the repr of an object&lt;/code&gt;). For the same reason, solutions to &lt;code&gt;flatten&lt;/code&gt; involving &lt;code&gt;str&lt;/code&gt; will fail with the same error message. &lt;/p&gt;\n\n&lt;p&gt;If you need to test your solution, you can use this function to generate a simple nested list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;build_deep_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;depth&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Returns a list of the form $l_{depth} = [depth-1, l_{depth-1}]$\n    with $depth &amp;gt; 1$ and $l_0 = [0]$.\n    &quot;&quot;&quot;&lt;/span&gt;\n    sub_list = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, depth):\n        sub_list = [d, sub_list]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sub_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which gives: &lt;code&gt;build_deep_list(5)&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code&gt;[4, [3, [2, [1, [0]]]]]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I didn&apos;t go through all the already available answers here, but here is a one liner I came up with, borrowing from lisp&apos;s way of first and rest list processing&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; flatten(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + (flatten(l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(l) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [l]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;here is one simple and one not-so-simple case -&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]], [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;some&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_string&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_name&apos;&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_string&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the &lt;code&gt;compiler.ast.flatten&lt;/code&gt; implementation in 2.7.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    l = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(elt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elt2 &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(elt):\n                l.append(elt2)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            l.append(elt)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are better, faster methods (If you&apos;ve reached here, you have seen them already)&lt;/p&gt;\n\n&lt;p&gt;Also note:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Deprecated since version 2.6: The compiler package has been removed in Python 3.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;totally hacky but I think it would work (depending on your data_type)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flat_list = ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[%s]&quot;&lt;/span&gt;%re.sub(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\[\\]]&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(the_list)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m surprised no one has thought of this. Damn recursion I don&apos;t get the recursive answers that the advanced people here made. anyway here is my attempt on this. caveat is it&apos;s very specific to the OP&apos;s use case&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\nL = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nflattened_list = re.sub(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\[\\]]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(L)).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)\nnew_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, flattened_list))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(new_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use a &lt;a href=&quot;https://funcy.readthedocs.io/en/stable/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;funcy&lt;/code&gt;&lt;/a&gt; library:\n&lt;code&gt;pip install funcy&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; funcy\n\n\nfuncy.flatten([[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# returns generator&lt;/span&gt;\nfuncy.lflatten([[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# returns list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am a dumb guy so I&apos;ll give a &quot;dumb&quot; solution. All that recursion hurts my brain.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flattened_list = []\nnested_list = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_list, container&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nested_list:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isintance(item, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            flatten(item, container)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            container.append(item)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten(nested_list, flattened_list)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flattened_list\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I get that it&apos;s using a side effect but well that&apos;s to the best of my comprehension of recursion can go&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t see anything like this posted around here and just got here from a closed question on the same subject, but why not just do something like this(if you know the type of the list you want to split):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]]    \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(a).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)    \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; g.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.strip()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would need to know the type of the elements but I think this can be generalised and in terms of speed I think it would be faster.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is another py2 approach, Im not sure if its the fastest or the most elegant nor safest ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; imap, repeat, chain\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seqs, ignore=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, long, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, basestring&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; repeat(seqs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(imap(&lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;, repeat(seqs), ignore)) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seqs, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; chain.from_iterable(imap(flat, seqs))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can ignore any specific (or derived) type you would like, it returns an iterator, so you can convert it to any specific container such as list, tuple, dict or simply consume it in order to reduce memory footprint, for better or worse it can handle initial non-iterable objects such as int ...&lt;/p&gt;\n\n&lt;p&gt;Note most of the heavy lifting is done in C, since as far as I know thats how itertools are implemented, so while it is recursive, AFAIK it isn&apos;t bounded by python recursion depth since the function calls are happening in C, though this doesn&apos;t mean you are bounded by memory, specially in OS X where its stack size has a hard limit as of today (OS X Mavericks) ...&lt;/p&gt;\n\n&lt;p&gt;there is a slightly faster approach, but less portable method, only use it if you can assume that the base elements of the input can be explicitly determined otherwise, you&apos;ll get an infinite recursion, and OS X with its limited stack size, will throw a segmentation fault fairly quickly ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seqs, ignore={&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, long, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, unicode}&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; repeat(seqs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(seqs) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ignore &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seqs, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; chain.from_iterable(imap(flat, seqs))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here we are using sets to check for the type so it takes O(1) vs O(number of types) to check whether or not an element should be ignored, though of course any value with derived type of the stated ignored types will fail, this is why its using &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt; so use it with caution ...&lt;/p&gt;\n\n&lt;p&gt;tests:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;test_size=&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increase_depth&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, depth=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; func &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(depth):\n            value = repeat(value, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random_sub_chaining&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_values&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; values &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nested_values:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; chain((values,), chain.from_iterable(imap(&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;, repeat(nested_values, random.randint(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))))\n\n    expected_values = &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(xrange(test_size), imap(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, xrange(test_size)))\n    nested_values = random_sub_chaining((increase_depth(value, depth) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; depth, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(expected_values)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(imap(cmp, chain.from_iterable(expected_values), flat(chain(((),), nested_values, ((),)))))\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;test_flat()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flat([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; \n\n$ uname -a\nDarwin Samys-MacBook-Pro.local &lt;span class=&quot;hljs-number&quot;&gt;13.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; Darwin Kernel Version &lt;span class=&quot;hljs-number&quot;&gt;13.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;: Tue Jun  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt; PDT &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;; root:xnu-&lt;span class=&quot;hljs-number&quot;&gt;2422.110&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.17&lt;/span&gt;~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/RELEASE_X86_64 x86_64\n$ python --version\nPython &lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Without using any library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, r&lt;/span&gt;):    \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(l) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n            r.append(l)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n                r = r + flat(i)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _flat(l, [])\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# example&lt;/span&gt;\ntest = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;] , [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;]], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flat(test) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [1, 2, 3, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;z&apos;, &apos;x&apos;, &apos;y&apos;, &apos;d&apos;, &apos;f&apos;, &apos;g&apos;, 4]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;itertools.chain&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst&lt;/span&gt;):\n    flat_lst = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.chain(lst):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, Iterable):\n            item = list_flatten(item)\n            flat_lst.extend(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            flat_lst.append(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; flat_lst\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or without chaining:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;q, final&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; q:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(q, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            final.append(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            flatten(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], final)\n        flatten(q[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], final)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        final.append(q)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used recursive to solve &lt;strong&gt;&lt;em&gt;nested list with any depth&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;combine_nlist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nlist,init=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,combiner=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y: x+y&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    apply function: combiner to a nested list element by element(treated as flatten list)\n    &apos;&apos;&apos;&lt;/span&gt;\n    current_value=init\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; each_item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nlist:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(each_item,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            current_value =combine_nlist(each_item,current_value,combiner)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            current_value = combiner(current_value,each_item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; current_value\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So after i define function combine_nlist, it is easy to use this function do flatting. Or you can combine it into one function. I like my solution because it can be applied to any nested list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_nlist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nlist&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; combine_nlist(nlist,[],&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y:x+[y])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;result&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;379&lt;/span&gt;]: flatten_nlist([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],[[[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;379&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The easiest way is to use the &lt;a href=&quot;https://github.com/metagriffin/morph&quot; rel=&quot;nofollow&quot;&gt;morph&lt;/a&gt; library using &lt;code&gt;pip install morph&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The code is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; morph\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nflattened_list = morph.flatten(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# returns [1, 2, 3, 4, 5, 6]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am aware that there are already many awesome answers but i wanted to add an answer that uses the functional programming method of solving the question. In this answer i make use of double recursion :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seq:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])+flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]+flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(flatten_list([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m not sure if this is necessarily quicker or more effective, but this is what I do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(lst).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;)\n\nL = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(flatten(L))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;flatten&lt;/code&gt; function here turns the list into a string, takes out &lt;strong&gt;all&lt;/strong&gt; of the square brackets, attaches square brackets back onto the ends, and turns it back into a list. &lt;/p&gt;\n\n&lt;p&gt;Although, if you knew you would have square brackets in your list in strings, like &lt;code&gt;[[1, 2], &quot;[3, 4] and [5]&quot;]&lt;/code&gt;, you would have to do something else.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a simple implement of flatten on python2&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; l: reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y:x+y,&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(flatten,l),[]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [l]\n\ntest=[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]]]]]],]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flatten(test)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#output [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":220,"title":"Flatten an irregular list of lists","content":"\n                \n&lt;p&gt;Yes, I know this subject has been covered before (&lt;a href=&quot;https://stackoverflow.com/questions/120886&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/457215&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/952914&quot;&gt;here&lt;/a&gt;), but as far as I know, all solutions, except for one, fail on a list like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the desired output is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or perhaps even better, an iterator. The only solution I saw that works for an arbitrary nesting is found &lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;in this question&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    result = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; el &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(el, &lt;span class=&quot;hljs-string&quot;&gt;&quot;__iter__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(el, basestring):\n            result.extend(flatten(el))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            result.append(el)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n\nflatten(L)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is this the best model? Did I overlook something? Any problems?&lt;/p&gt;\n    ","slug":"flatten-an-irregular-list-of-lists-1657387315571","postType":"QUESTION","createdAt":"2022-07-09T17:21:55.000Z","updatedAt":"2022-07-09T17:21:55.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"Templated check for the existence of a class member function?","slug":"templated-check-for-the-existence-of-a-class-member-function-1657388363414"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202"},{"title":"How to convert string representation of list to a list","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181"},{"title":"Convert form data to JavaScript object with jQuery","slug":"convert-form-data-to-javascript-object-with-jquery-1657388036834"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"How to use SharedPreferences in Android to store, fetch and edit values [closed]","slug":"how-to-use-sharedpreferences-in-android-to-store-fetch-and-edit-values-closed-1657387683057"},{"title":"Aggregate / summarize multiple variables per group (e.g. sum, mean)","slug":"aggregate-summarize-multiple-variables-per-group-(e.g.-sum-mean)-1657387764061"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"What is the difference between client-side and server-side programming?","slug":"what-is-the-difference-between-client-side-and-server-side-programming-1657384372926"},{"title":"How do you get the footer to stay at the bottom of a Web page?","slug":"how-do-you-get-the-footer-to-stay-at-the-bottom-of-a-web-page-1657387817544"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"}]},"__N_SSG":true}