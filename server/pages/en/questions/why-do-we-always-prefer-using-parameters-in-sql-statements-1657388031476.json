{"pageProps":{"data":{"answer":["\n&lt;p&gt;Using parameters helps prevent &lt;strong&gt;SQL Injection attacks&lt;/strong&gt; when the database is used in conjunction with a program interface such as a desktop program or web site.&lt;/p&gt;\n&lt;p&gt;In your example, a user can directly run SQL code on your database by crafting statements in &lt;code&gt;txtSalary&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For example, if they were to write &lt;code&gt;0 OR 1=1&lt;/code&gt;, the executed SQL would be&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empSalary &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; salary &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;whereby all empSalaries would be returned.&lt;/p&gt;\n&lt;p&gt;Further, a user could perform far worse commands against your database, including deleting it If they wrote &lt;code&gt;0; Drop Table employee&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empSalary &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; salary &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;Drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; employee\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The table &lt;code&gt;employee&lt;/code&gt; would then be deleted.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;In your case, it looks like you&apos;re using .NET. Using parameters is as easy as:&lt;/p&gt;\n&lt;pre class=&quot;lang-c# s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT empSalary from employee where salary = @salary&quot;&lt;/span&gt;;\n\nusing (SqlConnection connection = new SqlConnection(&lt;span class=&quot;hljs-comment&quot;&gt;/* connection info */&lt;/span&gt;))\nusing (SqlCommand command = new SqlCommand(sql, connection))\n{\n    var salaryParam = new SqlParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;salary&quot;&lt;/span&gt;, SqlDbType.Money);\n    salaryParam.Value = txtMoney.Text;\n\n    command.Parameters.Add(salaryParam);\n    var results = command.ExecuteReader();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-vbnet s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; sql &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT empSalary from employee where salary = @salary&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; connection &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; SqlConnection(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connectionString&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt; command &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; SqlCommand(sql, connection)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; salaryParam = &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; SqlParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;salary&quot;&lt;/span&gt;, SqlDbType.Money)\n        salaryParam.Value = txtMoney.&lt;span class=&quot;hljs-keyword&quot;&gt;Text&lt;/span&gt;\n\n        command.Parameters.Add(salaryParam)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; results = command.ExecuteReader()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Using&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Edit 2016-4-25:&lt;/p&gt;\n&lt;p&gt;As per George Stocker&apos;s comment, I changed the sample code to not use &lt;code&gt;AddWithValue&lt;/code&gt;. Also, it is generally recommended that you wrap &lt;code&gt;IDisposable&lt;/code&gt;s in &lt;code&gt;using&lt;/code&gt; statements.&lt;/p&gt;\n    ","\n&lt;p&gt;You are right, this is related to &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;noreferrer&quot;&gt;SQL injection&lt;/a&gt;, which is a vulnerability that allows a malicioius user to execute arbitrary statements against your database. This old time favorite &lt;a href=&quot;http://xkcd.com/327/&quot; rel=&quot;noreferrer&quot;&gt;XKCD comic&lt;/a&gt; illustrates the concept:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Gz7eb.png&quot; alt=&quot;Her daughter is named Help I&apos;m trapped in a driver&apos;s license factory.&quot;&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In your example, if you just use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT empSalary from employee where salary = &quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; txtSalary.Text;\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; proceed &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt; this query\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You are open to SQL injection. For example, say someone enters txtSalary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;UPDATE&lt;/span&gt; employee &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; salary &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9999999&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; employee; &lt;span class=&quot;hljs-comment&quot;&gt;--&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; etc.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you execute this query, it will perform a &lt;code&gt;SELECT&lt;/code&gt; and an &lt;code&gt;UPDATE&lt;/code&gt; or &lt;code&gt;DROP&lt;/code&gt;, or whatever they wanted. The &lt;code&gt;--&lt;/code&gt; at the end simply comments out the rest of your query, which would be useful in the attack if you were concatenating anything after &lt;code&gt;txtSalary.Text&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The correct way is to use parameterized queries, eg (C#):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;SqlCommand query &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(&quot;SELECT empSalary FROM employee \n                                    WHERE salary = @sal;&quot;);\nquery.Parameters.AddWithValue(&quot;@sal&quot;, txtSalary.Text);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With that, you can safely execute the query. &lt;/p&gt;\n\n&lt;p&gt;For reference on how to avoid SQL injection in several other languages, check &lt;a href=&quot;http://bobby-tables.com/&quot; rel=&quot;noreferrer&quot;&gt;bobby-tables.com&lt;/a&gt;, a website maintained by a &lt;a href=&quot;https://stackoverflow.com/users/8454/andy-lester&quot;&gt;SO user&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to other answers need to add that parameters not only helps prevent sql injection but &lt;strong&gt;can improve performance of queries&lt;/strong&gt;. Sql server caching parameterized query plans and reuse them on repeated queries execution. If you not parameterized your query then &lt;strong&gt;sql server would compile new plan on each query&lt;/strong&gt;(with some exclusion) execution if text of query would differ.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc293623.aspx&quot; rel=&quot;noreferrer&quot;&gt;More information about query plan caching&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Two years after &lt;a href=&quot;https://stackoverflow.com/a/27312318/1585345&quot;&gt;my first go&lt;/a&gt;, I&apos;m recidivating...&lt;/p&gt;\n\n&lt;p&gt;Why do we prefer parameters? SQL injection is obviously a big reason, but could it be that &lt;strong&gt;we&apos;re secretly longing to get back to SQL &lt;em&gt;as a language&lt;/em&gt;&lt;/strong&gt;. SQL in string literals is already a weird cultural practice, but at least you can copy and paste your request into management studio. SQL dynamically constructed with host language conditionals and control structures, when SQL has conditionals and control structures, is just level 0 barbarism. You have to run your app in debug, or with a trace, to see what SQL it generates.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t stop with just parameters. Go all the way and use &lt;strong&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bbsimonbb.QueryFirst&quot; rel=&quot;noreferrer&quot;&gt;QueryFirst&lt;/a&gt;&lt;/strong&gt; (disclaimer: which I wrote). Your SQL lives &lt;em&gt;in a .sql file&lt;/em&gt;. You edit it in the fabulous TSQL editor window, with syntax validation and Intellisense for your tables and columns. You can assign test data in the special comments section and click &quot;play&quot; to run your query right there in the window. Creating a parameter is as easy as putting &quot;@myParam&quot; in your SQL. Then, each time you save, QueryFirst generates the C# wrapper for your query. Your parameters pop up, strongly typed, as arguments to the Execute() methods. Your results are returned in an IEnumerable or List of strongly typed POCOs, the types generated from the actual schema returned by your query. If your query doesn&apos;t run, your app won&apos;t compile. If your db schema changes and your query runs but some columns disappear, the compile error points to &lt;em&gt;the line in your code&lt;/em&gt; that tries to access the missing data. And there are numerous other advantages. &lt;strong&gt;Why would you want to access data any other way?&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In Sql when any word contain @ sign it means it is variable and we use this variable to set value in it and use it on number area on the same sql script because it is only restricted on the single script while you can declare lot of variables of same type and name on many script. We use this variable in stored procedure lot because stored procedure are pre-compiled queries and we can pass values in these variable from script, desktop and websites for further information read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa258839%28v=sql.80%29.aspx&quot; rel=&quot;nofollow&quot;&gt;Declare Local Variable&lt;/a&gt;, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa174792%28v=sql.80%29.aspx&quot; rel=&quot;nofollow&quot;&gt;Sql Stored Procedure&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms161953.aspx&quot; rel=&quot;nofollow&quot;&gt;sql injections&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff648339.aspx&quot; rel=&quot;nofollow&quot;&gt;Protect from sql injection&lt;/a&gt; it will guide how you can protect your database.&lt;/p&gt;\n\n&lt;p&gt;Hope it help you to understand also any question comment me.&lt;/p&gt;\n    ","\n&lt;p&gt;Old post but wanted to ensure newcomers are aware of &lt;strong&gt;Stored procedures&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;My 10¢ worth here is that if you are able to write your SQL statement as a &lt;em&gt;stored procedure&lt;/em&gt;, that in my view is the optimum approach.  I &lt;strong&gt;ALWAYS&lt;/strong&gt; use stored procs and never loop through records in my main code.  For Example: &lt;code&gt;SQL Table &amp;gt; SQL Stored Procedures &amp;gt; IIS/Dot.NET &amp;gt; Class&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;When you use stored procedures, you can restrict the user to &lt;strong&gt;EXECUTE&lt;/strong&gt; permission only, thus &lt;strong&gt;reducing security risks&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Your stored procedure is inherently paramerised, and you can specify input and output parameters.&lt;/p&gt;\n\n&lt;p&gt;The stored procedure (if it returns data via &lt;code&gt;SELECT&lt;/code&gt; statement) can be accessed and read in the exact same way as you would a regular &lt;code&gt;SELECT&lt;/code&gt; statement in your code.  &lt;/p&gt;\n\n&lt;p&gt;It also runs faster as it is compiled on the SQL Server.&lt;/p&gt;\n\n&lt;p&gt;Did I also mention you can do multiple steps, e.g. &lt;code&gt;update&lt;/code&gt; a table, check values on another DB server, and then once finally finished, return data to the client, all on the same server, and no interaction with the client.  So this is MUCH faster than coding this logic in your code.&lt;/p&gt;\n    ","\n&lt;p&gt;Other answers cover why parameters are important, but there is a downside! In .net, there are several methods for creating parameters (Add, AddWithValue), but they all require you to worry, needlessly, about the parameter name, and they all reduce the readability of the SQL in the code. Right when you&apos;re trying to meditate on the SQL, you need to hunt around above or below to see what value has been used in the parameter.&lt;/p&gt;\n\n&lt;p&gt;I humbly claim my little SqlBuilder class is &lt;em&gt;the most elegant way to write parameterized queries&lt;/em&gt;. Your code will look like this...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;var bldr &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlBuilder( myCommand );\nbldr.Append(&quot;SELECT * FROM CUSTOMERS WHERE ID = &quot;).&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;(myId);\n&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt;\nbldr.Append(&quot;SELECT * FROM CUSTOMERS WHERE NAME LIKE &quot;).FuzzyValue(myName);\nmyCommand.CommandText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bldr.ToString();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your code will be shorter and much more readable. You don&apos;t even need extra lines, and, when you&apos;re reading back, you don&apos;t need to hunt around for the value of parameters. The class you need is here...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;System&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Text;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Data;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Data.SqlClient;\n\npublic class SqlBuilder\n{\nprivate StringBuilder _rq;\nprivate SqlCommand _cmd;\nprivate &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _seq;\npublic SqlBuilder(SqlCommand cmd)\n{\n    _rq &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();\n    _cmd &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cmd;\n    _seq &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\npublic SqlBuilder Append(String str)\n{\n    _rq.Append(str);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; this;\n}\npublic SqlBuilder &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;(Object &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n{\n    string paramName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;@SqlBuilderParam&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; _seq&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;;\n    _rq.Append(paramName);\n    _cmd.Parameters.AddWithValue(paramName, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; this;\n}\npublic SqlBuilder FuzzyValue(Object &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n{\n    string paramName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;@SqlBuilderParam&quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; _seq&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;;\n    _rq.Append(&quot;&apos;%&apos; + &quot; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; paramName &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &quot; + &apos;%&apos;&quot;);\n    _cmd.Parameters.AddWithValue(paramName, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; this;\n}\npublic override string ToString()\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _rq.ToString();\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":456,"title":"Why do we always prefer using parameters in SQL statements?","content":"\n                \n&lt;p&gt;I am very new to working with databases. Now I can write &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and &lt;code&gt;INSERT&lt;/code&gt; commands. But I have seen many forums where we prefer to write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empSalary &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; salary &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@salary&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...instead of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empSalary &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; salary &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; txtSalary.Text\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why do we always prefer to use parameters and how would I use them?&lt;/p&gt;\n\n&lt;p&gt;I wanted to know the use and benefits of the first method. I have even heard of SQL injection but I don&apos;t fully understand it. I don&apos;t even know if SQL injection is related to my question.&lt;/p&gt;\n    ","slug":"why-do-we-always-prefer-using-parameters-in-sql-statements-1657388031476","postType":"QUESTION","createdAt":"2022-07-09T17:33:51.000Z","updatedAt":"2022-07-09T17:33:51.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944"},{"title":"Determine Whether Two Date Ranges Overlap","slug":"determine-whether-two-date-ranges-overlap-1657387924335"},{"title":"How do you convert a byte array to a hexadecimal string, and vice versa?","slug":"how-do-you-convert-a-byte-array-to-a-hexadecimal-string-and-vice-versa-1657388010428"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"How to make good reproducible pandas examples","slug":"how-to-make-good-reproducible-pandas-examples-1657384310402"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"Why is using the JavaScript eval function a bad idea?","slug":"why-is-using-the-javascript-eval-function-a-bad-idea-1657387485165"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"What is a NullReferenceException, and how do I fix it?","slug":"what-is-a-nullreferenceexception-and-how-do-i-fix-it-1657384234873"},{"title":"How do I profile C++ code running on Linux?","slug":"how-do-i-profile-c++-code-running-on-linux-1657384754272"},{"title":"Change the maximum upload file size","slug":"change-the-maximum-upload-file-size-1657388495156"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"$(document).ready equivalent without jQuery","slug":"dollar(document).ready-equivalent-without-jquery-1657388504115"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"How do you use bcrypt for hashing passwords in PHP? [duplicate]","slug":"how-do-you-use-bcrypt-for-hashing-passwords-in-php-duplicate-1657387318517"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"How to use SharedPreferences in Android to store, fetch and edit values [closed]","slug":"how-to-use-sharedpreferences-in-android-to-store-fetch-and-edit-values-closed-1657387683057"}]},"__N_SSG":true}