{"pageProps":{"data":{"answer":["\n&lt;h1&gt;What It Is&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;This is an arrow function.&lt;/strong&gt; Arrow functions are a short syntax, introduced by ECMAscript 6, that can be used similarly to the way you would use function expressions. In other words, you can often use them in place of expressions like &lt;code&gt;function (foo) {...}&lt;/code&gt;. But they have some important differences. For example, they do not bind their own values of &lt;code&gt;this&lt;/code&gt; (see below for discussion).&lt;/p&gt;\n&lt;p&gt;Arrow functions are part of the ECMAscript 6 specification. They are not yet supported in all browsers, but they are partially or fully supported &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; rel=&quot;noreferrer&quot;&gt;in Node v. 4.0+&lt;/a&gt; and in most modern browsers in use as of 2018. (Ive included a partial list of supporting browsers below).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;You can read more in &lt;strong&gt;the Mozilla documentation&lt;/strong&gt; on arrow functions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;From the Mozilla documentation:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An arrow function expression (also known as fat arrow function) has a shorter syntax compared to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot; rel=&quot;noreferrer&quot;&gt;function expressions&lt;/a&gt; and lexically binds the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value (does not bind its own &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;new.target&lt;/code&gt;&lt;/a&gt;). Arrow functions are always anonymous. These function expressions are best suited for non-method functions and they can not be used as constructors.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;A Note on How &lt;code&gt;this&lt;/code&gt; Works in Arrow Functions&lt;/h2&gt;\n&lt;p&gt;One of the most handy features of an arrow function is buried in the text above:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An arrow function... lexically binds the &lt;code&gt;this&lt;/code&gt; value (does not bind its own &lt;code&gt;this&lt;/code&gt;...)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;What this means in simpler terms is that the arrow function retains the &lt;code&gt;this&lt;/code&gt; value from its context and does not have its own &lt;code&gt;this&lt;/code&gt;. A traditional function &lt;em&gt;may&lt;/em&gt; bind its own &lt;code&gt;this&lt;/code&gt; value, depending on how it is defined and called. This can require lots of gymnastics like &lt;code&gt;self = this;&lt;/code&gt;, etc., to access or manipulate &lt;code&gt;this&lt;/code&gt; from one function inside another function. For more info on this topic, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this&quot; rel=&quot;noreferrer&quot;&gt;the explanation and examples in the Mozilla documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;Example Code&lt;/h1&gt;\n&lt;p&gt;Example (also from the docs):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night &apos;til the sun&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night to get some&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night for good fun&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night to get lucky&quot;&lt;/span&gt;\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// These two assignments are equivalent:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Old-school:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; });\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ECMAscript 6 using arrow functions&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a3 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; );\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// both a2 and a3 will be equal to [31, 30, 31, 31]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;Notes on Compatibility&lt;/h1&gt;\n&lt;p&gt;You can use arrow functions in Node, but browser support is spotty.&lt;/p&gt;\n&lt;p&gt;Browser support for this functionality has improved quite a bit, but it still is not widespread enough for most browser-based usages. As of December 12, 2017, it is supported in current versions of:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Chrome (v. 45+)&lt;/li&gt;\n&lt;li&gt;Firefox (v. 22+)&lt;/li&gt;\n&lt;li&gt;Edge (v. 12+)&lt;/li&gt;\n&lt;li&gt;Opera (v. 32+)&lt;/li&gt;\n&lt;li&gt;Android Browser (v. 47+)&lt;/li&gt;\n&lt;li&gt;Opera Mobile (v. 33+)&lt;/li&gt;\n&lt;li&gt;Chrome for Android (v. 47+)&lt;/li&gt;\n&lt;li&gt;Firefox for Android (v. 44+)&lt;/li&gt;\n&lt;li&gt;Safari (v. 10+)&lt;/li&gt;\n&lt;li&gt;iOS Safari (v. 10.2+)&lt;/li&gt;\n&lt;li&gt;Samsung Internet (v. 5+)&lt;/li&gt;\n&lt;li&gt;Baidu Browser (v. 7.12+)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Not supported in:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;IE (through v. 11)&lt;/li&gt;\n&lt;li&gt;Opera Mini (through v. 8.0)&lt;/li&gt;\n&lt;li&gt;Blackberry Browser (through v. 10)&lt;/li&gt;\n&lt;li&gt;IE Mobile (through v. 11)&lt;/li&gt;\n&lt;li&gt;UC Browser for Android (through v. 11.4)&lt;/li&gt;\n&lt;li&gt;QQ (through v. 1.2)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can find more (and more current) information at &lt;a href=&quot;https://caniuse.com/#feat=arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;CanIUse.com&lt;/a&gt; (no affiliation).&lt;/p&gt;\n    ","\n&lt;p&gt;That&apos;s known as an Arrow Function, part of the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015 spec&lt;/a&gt;...&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ab&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt; =&amp;gt;&lt;/span&gt; f.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;hljs-comment&quot;&gt;// 1,2,3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Shorter syntax than the previous:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt; ES6:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ab&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;hljs-comment&quot;&gt;// 1,2,3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.es6fiddle.net/hxy1g4ey/&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The other awesome thing is &lt;em&gt;lexical&lt;/em&gt; &lt;code&gt;this&lt;/code&gt;... Usually, you&apos;d do something like:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startCounting&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;startCounting&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this is the Window, not Foo {}, as you might expect&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [object Window]&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// that&apos;s why we reassign this to self before setInterval()&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(self.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;);\n    self.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;++;\n  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;But that could be rewritten with the arrow like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startCounting&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;startCounting&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [object Object]&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1, 2, 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;++;\n  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.es6fiddle.net/hxy2anuu/&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt;&lt;/em&gt;&lt;br&gt;\n&lt;em&gt;&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax&quot; rel=&quot;noreferrer&quot;&gt;More on Syntax&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;For more, &lt;a href=&quot;https://stackoverflow.com/questions/22939130/when-should-i-use-arrow-functions-in-ecmascript-6&quot;&gt;here&apos;s&lt;/a&gt; a pretty good answer for &lt;em&gt;when&lt;/em&gt; to use arrow functions.&lt;/p&gt;\n    ","\n&lt;h1&gt;These are Arrow Functions&lt;/h1&gt;\n&lt;p&gt;Also known as &lt;strong&gt;Fat Arrow Functions&lt;/strong&gt;. They&apos;re a clean and consise way to write function expressions, e.g. &lt;code&gt;function() {}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Arrow Functions can remove the need of &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; when defining functions. They are one-liners, similar to Lambda Expressions in Java or Python.&lt;/p&gt;\n&lt;h2&gt;Example with no parameters&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sharon&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextCustomer&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; queue[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;nextCustomer&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;Dave&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If multiple statements need to be made within the same Arrow Function, you need to wrap, in this example, &lt;code&gt;queue[0]&lt;/code&gt; in curley brackets &lt;code&gt;{}&lt;/code&gt;. In this case the return statement cannot be omitted.&lt;/p&gt;\n&lt;h2&gt;Example with 1 parameter&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sharon&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt; = name =&amp;gt; {\n  queue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(name);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Toby&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(queue); &lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;Dave&apos;, &apos;Sarah&apos;, &apos;Sharon&apos;, &apos;Toby&apos;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can omit &lt;code&gt;{}&lt;/code&gt; from the above.&lt;/p&gt;\n&lt;p&gt;When there is a single parameter, the brackets &lt;code&gt;()&lt;/code&gt; around the parameter can be omitted.&lt;/p&gt;\n&lt;h2&gt;Example with multiple parameters&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addNumbers&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) =&amp;gt; x + y\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;addNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;A useful example&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fruits = [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Bananna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we wanted to get the price of every fruit in a single array, in ES5 we could do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;fruits.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fruit&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fruit.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;;\n}); &lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3, 1]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In ES6 with the new Arrow Functions, we can make this more concise:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;fruits.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;fruit&lt;/span&gt; =&amp;gt;&lt;/span&gt; fruit.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3, 1]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Additional information on Arrow Functions can be found &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This would be the &quot;arrow function expression&quot; introduced in ECMAScript 6.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For historical purposes (if the wiki page changes later), it is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value. Arrow functions are always anonymous.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;just to add another example of what a lambda can do without using map:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nb = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt; a * b; \n&lt;span class=&quot;hljs-comment&quot;&gt;// OR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt; { (any logic); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b };\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt;(a,b)) \n&lt;span class=&quot;hljs-comment&quot;&gt;// 20&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As others have said, it&apos;s a new syntax to create functions.&lt;/p&gt;\n\n&lt;p&gt;However, this kind of functions differ from normal ones:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;They bind the &lt;code&gt;this&lt;/code&gt; value. As explained by &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;the spec&lt;/a&gt;,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An &lt;em&gt;ArrowFunction&lt;/em&gt; does not define local bindings for &lt;code&gt;arguments&lt;/code&gt;,\n  &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, or &lt;code&gt;new.target&lt;/code&gt;. Any reference to &lt;code&gt;arguments&lt;/code&gt;,\n  &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, or &lt;code&gt;new.target&lt;/code&gt; within an &lt;em&gt;ArrowFunction&lt;/em&gt; must\n  resolve to a binding in a lexically enclosing environment. Typically\n  this will be the Function Environment of an immediately enclosing\n  function.&lt;/p&gt;\n  \n  &lt;p&gt;Even though an &lt;em&gt;ArrowFunction&lt;/em&gt; may contain references to &lt;code&gt;super&lt;/code&gt;, the\n  function object created in step 4 is not made into a method by\n  performing &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-makemethod&quot; rel=&quot;noreferrer&quot;&gt;MakeMethod&lt;/a&gt;. An &lt;em&gt;ArrowFunction&lt;/em&gt; that references &lt;code&gt;super&lt;/code&gt;\n  is always contained within a non-&lt;em&gt;ArrowFunction&lt;/em&gt; and the necessary\n  state to implement &lt;code&gt;super&lt;/code&gt; is accessible via the &lt;em&gt;scope&lt;/em&gt; that is\n  captured by the function object of the &lt;em&gt;ArrowFunction&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;They are non-constructors.&lt;/p&gt;\n\n&lt;p&gt;That means they have no [[Construct]] internal method, and thus can&apos;t be instantiated, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt; = a =&amp;gt; a;\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// 123&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// TypeError: f is not a constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I&apos;ve read, this is a symbol of &lt;code&gt;Arrow Functions&lt;/code&gt; in &lt;code&gt;ES6&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;using &lt;code&gt;Arrow Function&lt;/code&gt; can be written as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a3 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot;&gt;MDN Docs&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Dissatisfied with the other answers. The top voted answer as of 2019/3/13 is factually wrong.&lt;/p&gt;\n&lt;p&gt;The short terse version of what &lt;code&gt;=&amp;gt;&lt;/code&gt; means is it&apos;s a shortcut writing a function &lt;strong&gt;AND&lt;/strong&gt; for binding it to the current &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; = a =&amp;gt; a * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is effectively a shortcut for&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see all the things that got shortened. We didn&apos;t need &lt;code&gt;function&lt;/code&gt;, nor &lt;code&gt;return&lt;/code&gt; nor &lt;code&gt;.bind(this)&lt;/code&gt; nor even braces or parentheses&lt;/p&gt;\n&lt;p&gt;A slightly longer example of an arrow function might be&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;width, height&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; area = width * height;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; area;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Showing that if we want multiple arguments to the function we need parentheses and if we want write more than a single expression we need braces and an explicit &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s important to understand the &lt;code&gt;.bind&lt;/code&gt; part and it&apos;s a big topic. It has to do with what &lt;code&gt;this&lt;/code&gt; means in JavaScript.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ALL&lt;/strong&gt; functions have an implicit parameter called &lt;code&gt;this&lt;/code&gt;. How &lt;code&gt;this&lt;/code&gt; is set when calling a function depends on how that function is called.&lt;/p&gt;\n&lt;p&gt;Take&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you call it normally&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; will be the global object.&lt;/p&gt;\n&lt;p&gt;If you&apos;re in strict mode&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;`use strict`&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-string&quot;&gt;`use strict`&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will be &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;You can set &lt;code&gt;this&lt;/code&gt; directly using &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(msg, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj1 = {&lt;span class=&quot;hljs-attr&quot;&gt;abc&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj2 = {&lt;span class=&quot;hljs-attr&quot;&gt;def&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;}\n\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj1, &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hello {abc: 123}&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(obj2, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hi {def: 456}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also set &lt;code&gt;this&lt;/code&gt; implicitly using the dot operator &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(msg, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n   &lt;span class=&quot;hljs-attr&quot;&gt;abc&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: foo,\n}\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hola&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hola {abc:123, bar: f}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A problem comes up when you want to use a function as a callback or a listener. You make class and want to assign a function as the callback that accesses an instance of the class.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// won&apos;t work&lt;/span&gt;\n    }); \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code above will not work because when the element fires the event and calls the function the &lt;code&gt;this&lt;/code&gt; value will not be the instance of the class.&lt;/p&gt;\n&lt;p&gt;One common way to solve that problem is to use &lt;code&gt;.bind&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); \n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;=========== ADDED! ===========&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because the arrow syntax does the same thing we can write&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); \n    });\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; effectively &lt;em&gt;makes a new function&lt;/em&gt;. If &lt;code&gt;bind&lt;/code&gt; did not exist you could basically make your own like this&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToBind, valueToUseForThis&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) {\n    functionToBind.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(valueToUseForThis, ...args);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In older JavaScript without the spread operator it would be&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToBind, valueToUseForThis&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    functionToBind.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(valueToUseForThis, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Understanding that code requires &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;nofollow noreferrer&quot;&gt;an understanding of closures&lt;/a&gt; but the short version is &lt;code&gt;bind&lt;/code&gt; makes a new function that always calls the original function with the &lt;code&gt;this&lt;/code&gt; value that was bound to it. Arrow functions do the same thing since they are a shortcut for &lt;code&gt;bind(this)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Adding simple CRUD example with Arrowfunction&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//Arrow Function&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; customers   = [\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9192631770&apos;&lt;/span&gt;\n   },\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9192631770&apos;&lt;/span&gt;\n   },\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Akhil&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9928462656&apos;&lt;/span&gt; \n   }],\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// No Param READ&lt;/span&gt;\n getFirstCustomer = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { \n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; customers[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n };\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getFirstCustomer&lt;/span&gt;())); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;Dave&apos; &lt;/span&gt;\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//1 Param SEARCH&lt;/span&gt;\n  getNthCustomer = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;=&amp;gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( index&amp;gt;customers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n    {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&quot;No such thing&quot;&lt;/span&gt;;\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; customers[index];\n     } \n  };\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nth Customer is &quot;&lt;/span&gt; +&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNthCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))); \n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//2params ADD&lt;/span&gt;\n  addCustomer = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, contact&lt;/span&gt;)=&amp;gt;&lt;/span&gt; customers.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: name,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;contact&apos;&lt;/span&gt;:contact\n    });\n  &lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hitesh&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;8888813275&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Added Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers)); \n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//2 param UPDATE&lt;/span&gt;\n  updateCustomerName = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, newName&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{customers[index].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;= newName};\n  &lt;span class=&quot;hljs-title function_&quot;&gt;updateCustomerName&lt;/span&gt;(customers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;HiteshSahu&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Updated Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers));\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//1 param DELETE&lt;/span&gt;\n  removeCustomer = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;customerToRemove&lt;/span&gt;) =&amp;gt;&lt;/span&gt; customers.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(customerToRemove);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;removeCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getFirstCustomer&lt;/span&gt;());\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Removed Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers)); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Arrow functions which is denoted by symbol (=&amp;gt;) helps you to create anonymous functions and methods. That leads to more shorter syntax. For example, below is a simple Add function which returns addition of two numbers.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num1 , num2 &lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num1 + num2;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above function becomes shorter by using Arrow syntax as shown below.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/K4eFd.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/K4eFd.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Above code has two parts as shown in the above diagram: -&lt;/p&gt;\n\n&lt;p&gt;Input:This section specifies the input parameters to the anonymous function.&lt;/p&gt;\n\n&lt;p&gt;Logic:This section comes after the symbol =&amp;gt;. This section has the logic of the actual function.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Many developers think that arrow function makes your syntax shorter, simpler and thus makes your code readable.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;If you believe the above sentence, then let me assure you its a myth. If you think for a moment a properly written function with name is much readable than cryptic functions created in one line using an arrow symbol.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The main use of arrow function is to ensure that code runs in the\n  callers context.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;See the below code in which have a global variable &quot;context&quot; defined , this global variable is accessed inside a function &quot;SomeOtherMethod&quot; which is called from other method &quot;SomeMethod&quot;.&lt;/p&gt;\n\n&lt;p&gt;This &quot;SomeMethod&quot; has local &quot;context&quot; variable. Now because &quot;SomeOtherMethod&quot; is called from &quot;&quot;SomeMethod&quot; we expect it to display &quot;local context&quot; , but it displays &quot;global context&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; context;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeOtherMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt; = local context;\n&lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeMethod&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But if replace the call by using Arrow function it will display &quot;local context&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-string&quot;&gt;&quot;global context&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;local context&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeMethod&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would encourage you to read this link ( &lt;a href=&quot;https://medium.com/@shivprasadkoirala/arrow-function-in-javascript-471d13ad0af2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arrow function in JavaScript&lt;/a&gt; ) which explain all the scenarios of javascript context and in which scenarios the callers context is not respected.&lt;/p&gt;\n\n&lt;p&gt;You can also see the demonstration of &lt;a href=&quot;https://www.youtube.com/watch?v=ik3RWl_-U3o&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arrow function with javascript in this youtube video&lt;/a&gt; which demonstrates practically the term Context.&lt;/p&gt;\n    ","\n&lt;p&gt;As all of the other answers have already said, it&apos;s part of ES2015 arrow function syntax. More specifically, it&apos;s not an operator, it&apos;s a punctuator token that separates the parameters from the body: &lt;code&gt;ArrowFunction : ArrowParameters =&amp;gt; ConciseBody&lt;/code&gt;. E.g. &lt;code&gt;(params) =&amp;gt; { /* body */ }&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As others have stated, regular (traditional) functions use &lt;code&gt;this&lt;/code&gt; from the object that called the function, &lt;em&gt;(e.g. a button that was clicked)&lt;/em&gt;. Instead, arrow functions use &lt;code&gt;this&lt;/code&gt; from the object that defines the function.&lt;/p&gt;\n\n&lt;p&gt;Consider two almost identical functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;regular = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos; Identical Part Here;\n}\n\n\narrow = () =&amp;gt; {\n  &apos;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Identical&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Part&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Here&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The snippet below demonstrates the fundamental difference between what &lt;code&gt;this&lt;/code&gt; represents for each function.  The &lt;strong&gt;&lt;em&gt;regular function&lt;/em&gt;&lt;/strong&gt; outputs &lt;code&gt;[object HTMLButtonElement]&lt;/code&gt; whereas the &lt;strong&gt;&lt;em&gt;arrow function&lt;/em&gt;&lt;/strong&gt; outputs &lt;code&gt;[object Window]&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Regular: `this` comes from &quot;this button&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Arrow: `this` comes from object that defines the function&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  regular = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n\n  arrow = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, regular);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, arrow);\n &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;code&gt;ES6&lt;/code&gt; Arrow functions:&lt;/h2&gt;\n\n&lt;p&gt;In javascript the &lt;code&gt;=&amp;gt;&lt;/code&gt; is the symbol of an arrow function expression. A arrow function expression does not have its own &lt;code&gt;this&lt;/code&gt; binding and therefore cannot be used as a constructor function. for example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; words = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi from outside object&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;words&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi from inside object&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;talk1&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;words&lt;/span&gt;)},\n  &lt;span class=&quot;hljs-attr&quot;&gt;talk2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;words&lt;/span&gt;)}\n}\n\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;talk1&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// doesn&apos;t have its own this binding, this === window&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;talk2&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// does have its own this binding, this is obj&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Rules of using arrow functions:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If there is &lt;strong&gt;exactly&lt;/strong&gt; one argument you can omit the parentheses of the argument.&lt;/li&gt;\n&lt;li&gt;If you return an expression and do this on the same line you can omit the &lt;code&gt;{}&lt;/code&gt; and the &lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;times2&lt;/span&gt; = val =&amp;gt; val * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;  \n&lt;span class=&quot;hljs-comment&quot;&gt;// It is on the same line and returns an expression therefore the {} are ommited and the expression returns implictly&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// there also is only one argument, therefore the parentheses around the argument are omitted&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;times2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;JavaScript arrow functions are roughly the equivalent of lambda functions in python or blocks in Ruby. &lt;strong&gt;These are anonymous functions&lt;/strong&gt; with their own special syntax and &lt;strong&gt;operate in the context of their enclosing scope&lt;/strong&gt;. This mean they do not have their own &quot;this&quot; but instead access the one from the immediate enclosing function.&lt;/p&gt;\n&lt;p&gt;From the &lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-arrow-function-definitions-runtime-semantics-evaluation&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA standard&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An ArrowFunction does not define local bindings for &lt;strong&gt;arguments&lt;/strong&gt;,\n&lt;strong&gt;super&lt;/strong&gt;, &lt;strong&gt;this&lt;/strong&gt;, or &lt;strong&gt;new.target&lt;/strong&gt;. Any reference to arguments, super, this, or new.target within an ArrowFunction must resolve to a\nbinding in a lexically enclosing environment. Typically this will be\nthe Function Environment of an immediately enclosing function.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Often you can read &quot;an arrow function expression is a compact alternative to a traditional function expression&quot;, this is not a correct. &lt;strong&gt;Arrow function are NOT a shorthand for traditional function&lt;/strong&gt;, they behave differently that traditional function.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Traditional Function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create their own scope inside the function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arrow Function &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Do NOT create their own scope&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (Each step along the way is a valid &quot;arrow function&quot;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Remove the word &quot;function&quot; and place arrow between the argument and opening body bracket&lt;/span&gt;\n(a) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. Remove the body braces and word &quot;return&quot; -- the return is implied.&lt;/span&gt;\n(a) =&amp;gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3. Remove the argument parentheses (only valid with exactly one argument)&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":436,"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","content":"\n                \n&lt;p&gt;I know that the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator means more than or equal to, but I&apos;ve seen &lt;code&gt;=&amp;gt;&lt;/code&gt; in some source code. What&apos;s the meaning of that operator?&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;promiseTargetFile&lt;/span&gt;(fpParams, aSkipPrompt, relatedURI).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;aDialogAccepted&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!aDialogAccepted)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n\n    saveAsType = fpParams.&lt;span class=&quot;hljs-property&quot;&gt;saveAsType&lt;/span&gt;;\n    file = fpParams.&lt;span class=&quot;hljs-property&quot;&gt;file&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;continueSave&lt;/span&gt;();\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Components&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;utils&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reportError&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118","postType":"QUESTION","createdAt":"2022-07-09T17:32:57.000Z","updatedAt":"2022-07-09T17:32:57.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"The 3 different equals","slug":"the-3-different-equals-1657385490242"},{"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"How do I format a date in JavaScript?","slug":"how-do-i-format-a-date-in-javascript-1657384649498"},{"title":"Passing data between view controllers","slug":"passing-data-between-view-controllers-1657384540021"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"How can I access and process nested objects, arrays, or JSON?","slug":"how-can-i-access-and-process-nested-objects-arrays-or-json-1657384332823"},{"title":"Convert Rows to columns using 'Pivot' in SQL Server","slug":"convert-rows-to-columns-using-'pivot'-in-sql-server-1657388372528"},{"title":"What is The Rule of Three?","slug":"what-is-the-rule-of-three-1657384390295"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"},{"title":"How do I write a correct micro-benchmark in Java?","slug":"how-do-i-write-a-correct-micro-benchmark-in-java-1657384488725"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Why use getters and setters/accessors?","slug":"why-use-getters-and-settersaccessors-1657387343971"}]},"__N_SSG":true}