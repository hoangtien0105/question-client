{"pageProps":{"data":{"answer":["\n&lt;p&gt;Python includes a profiler called &lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-cProfile&quot; rel=&quot;noreferrer&quot;&gt;cProfile&lt;/a&gt;. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.&lt;/p&gt;\n\n&lt;p&gt;You can call it from within your code, or from the interpreter, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile\ncProfile.run(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo()&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even more usefully, you can invoke the cProfile when running a script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile myscript.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make it even easier, I made a little batch file called &apos;profile.bat&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile %&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So all I have to do is run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;profile euler048.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And I get this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&amp;lt;lambda&amp;gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&amp;lt;module&amp;gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method &apos;disable&apos; of &apos;_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: Updated link to a good video resource from PyCon 2013 titled \n&lt;a href=&quot;https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;em&gt;Python Profiling&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://www.youtube.com/watch?v=QJwVYlDzAXs&quot; rel=&quot;noreferrer&quot;&gt;Also via YouTube&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;A while ago I made &lt;a href=&quot;http://pycallgraph.slowchop.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pycallgraph&lt;/code&gt;&lt;/a&gt; which generates a visualisation from your Python code. &lt;strong&gt;Edit:&lt;/strong&gt; I&apos;ve updated the example to work with 3.3, the latest release as of this writing.&lt;/p&gt;\n\n&lt;p&gt;After a &lt;code&gt;pip install pycallgraph&lt;/code&gt; and installing &lt;a href=&quot;http://www.graphviz.org/&quot; rel=&quot;noreferrer&quot;&gt;GraphViz&lt;/a&gt; you can run it from the command line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pycallgraph graphviz -- ./mypythonscript.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, you can profile particular parts of your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pycallgraph &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; PyCallGraph\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pycallgraph.output &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; GraphvizOutput\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; PyCallGraph(output=GraphvizOutput()):\n    code_to_profile()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Either of these will generate a &lt;code&gt;pycallgraph.png&lt;/code&gt; file similar to the image below:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/aiNEA.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s worth pointing out that using the profiler only works (by default) on the main thread, and you won&apos;t get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the &lt;a href=&quot;http://docs.python.org/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;profiler documentation&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you also want to profile threads, you&apos;ll want to look at the &lt;a href=&quot;http://docs.python.org/library/threading.html#threading.setprofile&quot; rel=&quot;noreferrer&quot; title=&quot;threading.setprofile() function&quot;&gt;&lt;code&gt;threading.setprofile()&lt;/code&gt; function&lt;/a&gt; in the docs.&lt;/p&gt;\n\n&lt;p&gt;You could also create your own &lt;code&gt;threading.Thread&lt;/code&gt; subclass to do it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProfiledThread&lt;/span&gt;(threading.Thread):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Overrides threading.Thread.run()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        profiler = cProfile.Profile()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; profiler.runcall(threading.Thread.run, self)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n            profiler.dump_stats(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myprofile-%d.profile&apos;&lt;/span&gt; % (self.ident,))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use that &lt;code&gt;ProfiledThread&lt;/code&gt; class instead of the standard one.  It might give you more flexibility, but I&apos;m not sure it&apos;s worth it, especially if you are using third-party code which wouldn&apos;t use your class.&lt;/p&gt;\n    ","\n&lt;p&gt;The python wiki is a great page for profiling resources:\n&lt;a href=&quot;http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code&quot; rel=&quot;noreferrer&quot;&gt;http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;as is the python docs:\n&lt;a href=&quot;http://docs.python.org/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.python.org/library/profile.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;as shown by Chris Lawlor cProfile is a great tool and can easily be used to print to the screen:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -s time mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or to file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -o output.file mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS&amp;gt; If you are using Ubuntu, make sure to install python-profile&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;apt-get install python-profiler \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you output to file you can get nice visualizations using the following tools&lt;/p&gt;\n\n&lt;p&gt;PyCallGraph : a tool to create call graph images &lt;br&gt;\n  install:&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pip install pycallgraph\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pycallgraph mine.py args\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;view:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; gimp pycallgraph.png\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;You can use whatever you like to view the png file, I used gimp&lt;/em&gt;&lt;br&gt;\nUnfortunately I often get &lt;/p&gt;\n\n&lt;p&gt;dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.257079 to fit&lt;/p&gt;\n\n&lt;p&gt;which makes my images unusably small.  So I generally create svg files:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pycallgraph -f svg -o pycallgraph.svg mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS&amp;gt; make sure to install graphviz (which provides the dot program):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install graphviz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternative Graphing using gprof2dot via @maxy / @quodlibetor :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install gprof2dot\npython -m cProfile -o profile.pstats mine.py\ngprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@Maxy&apos;s comment on &lt;a href=&quot;https://stackoverflow.com/a/7693928/25616&quot;&gt;this answer&lt;/a&gt; helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn&apos;t want to re-run things with pycallgraph, so I used &lt;a href=&quot;https://github.com/jrfonseca/gprof2dot&quot; rel=&quot;noreferrer&quot;&gt;gprof2dot&lt;/a&gt;, and got pretty svgs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ sudo apt-get install graphviz\n$ git clone https://github.com/jrfonseca/gprof2dot\n$ ln -s &lt;span class=&quot;hljs-string&quot;&gt;&quot;$PWD&quot;&lt;/span&gt;/gprof2dot/gprof2dot.py ~/&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;\n$ cd $PROJECT_DIR\n$ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and BLAM!&lt;/p&gt;\n&lt;p&gt;It uses dot (the same thing that pycallgraph uses) so output looks similar. I get the impression that gprof2dot loses less information though:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JjSvt.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JjSvt.png&quot; alt=&quot;gprof2dot example output&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Simplest&lt;/strong&gt; and &lt;strong&gt;quickest&lt;/strong&gt; way to find where all the time is going.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; pip install snakeviz\n\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; python -m cProfile -o temp.dat &amp;lt;PROGRAM&amp;gt;.py\n\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; snakeviz temp.dat\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Draws a pie chart in a browser. Biggest piece is the problem function. Very simple.&lt;/p&gt;\n    ","\n&lt;p&gt;I ran into a handy tool called &lt;a href=&quot;https://jiffyclub.github.io/snakeviz/&quot;&gt;SnakeViz&lt;/a&gt; when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with &lt;code&gt;%prun&lt;/code&gt; and then do analysis in SnakeViz.&lt;/p&gt;\n\n&lt;p&gt;The main viz technique used is &lt;strong&gt;Sunburst chart&lt;/strong&gt; as shown below, in which the hierarchy of function calls is arranged as layers of arcs and time info encoded in their angular widths.&lt;/p&gt;\n\n&lt;p&gt;The best thing is you can interact with the chart. For example, to zoom in one can click on an arc, and the arc and its descendants will be enlarged as a new sunburst to display more details.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/kCmSY.png&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/kCmSY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; is great for profiling, while &lt;a href=&quot;https://kcachegrind.github.io/html/Home.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;kcachegrind&lt;/code&gt;&lt;/a&gt; is great for visualizing the results. The &lt;a href=&quot;https://pypi.python.org/pypi/pyprof2calltree&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pyprof2calltree&lt;/code&gt;&lt;/a&gt; in between handles the file conversion.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -o script.profile script.py\npyprof2calltree -i script.profile -o script.calltree\nkcachegrind script.calltree\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Required system packages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;kcachegrind&lt;/code&gt; (Linux), &lt;code&gt;qcachegrind&lt;/code&gt; (MacOs)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Setup on Ubuntu:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;apt-get install kcachegrind \npip install pyprof2calltree\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1TFZe.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1TFZe.png&quot; alt=&quot;Screenshot of the result&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I recently created &lt;a href=&quot;https://github.com/nschloe/tuna&quot; rel=&quot;noreferrer&quot;&gt;tuna&lt;/a&gt; for visualizing Python runtime and import profiles; this may be helpful here.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZpP6M.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZpP6M.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Install with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install tuna\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create a runtime profile&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python3 -m cProfile -o program.prof yourfile.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or an import profile (Python 3.7+ required)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python3 -X importprofile yourfile.py &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;.log\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then just run tuna on the file&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;tuna program.prof\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also worth mentioning is the GUI cProfile dump viewer &lt;a href=&quot;http://www.vrplumber.com/programming/runsnakerun/&quot;&gt;RunSnakeRun&lt;/a&gt;.  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls.&lt;/p&gt;\n\n&lt;p&gt;The descriptive information is very helpful.  It shows you the code for that bit which can be helpful when you are dealing with built-in library calls.  It tells you what file and what line to find the code.&lt;/p&gt;\n\n&lt;p&gt;Also want to point at that the OP said &apos;profiling&apos; but it appears he meant &apos;timing&apos;.  Keep in mind programs will run slower when profiled.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/2GahD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;pprofile&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; (already presented here) also inspired  &lt;a href=&quot;https://github.com/vpelletier/pprofile&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pprofile&lt;/code&gt;&lt;/a&gt;, which is described as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Line-granularity, thread-aware deterministic and statistic pure-python\n  profiler&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It provides line-granularity as &lt;code&gt;line_profiler&lt;/code&gt;, is pure Python, can be used as a standalone command or a module, and can even generate callgrind-format files that can be easily analyzed with &lt;code&gt;[k|q]cachegrind&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;vprof&lt;/h1&gt;\n\n&lt;p&gt;There is also &lt;a href=&quot;https://github.com/nvdv/vprof&quot; rel=&quot;noreferrer&quot;&gt;vprof&lt;/a&gt;, a Python package described as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[...] providing rich and interactive visualizations for various Python program characteristics such as running time and memory usage.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uafO3.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uafO3.png&quot; alt=&quot;heatmap&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded &lt;a href=&quot;http://packages.python.org/line_profiler/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn&apos;t catch the time I was spending in say numpy.dot.&lt;/p&gt;\n    ","\n&lt;p&gt;The terminal-only (and simplest) solution, in case all those fancy UI&apos;s fail to install or to run:&lt;br&gt;\nignore &lt;code&gt;cProfile&lt;/code&gt; completely and replace it with &lt;code&gt;pyinstrument&lt;/code&gt;, that will collect and display the tree of calls right after execution.&lt;/p&gt;\n\n&lt;p&gt;Install:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ pip install pyinstrument\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Profile and display result:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python -m pyinstrument ./prog.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Works with python2 and 3.&lt;/p&gt;\n\n&lt;p&gt;[EDIT]\nThe documentation of the API, for profiling only a part of the code, can be found &lt;a href=&quot;https://github.com/joerick/pyinstrument#profile-a-specific-chunk-of-code&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a lot of great answers but they either use command line or some external program for profiling and/or sorting the results.&lt;/p&gt;\n&lt;p&gt;I really missed some way I could use in my IDE (eclipse-PyDev) without touching the command line or installing anything. So here it is.&lt;/p&gt;\n&lt;h1&gt;Profiling without command line&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sqrt\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        sqrt(x)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile, pstats\n    cProfile.run(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count()&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}.profile&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__file__))\n    s = pstats.Stats(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{}.profile&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__file__))\n    s.strip_dirs()\n    s.sort_stats(&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;).print_stats(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://docs.python.org/3.4/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; or other answers for more info.&lt;/p&gt;\n    ","\n&lt;p&gt;Following Joe Shaw&apos;s answer about multi-threaded code not to work as expected, I figured that the &lt;code&gt;runcall&lt;/code&gt; method in cProfile is merely doing &lt;code&gt;self.enable()&lt;/code&gt; and &lt;code&gt;self.disable()&lt;/code&gt; calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code.&lt;/p&gt;\n    ","\n&lt;p&gt;With a statistical profiler like &lt;a href=&quot;https://github.com/P403n1x87/austin&quot; rel=&quot;noreferrer&quot;&gt;austin&lt;/a&gt;, no instrumentation is required, meaning that you can get profiling data out of a Python application simply with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;austin python3 my_script.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The raw output isn&apos;t very useful, but you can pipe that to &lt;a href=&quot;https://github.com/brendangregg/FlameGraph/blob/master/flamegraph.pl&quot; rel=&quot;noreferrer&quot;&gt;flamegraph.pl&lt;/a&gt;\nto get a flame graph representation of that data that gives you a breakdown of where the time (measured in microseconds of real time) is being spent.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;austin python3 my_script.py | flamegraph.pl &amp;gt; my_script_profile.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can also use the web application &lt;a href=&quot;http://speedscope.app/&quot; rel=&quot;noreferrer&quot;&gt;Speedscope.app&lt;/a&gt; for quick visualisation of the collected samples. If you have &lt;a href=&quot;https://github.com/google/pprof&quot; rel=&quot;noreferrer&quot;&gt;pprof&lt;/a&gt; installed, you can also get &lt;a href=&quot;https://github.com/P403n1x87/austin-python&quot; rel=&quot;noreferrer&quot;&gt;austin-python&lt;/a&gt; (with e.g. &lt;code&gt;pipx install austin-python&lt;/code&gt;) and use the &lt;code&gt;austin2pprof&lt;/code&gt; to covert to the pprof format.&lt;/p&gt;\n&lt;p&gt;However, if you have VS Code installed you could use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode&quot; rel=&quot;noreferrer&quot;&gt;Austin extension&lt;/a&gt; for a more interactive experience, with source code heat maps, top functions and collected call stacks&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://github.com/P403n1x87/austin-vscode/raw/main/art/demo.gif&quot; alt=&quot;Austin VS Code extension&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In Virtaal&apos;s &lt;a href=&quot;https://github.com/translate/virtaal/blob/master/devsupport/profiling.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;source&lt;/a&gt; there&apos;s a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to make a cumulative profiler,\nmeaning to run the function several times in a row and watch the sum of the results.&lt;/p&gt;\n\n&lt;p&gt;you can use this &lt;code&gt;cumulative_profiler&lt;/code&gt; decorator:&lt;/p&gt;\n\n&lt;p&gt;it&apos;s python &amp;gt;= 3.6 specific, but you can remove &lt;code&gt;nonlocal&lt;/code&gt; for it work on older versions.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile, pstats\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;_ProfileFunc&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, func, sort_stats_by&lt;/span&gt;):\n        self.func =  func\n        self.profile_runs = []\n        self.sort_stats_by = sort_stats_by\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n        pr = cProfile.Profile()\n        pr.enable()  &lt;span class=&quot;hljs-comment&quot;&gt;# this is the profiling section&lt;/span&gt;\n        retval = self.func(*args, **kwargs)\n        pr.disable()\n\n        self.profile_runs.append(pr)\n        ps = pstats.Stats(*self.profile_runs).sort_stats(self.sort_stats_by)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval, ps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cumulative_profiler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;amount_of_times, sort_stats_by=&lt;span class=&quot;hljs-string&quot;&gt;&apos;time&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;real_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;nonlocal&lt;/span&gt; function, amount_of_times, sort_stats_by  &lt;span class=&quot;hljs-comment&quot;&gt;# for python 2.x remove this row&lt;/span&gt;\n\n            profiled_func = _ProfileFunc(function, sort_stats_by)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(amount_of_times):\n                retval, ps = profiled_func(*args, **kwargs)\n            ps.print_stats()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval  &lt;span class=&quot;hljs-comment&quot;&gt;# returns the results of the function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;callable&lt;/span&gt;(amount_of_times):  &lt;span class=&quot;hljs-comment&quot;&gt;# incase you don&apos;t want to specify the amount of times&lt;/span&gt;\n        func = amount_of_times  &lt;span class=&quot;hljs-comment&quot;&gt;# amount_of_times is the function in here&lt;/span&gt;\n        amount_of_times = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# the default amount&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; real_decorator(func)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; real_decorator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;profiling the function &lt;code&gt;baz&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@cumulative_profiler&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;():\n    time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nbaz()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;baz&lt;/code&gt; ran 5 times and printed this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;         &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; function calls &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt; seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n       &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.500&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.500&lt;/span&gt; {built-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; method time.sleep}\n        &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.001&lt;/span&gt; &amp;lt;ipython-&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-c89afe010372&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;(baz)\n        &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt; {method &lt;span class=&quot;hljs-string&quot;&gt;&apos;disable&apos;&lt;/span&gt; of &lt;span class=&quot;hljs-string&quot;&gt;&apos;_lsprof.Profiler&apos;&lt;/span&gt; objects}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;specifying the amount of times&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@cumulative_profiler(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;():\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For getting quick profile stats on an IPython notebook.\nOne can embed &lt;strong&gt;line_profiler&lt;/strong&gt; and &lt;strong&gt;memory_profiler&lt;/strong&gt; straight into their notebooks.&lt;/p&gt;\n&lt;p&gt;Another useful package is &lt;strong&gt;Pympler&lt;/strong&gt;. It is a powerful profiling package that&apos;s capable to track classes,objects,functions,memory leaks etc. Examples below, Docs attached.&lt;/p&gt;\n&lt;h2&gt;Get it!&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;!pip install line_profiler\n!pip install memory_profiler\n!pip install pympler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Load it!&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%load_ext line_profiler\n%load_ext memory_profiler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Use it!&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h1&gt;%time&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%time &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Outputs CPU time,Wall Clock time&apos;&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;#CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 5.96 µs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;CPU times: CPU level execution time&lt;/li&gt;\n&lt;li&gt;sys times: system level execution time&lt;/li&gt;\n&lt;li&gt;total: CPU time + system time&lt;/li&gt;\n&lt;li&gt;Wall time: Wall Clock Time&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%timeit&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit -r &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; -n &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Outputs execution time of the snippet&apos;&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;#1000 loops, best of 7: 7.46 ns per loop&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Gives best time out of given number of runs(r) in looping (n) times.&lt;/li&gt;\n&lt;li&gt;Outputs details on system caching:\n&lt;ul&gt;\n&lt;li&gt;When code snippets are executed multiple times, system caches a few opearations and doesn&apos;t execute them again that may hamper the accuracy of the profile reports.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%prun&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%prun -s cumulative &lt;span class=&quot;hljs-string&quot;&gt;&apos;Code to profile&apos;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;number of function calls(ncalls)&lt;/li&gt;\n&lt;li&gt;has entries per function call(distinct)&lt;/li&gt;\n&lt;li&gt;time taken per call(percall)&lt;/li&gt;\n&lt;li&gt;time elapsed till that function call(cumtime)&lt;/li&gt;\n&lt;li&gt;name of the func/module called etc...&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1IkgA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1IkgA.png&quot; alt=&quot;Cumulative profile&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;%memit&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%memit &lt;span class=&quot;hljs-string&quot;&gt;&apos;Code to profile&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#peak memory: 199.45 MiB, increment: 0.00 MiB&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Memory usage&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%lprun&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Example function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Usage: %lprun &amp;lt;name_of_the_function&amp;gt; function&lt;/span&gt;\n%lprun -f fun fun()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Line wise stats&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rusPA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rusPA.png&quot; alt=&quot;LineProfile&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;sys.getsizeof&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sys.getsizeof(&lt;span class=&quot;hljs-string&quot;&gt;&apos;code to profile&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# 64 bytes&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Returns the size of an object in bytes.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;asizeof() from pympler&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pympler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; asizeof\nobj = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hey&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ha&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(asizeof.asizeof(obj,stats=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;pympler.asizeof can be used to investigate how much memory certain Python objects consume.\nIn contrast to sys.getsizeof, asizeof sizes objects recursively&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8jxQX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8jxQX.png&quot; alt=&quot;pympler.asizeof&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;tracker from pympler&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pympler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tracker\ntr = tracker.SummaryTracker()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;():\n  li = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n  di = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;ha&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;haha&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;duh&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Umm&quot;&lt;/span&gt;}\nfun()\ntr.print_diff()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Tracks the lifetime of a function.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SrRj9.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SrRj9.png&quot; alt=&quot;tracker output&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Pympler package consists of a huge number of high utility functions to profile code. All of which cannot be covered here. See the documentation attached for verbose profile implementations.&lt;/p&gt;\n&lt;h3&gt;Pympler &lt;a href=&quot;https://readthedocs.org/projects/pympler/downloads/pdf/latest/&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;Recently I created a plugin for PyCharm with which you can easily analyse and visualise the results of &lt;code&gt;line_profiler&lt;/code&gt; in the PyCharm editor.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; has been mentioned in other answers as well and is a great tool to analyse exactly how much time is spent by the python interpreter in certain lines.&lt;/p&gt;\n&lt;p&gt;The PyCharm plugin I&apos;ve created can be found here:\n&lt;a href=&quot;https://plugins.jetbrains.com/plugin/16536-line-profiler&quot; rel=&quot;noreferrer&quot;&gt;https://plugins.jetbrains.com/plugin/16536-line-profiler&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It needs a helper package in your python environment called &lt;code&gt;line-profiler-pycharm&lt;/code&gt; which can be installed with pip or by the plugin itself.&lt;/p&gt;\n&lt;p&gt;After installing the plugin in PyCharm:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Decorate any function you want to profile with the &lt;code&gt;line_profiler_pycharm.profile&lt;/code&gt; decorator&lt;/li&gt;\n&lt;li&gt;Run with the &apos;Profile Lines&apos; runner&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Screenshot of results:\n&lt;a href=&quot;https://i.stack.imgur.com/nj0LP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nj0LP.png&quot; alt=&quot;Line Profiler Pycharm results&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile\ncProfile.runctx(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo()&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;gprof2dot_magic&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Magic function for &lt;code&gt;gprof2dot&lt;/code&gt; to profile any Python statement as a DOT graph in JupyterLab or Jupyter Notebook.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IE4Py.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IE4Py.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub repo: &lt;a href=&quot;https://github.com/mattijn/gprof2dot_magic&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/mattijn/gprof2dot_magic&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Make sure you&apos;ve the Python package &lt;code&gt;gprof2dot_magic&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install gprof2dot_magic\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Its dependencies &lt;code&gt;gprof2dot&lt;/code&gt; and &lt;code&gt;graphviz&lt;/code&gt; will be installed as well&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To enable the magic function, first load the &lt;code&gt;gprof2dot_magic&lt;/code&gt; module&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%load_ext gprof2dot_magic\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then profile any line statement as a DOT graph as such:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%gprof2dot &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fiGeD.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fiGeD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;My way is to use yappi (&lt;a href=&quot;https://github.com/sumerc/yappi&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sumerc/yappi&lt;/a&gt;). It&apos;s especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;startProfiler&lt;/span&gt;():\n    yappi.start()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;stopProfiler&lt;/span&gt;():\n    yappi.stop()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printProfiler&lt;/span&gt;():\n    stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n    statPrint = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;\n    namesArr = [&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stat &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stats.func_stats]\n    log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;namesArr %s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(namesArr))\n    maxNameLen = &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(namesArr)\n    log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxNameLen: %s&quot;&lt;/span&gt;, maxNameLen)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stat &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stats.func_stats:\n        nameAppendSpaces = [&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(maxNameLen - &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))]\n        log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nameAppendSpaces: %s&apos;&lt;/span&gt;, nameAppendSpaces)\n        blankSpace = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; space &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nameAppendSpaces:\n            blankSpace += space\n\n        log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;adding spaces: %s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nameAppendSpaces))\n        statPrint = statPrint + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + blankSpace + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]).ljust(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(\n            &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).ljust(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; - &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]))) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n\n    log.log(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nname&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;.ljust(maxNameLen - &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; ncall \\tttot \\ttsub&quot;&lt;/span&gt;)\n    log.log(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, statPrint)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then when your program work you can start profiler at any time by calling the &lt;code&gt;startProfiler&lt;/code&gt; RPC method and dump profiling information to a log file by calling &lt;code&gt;printProfiler&lt;/code&gt; (or modify the rpc method to return it to the caller) and get such output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-02-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;-|SVR-MAIN  |-(Thread-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   )-Level &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;: \nname                                                                                                                                      ncall     ttot    tsub\n&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-02-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;-|SVR-MAIN  |-(Thread-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   )-Level &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;: \nC:\\Python27\\lib\\sched.py.run:&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;                                                                                                           &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\xmlRpc.py.iterFnc:&lt;span class=&quot;hljs-number&quot;&gt;293&lt;/span&gt;                                                &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\serverMain.py.makeIteration:&lt;span class=&quot;hljs-number&quot;&gt;515&lt;/span&gt;                                                    &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\PicklingXMLRPC.py._dispatch:&lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;                                       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\BaseHTTPServer.py.date_time_string:&lt;span class=&quot;hljs-number&quot;&gt;464&lt;/span&gt;                                                                                    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\_psmswindows.py._get_raw_meminfo:&lt;span class=&quot;hljs-number&quot;&gt;243&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.decode_request_content:&lt;span class=&quot;hljs-number&quot;&gt;537&lt;/span&gt;                                                                          &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\_psmswindows.py.get_system_cpu_times:&lt;span class=&quot;hljs-number&quot;&gt;148&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&amp;lt;string&amp;gt;.__new__:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                                                                                                        &lt;span class=&quot;hljs-number&quot;&gt;220&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\socket.py.close:&lt;span class=&quot;hljs-number&quot;&gt;276&lt;/span&gt;                                                                                                       &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\threading.py.__init__:&lt;span class=&quot;hljs-number&quot;&gt;558&lt;/span&gt;                                                                                                 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&amp;lt;string&amp;gt;.__new__:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                                                                                                        &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\threading.py.notify:&lt;span class=&quot;hljs-number&quot;&gt;372&lt;/span&gt;                                                                                                   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\rfc822.py.getheader:&lt;span class=&quot;hljs-number&quot;&gt;285&lt;/span&gt;                                                                                                   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\BaseHTTPServer.py.handle_one_request:&lt;span class=&quot;hljs-number&quot;&gt;301&lt;/span&gt;                                                                                  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\xmlrpclib.py.end:&lt;span class=&quot;hljs-number&quot;&gt;816&lt;/span&gt;                                                                                                      &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.do_POST:&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;                                                                                         &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.is_rpc_path_valid:&lt;span class=&quot;hljs-number&quot;&gt;460&lt;/span&gt;                                                                               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SocketServer.py.close_request:&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;                                                                                         &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\__init__.py.cpu_times:&lt;span class=&quot;hljs-number&quot;&gt;1066&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It may not be very useful for short scripts but helps to optimize server-type processes especially given the &lt;code&gt;printProfiler&lt;/code&gt; method can be called multiple times over time to profile and compare e.g. different program usage scenarios. &lt;/p&gt;\n\n&lt;p&gt;In newer versions of yappi, the following code will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printProfile&lt;/span&gt;():\n    yappi.get_func_stats().print_all()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To add on to &lt;a href=&quot;https://stackoverflow.com/a/582337/1070617&quot;&gt;https://stackoverflow.com/a/582337/1070617&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;I wrote this module that allows you to use cProfile and view its output easily. More here: &lt;a href=&quot;https://github.com/ymichael/cprofilev&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ymichael/cprofilev&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python -m cprofilev /your/python/program\n&lt;span class=&quot;hljs-comment&quot;&gt;# Go to http://localhost:4000 to view collected statistics.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also see: &lt;a href=&quot;http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html&lt;/a&gt; on how to make sense of the collected statistics.&lt;/p&gt;\n    ","\n&lt;p&gt;A new tool to handle profiling in Python is PyVmMonitor: &lt;a href=&quot;http://www.pyvmmonitor.com/&quot; rel=&quot;noreferrer&quot;&gt;http://www.pyvmmonitor.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It has some unique features such as&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Attach profiler to a running (CPython) program&lt;/li&gt;\n&lt;li&gt;On demand profiling with Yappi integration&lt;/li&gt;\n&lt;li&gt;Profile on a different machine&lt;/li&gt;\n&lt;li&gt;Multiple processes support (multiprocessing, django...)&lt;/li&gt;\n&lt;li&gt;Live sampling/CPU view (with time range selection)&lt;/li&gt;\n&lt;li&gt;Deterministic profiling through cProfile/profile integration&lt;/li&gt;\n&lt;li&gt;Analyze existing PStats results&lt;/li&gt;\n&lt;li&gt;Open DOT files&lt;/li&gt;\n&lt;li&gt;Programatic API access&lt;/li&gt;\n&lt;li&gt;Group samples by method or line&lt;/li&gt;\n&lt;li&gt;PyDev integration&lt;/li&gt;\n&lt;li&gt;PyCharm integration&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note: it&apos;s commercial, but free for open source.&lt;/p&gt;\n    ","\n&lt;p&gt;It would depend on what you want to see out of profiling. Simple time \nmetrics can be given by (bash). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;time python python_prog.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even &apos;/usr/bin/time&apos; can output detailed metrics by using &apos;--verbose&apos; flag.&lt;/p&gt;\n\n&lt;p&gt;To check time metrics given by each function and to better understand how much time is spent on functions, you can use the inbuilt cProfile in python. &lt;/p&gt;\n\n&lt;p&gt;Going into more detailed metrics like performance, time is not the only metric. You can worry about memory, threads etc.&lt;br&gt;\nProfiling options:&lt;br&gt;\n1. &lt;strong&gt;line_profiler&lt;/strong&gt; is another profiler used commonly to find out timing metrics line-by-line.&lt;br&gt;\n2. &lt;strong&gt;memory_profiler&lt;/strong&gt; is a tool to profile memory usage.&lt;br&gt;\n3. &lt;strong&gt;heapy (from project Guppy)&lt;/strong&gt; Profile how objects in the heap are used. &lt;/p&gt;\n\n&lt;p&gt;These are some of the common ones I tend to use. But if you want to find out more, try reading this &lt;a href=&quot;http://shop.oreilly.com/product/0636920028963.do&quot; rel=&quot;noreferrer&quot;&gt;book&lt;/a&gt;\nIt is a pretty good book on starting out with performance in mind. You can move onto advanced topics on using Cython and JIT(Just-in-time) compiled python. &lt;/p&gt;\n    ","\n&lt;p&gt;I just developed my own profiler inspired from pypref_time:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/modaresimr/auto_profiler&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/modaresimr/auto_profiler&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;By adding a decorator it will show a tree of time-consuming functions&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;@Profiler(depth=4, on_disable=show)&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Install by: pip install auto_profiler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Example&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time &lt;span class=&quot;hljs-comment&quot;&gt;# line number 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; auto_profiler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Profiler, Tree\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;():\n    mysleep(&lt;span class=&quot;hljs-number&quot;&gt;.6&lt;/span&gt;+random.random())\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mysleep&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;):\n    time.sleep(t)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fact&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n    f1()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i*fact(i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Time   [Hits * PerHit] Function name [Called from] [Function Location]\\n&apos;&lt;/span&gt;+\\\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------------------------------------------------&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Tree(p.root, threshold=&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;))\n    \n&lt;span class=&quot;hljs-meta&quot;&gt;@Profiler(&lt;span class=&quot;hljs-params&quot;&gt;depth=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, on_disable=show&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        f1()\n\n    fact(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Example Output&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;\nTime   [Hits * PerHit] Function name [Called &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;] [function location]\n-----------------------------------------------------------------------\n&lt;span class=&quot;hljs-number&quot;&gt;8.974&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;8.974&lt;/span&gt;]  main  [auto-profiler/profiler.py:&lt;span class=&quot;hljs-number&quot;&gt;267&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]\n &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n    &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n        &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  &amp;lt;time.sleep&amp;gt;\n|\n|\n|   &lt;span class=&quot;hljs-comment&quot;&gt;# The rest is for the example recursive function call fact&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;3.020&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;3.020&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n     &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n        &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n            &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  &amp;lt;time.sleep&amp;gt;\n     &lt;span class=&quot;hljs-number&quot;&gt;2.171&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2.171&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n         &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n            &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n         &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n             &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Ever want to know what the hell that python script is doing? Enter the\n  Inspect Shell. Inspect Shell lets you print/alter globals and run\n  functions without interrupting the running script. Now with\n  auto-complete and command history (only on linux).&lt;/p&gt;\n  \n  &lt;p&gt;Inspect Shell is not a pdb-style debugger.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/amoffat/Inspect-Shell&quot; rel=&quot;nofollow&quot;&gt;https://github.com/amoffat/Inspect-Shell&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You could use that (and your wristwatch).&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s also a statistical profiler called &lt;a href=&quot;https://pypi.python.org/pypi/statprof/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;statprof&lt;/code&gt;&lt;/a&gt;. It&apos;s a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It&apos;s more suited to soft real-time applications like games, but may be have less precision than cProfile.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://pypi.python.org/pypi/statprof/&quot; rel=&quot;nofollow noreferrer&quot;&gt;version in pypi&lt;/a&gt; is a bit old, so can install it with &lt;code&gt;pip&lt;/code&gt; by specifying &lt;a href=&quot;https://github.com/bos/statprof.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;the git repository&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can run it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; statprof\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; statprof.profile():\n    my_questionable_function()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/a/10333592/320036&quot;&gt;https://stackoverflow.com/a/10333592/320036&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I found cprofiler and other ressources to be more for optimization purpose rather than debugging.&lt;/p&gt;\n&lt;p&gt;I made my own testing module instead for simple python scripts speed testing. (In my case 1K+ lines py file was tested using ScriptProfilerPy and speedup the code by 10x in minutes afterwards.&lt;/p&gt;\n&lt;p&gt;The module ScriptProfilerPy() will run your code adding timestamp to it.\nI put the module here:\n&lt;a href=&quot;https://github.com/Lucas-BLP/ScriptProfilerPy&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Lucas-BLP/ScriptProfilerPy&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; speed_testpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ScriptProfilerPy\n\nScriptProfilerPy(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path_to_your_script_to_test.py&quot;&lt;/span&gt;).Profiler()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output:\n&lt;a href=&quot;https://i.stack.imgur.com/RkRZD.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RkRZD.png&quot; alt=&quot;Output of the code after testing&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"id":536,"title":"How do I profile a Python script?","content":"\n                \n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Project_Euler&quot; rel=&quot;noreferrer&quot;&gt;Project Euler&lt;/a&gt; and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;What is a good way to profile how long a Python program takes to run?&lt;/p&gt;\n    ","slug":"how-do-i-profile-a-python-script-1657388346692","postType":"QUESTION","createdAt":"2022-07-09T17:39:06.000Z","updatedAt":"2022-07-09T17:39:06.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"Can a local variable's memory be accessed outside its scope?","slug":"can-a-local-variable's-memory-be-accessed-outside-its-scope-1657384460386"},{"title":"How do function pointers in C work?","slug":"how-do-function-pointers-in-c-work-1657388332074"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"MySQL Error 1093 - Can't specify target table for update in FROM clause","slug":"mysql-error-1093-can't-specify-target-table-for-update-in-from-clause-1657388078961"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"How to make a great R reproducible example","slug":"how-to-make-a-great-r-reproducible-example-1657384198173"},{"title":"Error in finding last used cell in Excel with VBA","slug":"error-in-finding-last-used-cell-in-excel-with-vba-1657384584748"},{"title":"How to randomize (shuffle) a JavaScript array?","slug":"how-to-randomize-(shuffle)-a-javascript-array-1657384790171"},{"title":"Arrays, linked lists and other data structures in cmd.exe (batch) script","slug":"arrays-linked-lists-and-other-data-structures-in-cmd.exe-(batch)-script-1657387558484"},{"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555"},{"title":"How can I parse a JSON file with PHP? [duplicate]","slug":"how-can-i-parse-a-json-file-with-php-duplicate-1657388002325"},{"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713"}]},"__N_SSG":true}