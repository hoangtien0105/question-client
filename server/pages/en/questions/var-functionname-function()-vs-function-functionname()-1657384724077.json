{"pageProps":{"data":{"answer":["\n&lt;p&gt;The difference is that &lt;code&gt;functionOne&lt;/code&gt; is a function expression and so only defined when that line is reached, whereas &lt;code&gt;functionTwo&lt;/code&gt; is a function declaration and is defined as soon as its surrounding function or script is executed (due to &lt;a href=&quot;http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html&quot; rel=&quot;noreferrer&quot;&gt;hoisting&lt;/a&gt;).  &lt;/p&gt;\n\n&lt;p&gt;For example, a function expression:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// TypeError: functionOne is not a function&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n};&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;And, a function declaration:   &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Outputs: &quot;Hello!&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;    \n{ &lt;span class=&quot;hljs-comment&quot;&gt;// note this block!&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionThree&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n  }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionThree&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// ReferenceError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;First I want to correct Greg: &lt;code&gt;function abc(){}&lt;/code&gt; is scoped too  the name &lt;code&gt;abc&lt;/code&gt; is defined in the scope where this definition is encountered. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n  &lt;span class=&quot;hljs-comment&quot;&gt;// abc is defined here...&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...but not here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Secondly, it is possible to combine both styles:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;xyz&lt;/code&gt; is going to be defined as usual, &lt;code&gt;abc&lt;/code&gt; is undefined in all browsers but Internet&amp;nbsp;Explorer  do not rely on it being defined. But it will be defined inside its body:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// xyz is visible here&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// abc is visible here&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// xyz is visible here&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// abc is undefined here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to alias functions on all browsers, use this kind of declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = abc;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, both &lt;code&gt;xyz&lt;/code&gt; and &lt;code&gt;abc&lt;/code&gt; are aliases of the same object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(xyz === abc); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;true&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One compelling reason to use the combined style is the &quot;name&quot; attribute of function objects (&lt;strong&gt;not supported by Internet&amp;nbsp;Explorer&lt;/strong&gt;). Basically when you define a function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(abc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;abc&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;its name is automatically assigned. But when you define it like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(abc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;its name is empty  we created an anonymous function and assigned it to some variable.&lt;/p&gt;\n\n&lt;p&gt;Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Assume really.long.external.scoped is {}&lt;/span&gt;\nreally.&lt;span class=&quot;hljs-property&quot;&gt;long&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;external&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scoped&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shortcut&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Let it call itself recursively:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;shortcut&lt;/span&gt;(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Let it pass itself as a callback:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(shortcut);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the example above we can do the same with an external name, but it&apos;ll be too unwieldy (and slower).&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(Another way to refer to itself is to use &lt;code&gt;arguments.callee&lt;/code&gt;, which is still relatively long, and not supported in the strict mode.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Deep down, JavaScript treats both statements differently. This is a function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;abc&lt;/code&gt; here is defined everywhere in the current scope:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Yet, it is defined down there.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it again&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, it hoisted through a &lt;code&gt;return&lt;/code&gt; statement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;xyz&lt;/code&gt; here is defined from the point of assignment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can&apos;t call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// UNDEFINED!!!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now it is defined&lt;/span&gt;\nxyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.&lt;/p&gt;\n\n&lt;p&gt;Fun fact:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(xyz.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Prints &quot;abc&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Personally, I prefer the &quot;function expression&quot; declaration because this way I can control the visibility. When I define the function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know that I defined the function locally. When I define the function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know that I defined it globally providing that I didn&apos;t define &lt;code&gt;abc&lt;/code&gt; anywhere in the chain of scopes. This style of definition is resilient even when used inside &lt;code&gt;eval()&lt;/code&gt;. While the definition&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;depends on the context and may leave you guessing where it is actually defined, especially in the case of &lt;code&gt;eval()&lt;/code&gt;  the answer is: It depends on the browser.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s the rundown on the standard forms that create functions: &lt;em&gt;(Originally written for another question, but adapted after being moved into the canonical question.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Terms:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;ES5&lt;/strong&gt;: &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 5th edition&lt;/a&gt;, 2009&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;ES2015&lt;/strong&gt;: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015&lt;/a&gt; (also known as &quot;ES6&quot;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The quick list:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Function Declaration&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&quot;Anonymous&quot; &lt;code&gt;function&lt;/code&gt; Expression &lt;em&gt;(which despite the term, sometimes create functions with names)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Named &lt;code&gt;function&lt;/code&gt; Expression&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Accessor Function Initializer (ES5+)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Arrow Function Expression (ES2015+) &lt;em&gt;(which, like anonymous function expressions, don&apos;t involve an explicit name, and yet can create functions with names)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Method Declaration in Object Initializer (ES2015+)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Constructor and Method Declarations in &lt;code&gt;class&lt;/code&gt; (ES2015+)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Function Declaration&lt;/h3&gt;\n\n&lt;p&gt;The first form is a &lt;em&gt;function declaration&lt;/em&gt;, which looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A function declaration is a &lt;em&gt;declaration&lt;/em&gt;; it&apos;s not a statement or expression. As such, you don&apos;t follow it with a &lt;code&gt;;&lt;/code&gt; (although doing so is harmless).&lt;/p&gt;\n\n&lt;p&gt;A function declaration is processed when execution enters the context in which it appears, &lt;strong&gt;before&lt;/strong&gt; any step-by-step code is executed. The function it creates is given a proper name (&lt;code&gt;x&lt;/code&gt; in the example above), and that name is put in the scope in which the declaration appears.&lt;/p&gt;\n\n&lt;p&gt;Because it&apos;s processed before any step-by-step code in the same context, you can do things like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works even though it&apos;s above the declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Until ES2015, the spec didn&apos;t cover what a JavaScript engine should do if you put a function declaration inside a control structure like &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc., like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;===== HERE THERE&lt;/span&gt;\n    }                   &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;===== BE DRAGONS&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And since they&apos;re processed &lt;em&gt;before&lt;/em&gt; step-by-step code is run, it&apos;s tricky to know what to do when they&apos;re in a control structure.&lt;/p&gt;\n\n&lt;p&gt;Although doing this wasn&apos;t &lt;em&gt;specified&lt;/em&gt; until ES2015, it was an &lt;em&gt;allowable extension&lt;/em&gt; to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.&lt;/p&gt;\n\n&lt;p&gt;As of ES2015, the specification says what to do. In fact, it gives three separate things to do:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If in loose mode &lt;em&gt;not&lt;/em&gt; on a web browser, the JavaScript engine is supposed to do one thing&lt;/li&gt;\n&lt;li&gt;If in loose mode on a web browser, the JavaScript engine is supposed to do something else&lt;/li&gt;\n&lt;li&gt;If in &lt;em&gt;strict&lt;/em&gt; mode (browser or not), the JavaScript engine is supposed to do yet another thing&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The rules for the loose modes are tricky, but in &lt;em&gt;strict&lt;/em&gt; mode, function declarations in blocks are easy: They&apos;re local to the block (they have &lt;em&gt;block scope&lt;/em&gt;, which is also new in ES2015), and they&apos;re hoisted to the top of the block. So:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();               &lt;span class=&quot;hljs-comment&quot;&gt;// Works just fine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; foo); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;undefined&quot; (`foo` is not in scope here&lt;/span&gt;\n                         &lt;span class=&quot;hljs-comment&quot;&gt;// because it&apos;s not in the same block)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;&quot;Anonymous&quot; &lt;code&gt;function&lt;/code&gt; Expression&lt;/h3&gt;\n\n&lt;p&gt;The second common form is called an &lt;em&gt;anonymous function expression&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Like all expressions, it&apos;s evaluated when it&apos;s reached in the step-by-step execution of the code.&lt;/p&gt;\n\n&lt;p&gt;In ES5, the function this creates has no name (it&apos;s anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be &lt;code&gt;y&lt;/code&gt;. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for &lt;code&gt;SetFunctionName&lt;/code&gt; in the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot; rel=&quot;noreferrer&quot;&gt;the specification&lt;/a&gt;&amp;nbsp; it appears &lt;em&gt;all over&lt;/em&gt; the place.)&lt;/p&gt;\n\n&lt;h3&gt;Named &lt;code&gt;function&lt;/code&gt; Expression&lt;/h3&gt;\n\n&lt;p&gt;The third form is a &lt;em&gt;named function expression&lt;/em&gt; (&quot;NFE&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;w&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;zw&apos;&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function this creates has a proper name (&lt;code&gt;w&lt;/code&gt; in this case). Like all expressions, this is evaluated when it&apos;s reached in the step-by-step execution of the code. The name of the function is &lt;em&gt;not&lt;/em&gt; added to the scope in which the expression appears; the name &lt;em&gt;is&lt;/em&gt; in scope within the function itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;w&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; w); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;function&quot;&lt;/span&gt;\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; w);     &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs &lt;a href=&quot;http://blog.niftysnippets.org/2010/09/double-take.html&quot; rel=&quot;noreferrer&quot;&gt;completely incorrectly&lt;/a&gt;, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don&apos;t have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)&lt;/p&gt;\n\n&lt;h3&gt;Accessor Function Initializer (ES5+)&lt;/h3&gt;\n\n&lt;p&gt;Sometimes functions can sneak in largely unnoticed; that&apos;s the case with &lt;em&gt;accessor functions&lt;/em&gt;. Here&apos;s an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;\n    },\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = v;\n    }\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;);         &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;number&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that when I used the function, I didn&apos;t use &lt;code&gt;()&lt;/code&gt;! That&apos;s because it&apos;s an &lt;em&gt;accessor function&lt;/em&gt; for a property. We get and set the property in the normal way, but behind the scenes, the function is called.&lt;/p&gt;\n\n&lt;p&gt;You can also create accessor functions with &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and the lesser-known second argument to &lt;code&gt;Object.create&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Arrow Function Expression (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 brings us the &lt;em&gt;arrow function&lt;/em&gt;. Here&apos;s one example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; n * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 2, 4, 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See that &lt;code&gt;n =&amp;gt; n * 2&lt;/code&gt; thing hiding in the &lt;code&gt;map()&lt;/code&gt; call? That&apos;s a function.&lt;/p&gt;\n\n&lt;p&gt;A couple of things about arrow functions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;They don&apos;t have their own &lt;code&gt;this&lt;/code&gt;. Instead, they &lt;em&gt;close over&lt;/em&gt; the &lt;code&gt;this&lt;/code&gt; of the context where they&apos;re defined. (They also close over &lt;code&gt;arguments&lt;/code&gt; and, where relevant, &lt;code&gt;super&lt;/code&gt;.) This means that the &lt;code&gt;this&lt;/code&gt; within them is the same as the &lt;code&gt;this&lt;/code&gt; where they&apos;re created, and cannot be changed.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you&apos;ll have noticed with the above, you don&apos;t use the keyword &lt;code&gt;function&lt;/code&gt;; instead, you use &lt;code&gt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The &lt;code&gt;n =&amp;gt; n * 2&lt;/code&gt; example above is one form of them. If you have multiple arguments to pass the function, you use parens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; n * i);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 0, 2, 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Remember that &lt;code&gt;Array#map&lt;/code&gt; passes the entry as the first argument, and the index as the second.)&lt;/p&gt;\n\n&lt;p&gt;In both cases, the body of the function is just an expression; the function&apos;s return value will automatically be the result of that expression (you don&apos;t use an explicit &lt;code&gt;return&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re doing more than just a single expression, use &lt;code&gt;{}&lt;/code&gt; and an explicit &lt;code&gt;return&lt;/code&gt; (if you need to return a value), as normal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bloggs&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Albert&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bloggs&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Albright&quot;&lt;/span&gt;}\n];\na = a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rv = a.&lt;span class=&quot;hljs-property&quot;&gt;last&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;last&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rv === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    rv = a.&lt;span class=&quot;hljs-property&quot;&gt;first&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;first&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rv;\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The version without &lt;code&gt;{ ... }&lt;/code&gt; is called an arrow function with an &lt;em&gt;expression body&lt;/em&gt; or &lt;em&gt;concise body&lt;/em&gt;. (Also: A &lt;em&gt;concise&lt;/em&gt; arrow function.) The one with &lt;code&gt;{ ... }&lt;/code&gt; defining the body is an arrow function with a &lt;em&gt;function body&lt;/em&gt;. (Also: A &lt;em&gt;verbose&lt;/em&gt; arrow function.)&lt;/p&gt;\n\n&lt;h3&gt;Method Declaration in Object Initializer (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 allows a shorter form of declaring a property that references a function called a &lt;em&gt;method definition&lt;/em&gt;; it looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the almost-equivalent in ES5 and earlier would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the difference (other than verbosity) is that a method can use &lt;code&gt;super&lt;/code&gt;, but a function cannot. So for instance, if you had an object that defined (say) &lt;code&gt;valueOf&lt;/code&gt; using method syntax, it could use &lt;code&gt;super.valueOf()&lt;/code&gt; to get the value &lt;code&gt;Object.prototype.valueOf&lt;/code&gt; would have returned (before presumably doing something else with it), whereas the ES5 version would have to do &lt;code&gt;Object.prototype.valueOf.call(this)&lt;/code&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;That also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you&apos;re passing it into &lt;code&gt;Object.assign&lt;/code&gt; as one of the source objects), method syntax &lt;em&gt;could&lt;/em&gt; mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn&apos;t detect that situation and handle it if none of the methods uses &lt;code&gt;super&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h3&gt;Constructor and Method Declarations in &lt;code&gt;class&lt;/code&gt; (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 brings us &lt;code&gt;class&lt;/code&gt; syntax, including declared constructors and methods:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;firstName, lastName&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; = firstName;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt; = lastName;\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getFullName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are two function declarations above: One for the constructor, which gets the name &lt;code&gt;Person&lt;/code&gt;, and one for &lt;code&gt;getFullName&lt;/code&gt;, which is a function assigned to &lt;code&gt;Person.prototype&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Speaking about the global context, both, the &lt;code&gt;var&lt;/code&gt; statement and a &lt;code&gt;FunctionDeclaration&lt;/code&gt; at the end will create a &lt;em&gt;non-deleteable&lt;/em&gt; property on the global object, but the value of both &lt;em&gt;can be overwritten&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;The subtle difference between the two ways is that when the &lt;a href=&quot;http://bclary.com/2004/11/07/#a-10.1.3&quot; rel=&quot;noreferrer&quot;&gt;Variable Instantiation&lt;/a&gt; process runs (before the actual code execution) all identifiers declared with &lt;code&gt;var&lt;/code&gt; will be initialized with &lt;code&gt;undefined&lt;/code&gt;, and the ones used by the &lt;code&gt;FunctionDeclaration&lt;/code&gt;&apos;s will be available since that moment, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; foo); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;function&apos;, it&apos;s already available&lt;/span&gt;\n &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; bar); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;undefined&apos;&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; () {}\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; bar); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;function&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The assignment of the &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;FunctionExpression&lt;/code&gt; takes place until runtime.&lt;/p&gt;\n\n&lt;p&gt;A global property created by a &lt;code&gt;FunctionDeclaration&lt;/code&gt; can be overwritten without any problems just like a variable value, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt; () {}\n test = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another obvious difference between your two examples is that the first function doesn&apos;t have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).&lt;/p&gt;\n\n&lt;p&gt;About your edited first example (&lt;code&gt;foo = function() { alert(&apos;hello!&apos;); };&lt;/code&gt;), it is an undeclared assignment, I would highly encourage you to always use the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;\n\n&lt;p&gt;With an assignment, without the &lt;code&gt;var&lt;/code&gt; statement, if the referenced identifier is not found in the scope chain, it will become a &lt;em&gt;deleteable&lt;/em&gt; property of the global object.&lt;/p&gt;\n\n&lt;p&gt;Also, undeclared assignments throw a &lt;code&gt;ReferenceError&lt;/code&gt; on ECMAScript 5 under &lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/&quot; rel=&quot;noreferrer&quot;&gt;Strict Mode&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A must read:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://kangax.github.com/nfe/&quot; rel=&quot;noreferrer&quot;&gt;Named function expressions demystified&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This answer has been merged from &lt;a href=&quot;https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function&quot;&gt;another question&lt;/a&gt;, in which the major doubt and misconception from the OP was that identifiers declared with a &lt;code&gt;FunctionDeclaration&lt;/code&gt;, couldn&apos;t be overwritten which is not the case.&lt;/p&gt;\n    ","\n&lt;p&gt;The two code snippets you&apos;ve posted there will, for almost all purposes, behave the same way.&lt;/p&gt;\n\n&lt;p&gt;However, the difference in behaviour is that with the first variant (&lt;code&gt;var functionOne = function() {}&lt;/code&gt;), that function can only be called after that point in the code.&lt;/p&gt;\n\n&lt;p&gt;With the second variant (&lt;code&gt;function functionTwo()&lt;/code&gt;), the function is available to code that runs above where the function is declared.&lt;/p&gt;\n\n&lt;p&gt;This is because with the first variant, the function is assigned to the variable &lt;code&gt;foo&lt;/code&gt; at run time. In the second, the function is assigned to that identifier, &lt;code&gt;foo&lt;/code&gt;, at parse time.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;More technical information&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;JavaScript has three ways of defining functions.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Your first snippet shows a &lt;strong&gt;function expression&lt;/strong&gt;. This involves using the &lt;em&gt;&quot;function&quot; operator&lt;/em&gt; to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an &quot;anonymous function&quot;, because it does not have to have a name,&lt;/li&gt;\n&lt;li&gt;Your second example is a &lt;strong&gt;function declaration&lt;/strong&gt;. This uses the &lt;em&gt;&quot;function&quot; statement&lt;/em&gt; to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.&lt;/li&gt;\n&lt;li&gt;The third way of defining a function is the &lt;strong&gt;&quot;Function()&quot; constructor&lt;/strong&gt;, which is not shown in your original post. It&apos;s not recommended to use this as it works the same way as &lt;code&gt;eval()&lt;/code&gt;, which has its problems.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;A better explanation to &lt;a href=&quot;https://stackoverflow.com/a/336868/2351696&quot;&gt;Greg&apos;s answer&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Why no error? We were always taught that expressions are executed from top to bottom(??)&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;Because:&lt;/h2&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Function declarations and variable declarations are always moved (&lt;code&gt;hoisted&lt;/code&gt;) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. &lt;a href=&quot;http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting&quot; rel=&quot;noreferrer&quot;&gt;ben cherry&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This means that code like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();                  ---------------      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne;\n                                | is actually |      &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){   | interpreted |--&amp;gt;\n};                              |    like     |      functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                                ---------------      };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;But in the case with function declarations, the entire function body will be hoisted as well&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();              ---------------      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                            | is actually |      };\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    | interpreted |--&amp;gt;\n}                           |    like     |      &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n                            ---------------\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the &quot;assignment&quot; variation can set a property of another object.&lt;/p&gt;\n\n&lt;p&gt;I often build JavaScript modules with a pattern like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt; = {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;privateUtil&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            ...\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;publicUtil&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            ...\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt;;\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this pattern, your public functions will all use assignment, while your private functions use declaration.&lt;/p&gt;\n\n&lt;p&gt;(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)&lt;/p&gt;\n    ","\n&lt;p&gt;An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function&apos;s previous definitions.&lt;/p&gt;\n\n&lt;p&gt;With&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myfunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;, this definition of &lt;code&gt;myfunction&lt;/code&gt; will override any previous definition, since it will be done at parse-time.&lt;/p&gt;\n\n&lt;p&gt;While&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myfunction = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;does the correct job of defining &lt;code&gt;myfunction&lt;/code&gt; only when &lt;code&gt;condition&lt;/code&gt; is met.&lt;/p&gt;\n    ","\n&lt;p&gt;An important reason is to add one and only one variable as the &quot;Root&quot; of your namespace...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt; = {}\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  },\n  ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many techniques for namespacing. It&apos;s become more important with the plethora of JavaScript modules available.&lt;/p&gt;\n\n&lt;p&gt;Also see &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/881515/&quot;&gt;How do I declare a namespace in JavaScript?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.sitepoint.com/back-to-basics-javascript-hoisting/&quot; rel=&quot;noreferrer&quot;&gt;Hoisting&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;is the JavaScript interpreters action of moving all variable and function declarations to the top of the current scope.&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;However, only the actual declarations are hoisted. by leaving assignments where they are.&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;variable&apos;s/Function&apos;s declared inside the page are global can access anywhere in that page.&lt;/li&gt;\n&lt;li&gt;variable&apos;s/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables&quot; rel=&quot;noreferrer&quot;&gt;Variable&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Javascript is called loosely typed language. Which means Javascript variables can hold value of any &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx&quot; rel=&quot;noreferrer&quot;&gt;Data-Type&lt;/a&gt;. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;global_Page = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                                               &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; global_Page;      « &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt; literal, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;.   -------------------       global_Page = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;     « &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;         \nglobal_Page = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Yash&apos;&lt;/span&gt;;                 |   &lt;span class=&quot;hljs-title class_&quot;&gt;Interpreted&lt;/span&gt;   |       global_Page = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Yash&apos;&lt;/span&gt;; « &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; literal, &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;.    «       &lt;span class=&quot;hljs-variable constant_&quot;&gt;AS&lt;/span&gt;        «       global_Page = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;   « &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; global_Page = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;               |                 |       global_Page = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){          « &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;                    -------------------                 &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local_functionblock;  « &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nglobal_Page = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){                                                local_functionblock = &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;;« &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local_functionblock = &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;;                              };  \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Assigning function as a data.&lt;/span&gt;\n};  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Identifier_opt&lt;/span&gt; ( &lt;span class=&quot;hljs-title class_&quot;&gt;FormalParameterList&lt;/span&gt;_opt ) { \n      &lt;span class=&quot;hljs-title class_&quot;&gt;FunctionBody&lt;/span&gt; | sequence &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; statements\n\n      « &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;  &lt;span class=&quot;hljs-title class_&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n      « &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;some data&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;functions declared inside the page are hoisted to top of the page having global access.&lt;/li&gt;\n&lt;li&gt;functions declared inside the function-block are hoisted to top of the block.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Default return value of function is &apos;&lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/&quot; rel=&quot;noreferrer&quot;&gt;undefined&lt;/a&gt;&apos;, &lt;a href=&quot;http://javascript.info/tutorial/variables-and-statements&quot; rel=&quot;noreferrer&quot;&gt;Variable&lt;/a&gt; declaration default value also &apos;undefined&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; respect to &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;-block &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;. \n&lt;span class=&quot;hljs-title class_&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; respect to page &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; | not available.\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Function Declaration&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {                                  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {      \n}                                  -------------------     }\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;();                    |                 |     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { « &lt;span class=&quot;hljs-title class_&quot;&gt;Re&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Defined&lt;/span&gt; / overridden.\n&lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;();                     «   &lt;span class=&quot;hljs-title class_&quot;&gt;Hoisted&lt;/span&gt;  &lt;span class=&quot;hljs-title class_&quot;&gt;As&lt;/span&gt;   «         &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {          |                 |         }\n     &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;();                -------------------         &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(); « &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; accessed &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;() only.\n     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {                              }\n     }                                                     &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;();\n}                                                          &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(); « &lt;span class=&quot;hljs-title class_&quot;&gt;ReferenceError&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; the &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; is not defined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Function Expression&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;        &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                 « literal\n       (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);                « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;                (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a;                      \n    a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                 « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;              a.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;()  -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {        « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Self Invoking&apos;&lt;/span&gt;);                      (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n});                                                               }) () -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Self Invoking&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f; \n    f = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){        « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var Function&apos;&lt;/span&gt;);                                   f ()  -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var Function&apos;&lt;/span&gt;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Function assigned to variable Example:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;selfExecuting&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;IIFE - Immediately-Invoked Function Expression&apos;&lt;/span&gt;);\n}());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anonymous = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anonymous function Expression&apos;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namedExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fact&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fact === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Local to the parent Function Scope&apos;&lt;/span&gt;);\n    };\n    globalExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;creates a new global variable, then assigned this function.&apos;&lt;/span&gt;);\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//return; //undefined.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fact * &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;( fact - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);   \n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;namedExpression&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalExpression&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;javascript interpreted as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anonymous;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namedExpression;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; globalExpression;\n\nanonymous = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anonymous function Expression&apos;&lt;/span&gt;);\n};\n\nnamedExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fact&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localExpression;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fact === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    localExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Local to the parent Function Scope&apos;&lt;/span&gt;);\n    };\n    globalExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;creates a new global variable, then assigned this function.&apos;&lt;/span&gt;);\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fact * &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;( fact - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;// DEFAULT UNDEFINED.&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;namedExpression&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalExpression&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can check function declaration, expression test over different browser&apos;s using &lt;a href=&quot;http://jsperf.com/yashfunctions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;jsperf Test Runner&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/45759444/5081877&quot;&gt;ES5 Constructor Function Classes&lt;/a&gt;: Function objects created using Function.prototype.bind&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;JavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Shape&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Function Declaration&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n};\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Adding a prototyped method to a function.&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getID&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;;\n    };\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setID&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt; id &lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n    };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expFn = &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Function Expression&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funObj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;( ); &lt;span class=&quot;hljs-comment&quot;&gt;// Function Object&lt;/span&gt;\nfunObj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;prototype&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\nfunObj.&lt;span class=&quot;hljs-title function_&quot;&gt;setID&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( funObj.&lt;span class=&quot;hljs-title function_&quot;&gt;getID&lt;/span&gt;() ); &lt;span class=&quot;hljs-comment&quot;&gt;// 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;ES6 introduced &lt;strong&gt;Arrow function&lt;/strong&gt;: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-arrow-function-definitions-static-semantics-early-errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ArrowFunction : ArrowParameters =&amp;gt; ConciseBody&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) =&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;Odd&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Even&apos;&lt;/span&gt;; };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// Even&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// Odd&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I&apos;m adding my own answer just because everyone else has covered the hoisting part thoroughly.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve wondered about which way is better for a long while now, and thanks to &lt;a href=&quot;http://jsperf.com&quot; rel=&quot;noreferrer&quot;&gt;http://jsperf.com&lt;/a&gt; now I know :)&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/bCrSm.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function declarations&lt;/strong&gt; are faster, and that&apos;s what really matters in web dev right? ;)&lt;/p&gt;\n    ","\n&lt;h1&gt;              .&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;Availability (scope) of the function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The following works because &lt;code&gt;function add()&lt;/code&gt; is scoped to the nearest block:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The following does not work because the variable is called before a function value is assigned to the variable &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above code is identical in functionality to the code below. Note that explicitly assigning &lt;code&gt;add = undefined&lt;/code&gt; is superfluous because simply doing &lt;code&gt;var add;&lt;/code&gt; is the exact same as &lt;code&gt;var add=undefined&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\nadd = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The following does not work because &lt;code&gt;var add=&lt;/code&gt; begins an expression and causes the following &lt;code&gt;function add()&lt;/code&gt; to be an expression instead of a block. Named functions are only visible to themselves and their surrounding block. As &lt;code&gt;function add()&lt;/code&gt; is an expression here, it has no surrounding block, so it is only visible to itself.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;em&gt;(function)&lt;/em&gt;.name&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The name of a function &lt;code&gt;function thefuncname(){}&lt;/code&gt; is &lt;em&gt;thefuncname&lt;/em&gt; when it is declared this way.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Otherwise, if a function is declared as &lt;code&gt;function(){}&lt;/code&gt;, the &lt;em&gt;function&lt;/em&gt;.name is the first variable used to store the function.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){} });\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If there are no variables set to the function, then the functions name is the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}).&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Lastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = b;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(c.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Performance&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In Google&apos;s V8 and Firefox&apos;s Spidermonkey there might be a few microsecond JIT compilation difference, but ultimately the result is the exact same. To prove this, let&apos;s examine the efficiency of JSPerf at micro-benchmarks by comparing the speed of two blank code snippets. The &lt;a href=&quot;https://jsperf.com/microbenchmark-analysis/1&quot; rel=&quot;noreferrer&quot;&gt;JSPerf tests are found here&lt;/a&gt;. And, the &lt;a href=&quot;http://jsben.ch/Ov6eJ&quot; rel=&quot;noreferrer&quot;&gt;jsben.ch tests are  found here&lt;/a&gt;. As you can see, there is a noticeable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).&lt;/p&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;Variable Mutability&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;When you use the &lt;code&gt;var&lt;/code&gt; keyword to declare a variable, you can then reassign a different value to the variable like so.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foobar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;However, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do &lt;code&gt;const arr = []&lt;/code&gt;, then you can still do &lt;code&gt;arr[10] = &quot;example&quot;&lt;/code&gt;. Only doing something like &lt;code&gt;arr = &quot;new value&quot;&lt;/code&gt; or &lt;code&gt;arr = []&lt;/code&gt; would throw an error as seen below.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foobar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Interestingly, if we declare the variable as &lt;code&gt;function funcName(){}&lt;/code&gt;, then the immutability of the variable is the same as declaring it with &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;   &quot; &quot;&lt;/h2&gt;\n&lt;p&gt;The &quot;nearest block&quot; is the nearest &quot;function,&quot; (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a &lt;code&gt;function functionName() {}&lt;/code&gt; behaves like a &lt;code&gt;var functionName = function() {}&lt;/code&gt; when in a non-closure block to items outside said closure. Observe.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Normal &lt;code&gt;var add=function(){}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;);\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Normal &lt;code&gt;function add(){}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Function&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Statement (such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Arrow Function with &lt;code&gt;var add=function()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Arrow Function With &lt;code&gt;function add()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A function declaration and a function expression assigned to a variable behave the same once the binding is established.&lt;/p&gt;\n\n&lt;p&gt;There is a difference however at &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt; the function object is actually associated with its variable. This difference is due to the mechanism called &lt;em&gt;variable hoisting&lt;/em&gt; in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;Basically, all function declarations and variable declarations are hoisted to the top of the &lt;em&gt;function&lt;/em&gt; in which the declaration occurs (this is why we say that JavaScript has &lt;em&gt;function scope&lt;/em&gt;).&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;When a function declaration is hoisted, the function body &quot;follows&quot;\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When a variable declaration is hoisted, the initialization does &lt;em&gt;not&lt;/em&gt;\nfollow, but is &quot;left behind&quot;. The variable is initialized to\n&lt;code&gt;undefined&lt;/code&gt; at the start of the function body, and will be &lt;em&gt;assigned&lt;/em&gt;\na value at its original location in the code. (Actually, it will be assigned a value at &lt;em&gt;every&lt;/em&gt; location where a declaration of a variable with the same name occurs.)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.&lt;/p&gt;\n\n&lt;p&gt;Some examples...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!foo) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo; }\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variable &lt;code&gt;foo&lt;/code&gt; is hoisted to the top of the function, initialized to &lt;code&gt;undefined&lt;/code&gt;, so that &lt;code&gt;!foo&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, so &lt;code&gt;foo&lt;/code&gt; is assigned &lt;code&gt;10&lt;/code&gt;. The &lt;code&gt;foo&lt;/code&gt; outside of &lt;code&gt;bar&lt;/code&gt;&apos;s scope plays no role and is untouched. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()() &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()() &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Function declarations take precedence over variable declarations, and the last function declaration &quot;sticks&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a; }\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example &lt;code&gt;a&lt;/code&gt; is initialized with the function object resulting from evaluating the second function declaration, and then is assigned &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;();\na &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the function declaration is hoisted first, declaring and initializing variable &lt;code&gt;a&lt;/code&gt;. Next, this variable is assigned &lt;code&gt;10&lt;/code&gt;. In other words: the assignment does not assign to outer variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The first example is a function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second example is a function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var &apos;abc&apos; is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.&lt;/p&gt;\n\n&lt;p&gt;To put it simply:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//this will work&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(param);\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//this would fail&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(param);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To study more about this topic I strongly recommend you this\n&lt;a href=&quot;http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792&quot;&gt;link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In terms of code maintenance cost, named functions are more preferable:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Independent from the place where they are declared (but still limited by scope).&lt;/li&gt;\n&lt;li&gt;More resistant to mistakes like conditional initialization (you are still able to override if wanted to).&lt;/li&gt;\n&lt;li&gt;The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.&lt;/li&gt;\n&lt;li&gt;In a debugger you will clearly see the function name on the call stack instead of an &quot;anonymous/evaluated&quot; function.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.&lt;/p&gt;\n\n&lt;p&gt;Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n    &lt;span class=&quot;hljs-attr&quot;&gt;member&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* How do I make &quot;this.member&quot; a named function? */&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to a name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.&lt;/p&gt;\n&lt;p&gt;For more information on anonymous functions and lambda calculus, Wikipedia is a good start: &lt;a href=&quot;http://en.wikipedia.org/wiki/Anonymous_function&quot; rel=&quot;noreferrer&quot;&gt;Anonymous Functions&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.&lt;/p&gt;\n\n&lt;p&gt;I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.&lt;/p&gt;\n\n&lt;p&gt;Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don&apos;t want to have to change all 160 sets of branding files.&lt;/p&gt;\n\n&lt;p&gt;By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.&lt;/p&gt;\n\n&lt;p&gt;The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.&lt;/p&gt;\n\n&lt;p&gt;From people&apos;s comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/336868/2730064&quot;&gt;Greg&apos;s Answer&lt;/a&gt; is good enough, but I still would like to add something to it that I learned just now watching &lt;a href=&quot;https://en.wikipedia.org/wiki/Douglas_Crockford&quot; rel=&quot;noreferrer&quot;&gt;Douglas Crockford&apos;s&lt;/a&gt; videos.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function expression:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Function statement:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function statement is just a shorthand for &lt;code&gt;var&lt;/code&gt; statement with a &lt;code&gt;function&lt;/code&gt; value.&lt;/p&gt;\n\n&lt;p&gt;So&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;expands to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which expands further to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\nfoo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And they are both hoisted to the top of the code.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/6TVZL.jpg&quot; alt=&quot;Screenshot from video&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/26394/eugene-lazutkin&quot;&gt;@EugeneLazutkin&lt;/a&gt; gives an example where he &lt;a href=&quot;https://stackoverflow.com/a/338053/&quot;&gt;names an assigned function to be able to use &lt;code&gt;shortcut()&lt;/code&gt;&lt;/a&gt; as an internal reference to itself. &lt;a href=&quot;http://ejohn.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;John Resig&lt;/a&gt; gives another example - &lt;em&gt;copying a recursive function assigned to another object&lt;/em&gt; in his &lt;a href=&quot;http://ejohn.org/apps/learn/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Learning Advanced Javascript&lt;/a&gt; tutorial. While assigning functions to properties isn&apos;t strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.&lt;/p&gt;\n&lt;p&gt;Examples from the tutorial: recursive calls in &lt;code&gt;yell()&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://ejohn.org/apps/learn/#13&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tests fail when the original ninja object is removed.&lt;/a&gt; (page 13)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;predicate, message&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!predicate) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(message); } }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiy&quot;&lt;/span&gt;;\n  }\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A single object isn&apos;t too bad, either.&quot;&lt;/span&gt; ); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; samurai = { &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: ninja.&lt;span class=&quot;hljs-property&quot;&gt;yell&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Uh, this isn&apos;t good! Where&apos;d ninja.yell go?&quot;&lt;/span&gt; );\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://ejohn.org/apps/learn/#14&quot; rel=&quot;nofollow noreferrer&quot;&gt;If you name the function that will be called recursively, the tests will pass.&lt;/a&gt; (page 14)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;predicate, message&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!predicate) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(message); } }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiy&quot;&lt;/span&gt;;\n  }\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Works as we would expect it to!&quot;&lt;/span&gt; );\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; samurai = { &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: ninja.&lt;span class=&quot;hljs-property&quot;&gt;yell&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The method correctly calls itself.&quot;&lt;/span&gt; );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif23&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Another difference that is not mentioned in the other answers is that if you use the anonymous function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use that as a constructor as in&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; one = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then &lt;code&gt;one.constructor.name&lt;/code&gt; will not be defined. &lt;code&gt;Function.name&lt;/code&gt; is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.&lt;/p&gt;\n\n&lt;p&gt;With &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\ntwo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it is possible to retrieve the name of the constructor as a string with &lt;code&gt;two.constructor.name&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The first one (function doSomething(x)) should be part of an object notation.&lt;/p&gt;\n\n&lt;p&gt;The second one (&lt;code&gt;var doSomething = function(x){ alert(x);}&lt;/code&gt;) is simply creating an anonymous function and assigning it to a variable, &lt;code&gt;doSomething&lt;/code&gt;. So doSomething() will call the function.&lt;/p&gt;\n\n&lt;p&gt;You may want to know what a &lt;em&gt;function declaration&lt;/em&gt; and &lt;em&gt;function expression&lt;/em&gt; is.&lt;/p&gt;\n\n&lt;p&gt;A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;ECMA 5 (13.0) defines the syntax as &lt;br&gt;\n  function Identifier ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).&lt;/p&gt;\n\n&lt;p&gt;And in a function expression&lt;/p&gt;\n\n&lt;p&gt;A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Anonymous function expression&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Named function expression&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Self-invoking function expression&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello!&quot;&lt;/span&gt;);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;ECMA 5 (13.0) defines the syntax as &lt;br&gt;\n  function Identifier&lt;sub&gt;opt&lt;/sub&gt; ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I&apos;m listing out the differences below:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.&lt;/p&gt;\n\n&lt;p&gt;Take a look at the function below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because, during execution, it looks like:-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// The first function declaration is moved to top&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// The second function declaration is moved to top&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//So executing from top to bottom,&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//the last foo() returns 2 which gets displayed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and &lt;strong&gt;undefined&lt;/strong&gt; gets assigned to it.&lt;/p&gt;\n\n&lt;p&gt;Same function using function expressions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because during execution, it looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n   foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   };\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo ();\n   foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {   &lt;span class=&quot;hljs-comment&quot;&gt;// This function expression is not reachable&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n   };\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It is not safe to write function declarations in non-function blocks like &lt;strong&gt;if&lt;/strong&gt; because they won&apos;t be accessible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;(); }\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Named function expression like the one below, may not work in Internet&amp;nbsp;Explorer browsers prior to version 9.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; today = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;today&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;()}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;If you would use those functions to create objects, you would get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objectOne = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(objectOne.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;Object {}&quot; because constructor is an anonymous function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objectTwo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(objectTwo.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;functionTwo {}&quot; because constructor is a named function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;About performance:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;New versions of &lt;code&gt;V8&lt;/code&gt; introduced several under-the-hood optimizations and so did &lt;code&gt;SpiderMonkey&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is almost no difference now between expression and declaration. &lt;br&gt;Function expression &lt;a href=&quot;https://jsperf.com/fdeclaration-vs-fexpression&quot; rel=&quot;noreferrer&quot;&gt;appears to be faster&lt;/a&gt; now.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chrome 62.0.3202&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/lW91X.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lW91X.png&quot; alt=&quot;Chrome test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;FireFox 55&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/po3gG.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/po3gG.png&quot; alt=&quot;Firefox test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chrome Canary 63.0.3225&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/lcPvN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lcPvN.png&quot; alt=&quot;Chrome Canary test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;Anonymous&lt;/code&gt; function expressions &lt;a href=&quot;https://jsperf.com/named-vs-anonymous-expressions&quot; rel=&quot;noreferrer&quot;&gt;appear to have better performance&lt;/a&gt;\n  against &lt;code&gt;Named&lt;/code&gt; function expression.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Firefox&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/npaAl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/npaAl.png&quot; alt=&quot;Firefox named_anonymous&quot;&gt;&lt;/a&gt;\n&lt;strong&gt;&lt;em&gt;Chrome Canary&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/6YkeY.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/6YkeY.png&quot; alt=&quot;Chrome canary named_anonymous&quot;&gt;&lt;/a&gt;\n&lt;strong&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/x9H8J.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/x9H8J.png&quot; alt=&quot;Chrome named_anonymous&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In JavaScript there are two ways to create functions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.&lt;/p&gt;\n\n&lt;p&gt;What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It&apos;s not executing the function and assigning the result.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Reference: &lt;em&gt;&lt;a href=&quot;http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/&quot; rel=&quot;noreferrer&quot;&gt;JavaScript function declaration syntax: var fn = function() {} vs function fn() {}&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In light of the &quot;named functions show up in stack traces&quot; argument, modern JavaScript engines are actually quite capable of representing anonymous functions.&lt;/p&gt;\n\n&lt;p&gt;As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.&lt;/p&gt;\n\n&lt;p&gt;SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can&apos;t.&lt;/p&gt;\n\n&lt;p&gt;If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iterator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for the most part it&apos;s not worth stressing over.&lt;/p&gt;\n\n&lt;h2&gt;Harness (&lt;a href=&quot;http://jsfiddle.net/us9dg6y8/&quot;&gt;Fiddle&lt;/a&gt;)&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n},\n    b = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n    },\n    c = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n    },\n    e = {\n        &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: a,\n        &lt;span class=&quot;hljs-attr&quot;&gt;g&lt;/span&gt;: b,\n        &lt;span class=&quot;hljs-attr&quot;&gt;h&lt;/span&gt;: c,\n        &lt;span class=&quot;hljs-attr&quot;&gt;i&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;j&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;j&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;k&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        }\n    },\n    m = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }()),\n    n = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;n&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }()),\n    o = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }());\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([a, b, c].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(e).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;values, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(e[key]);\n}, [])).&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;([m, n, o]).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;logs, func&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; logs.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;func.name: &apos;&lt;/span&gt; + func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt; +\n                           &lt;span class=&quot;hljs-string&quot;&gt;&apos;Trace:\\n&apos;&lt;/span&gt; +\n                           error.&lt;span class=&quot;hljs-property&quot;&gt;stack&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Need to manually log the error object in Nitro.&lt;/span&gt;\n    }\n\n}, []).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n\\n&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;V8&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:11)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at b (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at d (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:11)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at b (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at d (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at e.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at j (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at l (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:19&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at n (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at p (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27 test.js:42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;SpiderMonkey&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\ne.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nj@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nl@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nm&amp;lt;&lt;span class=&quot;hljs-regexp&quot;&gt;/&amp;lt;@http:/&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/localhost:8000/&lt;/span&gt;test.&lt;span class=&quot;hljs-property&quot;&gt;js&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nn@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\np@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Chakra&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n   at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5)&lt;/span&gt;\n   at &lt;span class=&quot;hljs-title class_&quot;&gt;Anonymous&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at b (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at d (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at a (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at b (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at d (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at e.i (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at j (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at l (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at n (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at p (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Nitro&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:22&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:22&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\ni@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nj@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nl@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nn@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\np@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. &lt;/p&gt;\n\n&lt;p&gt;The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the &lt;strong&gt;functionOne is not a function&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.&lt;/p&gt;\n\n&lt;p&gt;On the second line we are assigning the reference of an anonymous function to functionOne.&lt;/p&gt;\n\n&lt;p&gt;The second case is of function declarations that loads before any code is executed. So if you do like the following you won&apos;t get any error as the declaration loads before code execution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Named Functions Vs. Anonymous Functions&lt;/h1&gt;\n&lt;p&gt;The first function syntax is &lt;strong&gt;Anonymous Function Expression&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While, the second one is &lt;strong&gt;Function Declaration&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The main difference between both is the function name since &lt;strong&gt;Anonymous Functions&lt;/strong&gt; have no name to call.\nAnonymous functions are quick and easy to declare, and many libraries and tools tend to encourage this idiomatic style of code. However, anonymous functions have some &lt;strong&gt;drawbacks&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Readability:&lt;/strong&gt; anonymous functions omit a name which could cause less readable code.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debugging:&lt;/strong&gt; anonymous functions have no name in stack traces, which can make debugging more difficult.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Self-Reference:&lt;/strong&gt; what if the function needs to refer to itself, for recursion for example.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Naming Function Expression&lt;/h2&gt;\n&lt;p&gt;Providing a name for your function expression quite effectively addresses all these drawbacks, and has no tangible downsides. The best practice is to always name your function expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;timeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- look, a name here!&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;ve waited 1 second&quot;&lt;/span&gt;);\n}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Naming IIFEs (Immediate Invoked Function Expression)&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;IIFE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- look, always name IIFEs!&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Hello!&quot;&lt;/span&gt;\n})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello!&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For functions assigned to a variable, naming the function, in this case, is not very common and may cause confusion, in this case, the arrow function may be a better choice.&lt;/p&gt;\n    ","\n&lt;p&gt;They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. Function Expression&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with function (hence the parentheses\n  around the self invoking example below).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it&apos;s declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp;amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Function Declaration&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  Its helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with var, Function\n  Declarations must begin with function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have &apos;use strict&apos; this won&apos;t Hoist as expected, it&apos;s a good way to call all normal functions which are not big in lines and neither are a  constructor function.&lt;/p&gt;\n\n&lt;p&gt;Also, if you need more info about how hoisting works in JavaScript, visit the link below:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.&lt;/p&gt;\n    "],"id":134,"title":"var functionName = function() {} vs function functionName() {}","content":"\n                \n&lt;p&gt;I&apos;ve recently started maintaining someone else&apos;s JavaScript code. I&apos;m fixing bugs, adding features and also trying to tidy up the code and make it more consistent.&lt;/p&gt;\n&lt;p&gt;The previous developer used two ways of declaring functions and I can&apos;t work out if there is a reason behind it or not.&lt;/p&gt;\n&lt;p&gt;The two ways are:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can&apos;t be done with the other?&lt;/p&gt;\n    ","slug":"var-functionname-function()-vs-function-functionname()-1657384724077","postType":"QUESTION","createdAt":"2022-07-09T16:38:44.000Z","updatedAt":"2022-07-09T16:38:44.000Z","tags":[{"id":487,"name":"idioms","slug":"idioms","createdAt":"2022-07-09T16:38:44.000Z","updatedAt":"2022-07-09T16:38:44.000Z","Questions_Tags":{"questionId":134,"tagId":487}}],"relatedQuestions":[{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077","tags":[{"name":"idioms","Questions_Tags":{"questionId":134,"tagId":487}}]}]},"randomQuestions":[{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"Servlet returns \"HTTP Status 404 The requested resource (/servlet) is not available\"","slug":"servlet-returns-\"http-status-404-the-requested-resource-(servlet)-is-not-available\"-1657384850661"},{"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"The 3 different equals","slug":"the-3-different-equals-1657385490242"},{"title":"UnboundLocalError on local variable when reassigned after first use","slug":"unboundlocalerror-on-local-variable-when-reassigned-after-first-use-1657387685248"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"},{"title":"console.log() async or sync?","slug":"console.log()-async-or-sync-1657388401087"},{"title":"Numbering rows within groups in a data frame","slug":"numbering-rows-within-groups-in-a-data-frame-1657388556436"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"Scroll to an element with jQuery","slug":"scroll-to-an-element-with-jquery-1657388523178"},{"title":"How do I install pip on Windows?","slug":"how-do-i-install-pip-on-windows-1657388147761"},{"title":"Javascript infamous Loop issue? [duplicate]","slug":"javascript-infamous-loop-issue-duplicate-1657387498530"}]},"__N_SSG":true}