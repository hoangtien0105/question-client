{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can access capturing groups like this:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegexp = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegexp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:^|\\s)format_(.*?)(?:\\s|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match = myRegexp.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(myString);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(match[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// abc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;And if there are multiple matches you can iterate over them:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegexp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:^|\\s)format_(.*?)(?:\\s|$)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\nmatch = myRegexp.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(myString);\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// matched text: match[0]&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// match start: match.index&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// capturing group n: match[n]&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(match[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n  match = myRegexp.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(myString);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Edit: 2019-09-10&lt;/h2&gt;\n&lt;p&gt;As you can see the way to iterate over multiple matches was not very intuitive. This lead to the proposal of the &lt;a href=&quot;https://github.com/tc39/proposal-string-matchall&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;String.prototype.matchAll&lt;/code&gt;&lt;/a&gt; method. This new method is expected to ship in the &lt;a href=&quot;https://tc39.es/ecma262/#sec-string.prototype.matchall&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2020 specification&lt;/a&gt;. It gives us a clean API and solves multiple problems. It has been started to land on major browsers and JS engines as &lt;a href=&quot;https://v8.dev/features/string-matchall&quot; rel=&quot;noreferrer&quot;&gt;Chrome 73+ / Node 12+&lt;/a&gt; and Firefox 67+.&lt;/p&gt;\n&lt;p&gt;The method returns an iterator and is used as follows:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; string = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regexp = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; matches = string.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(regexp);\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; matches) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(match);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(match.&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;)\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;As it returns an iterator, we can say it&apos;s lazy, this is useful when handling particularly large numbers of capturing groups, or very large strings. But if you need, the result can be easily transformed into an Array by using the &lt;em&gt;spread syntax&lt;/em&gt; or the &lt;code&gt;Array.from&lt;/code&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFirstGroup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;regexp, str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [...str.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(regexp)];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt; =&amp;gt;&lt;/span&gt; m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFirstGroup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;regexp, str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(regexp), &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt; =&amp;gt;&lt;/span&gt; m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the meantime, while this proposal gets more wide support, you can use the &lt;a href=&quot;https://www.npmjs.com/package/string.prototype.matchall&quot; rel=&quot;noreferrer&quot;&gt;official shim package&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Also, the internal workings of the method are simple. An equivalent implementation using a generator function would be as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, regexp&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; flags = regexp.&lt;span class=&quot;hljs-property&quot;&gt;global&lt;/span&gt; ? regexp.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt; : regexp.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(regexp, flags);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; match;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match = re.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(str)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; match;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A copy of the original regexp is created; this is to avoid side-effects due to the mutation of the &lt;code&gt;lastIndex&lt;/code&gt; property when going through the multple matches.&lt;/p&gt;\n&lt;p&gt;Also, we need to ensure the regexp has the &lt;em&gt;global&lt;/em&gt; flag to avoid an infinite loop.&lt;/p&gt;\n&lt;p&gt;I&apos;m also happy to see that even this StackOverflow question was referenced in the &lt;a href=&quot;https://github.com/tc39/proposal-string-matchall#previous-discussions&quot; rel=&quot;noreferrer&quot;&gt;discussions of the proposal&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Heres a method you can use to get the &lt;em&gt;n&lt;/em&gt;th capturing group for each match:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, regex, index&lt;/span&gt;) {\n  index || (index = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// default to the first capturing group&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match = regex.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(string)) {\n    matches.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(match[index]);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; matches;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example :&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;something format_abc something format_def something format_ghi&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegEx = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get an array containing the first capturing group for every match&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(myString, myRegEx, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Log results&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(matches.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; matches found: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(matches))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(matches);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = myString.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bformat_(.*?)\\b/&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;\\b&lt;/code&gt; isn&apos;t exactly the same thing. (It works on &lt;code&gt;--format_foo/&lt;/code&gt;, but doesn&apos;t work on &lt;code&gt;format_a_b&lt;/code&gt;) But I wanted to show an alternative to your expression, which is fine. Of course, the &lt;code&gt;match&lt;/code&gt; call is the important thing.&lt;/p&gt;\n    ","\n&lt;p&gt;Last but not least, I found one line of code that worked fine for me (JS ES6):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; reg = &lt;span class=&quot;hljs-regexp&quot;&gt;/#([\\S]+)/igm&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Get hashtags.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string = &lt;span class=&quot;hljs-string&quot;&gt;&apos;mi alegría es total! \\n#fiestasdefindeaño #PadreHijo #buenosmomentos #france #paris&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; matches = (string.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(reg) || []).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(reg, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(matches);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This will return:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;fiestasdefindeaño&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PadreHijo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;buenosmomentos&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;france&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;paris&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In regards to the multi-match parentheses examples above, I was looking for an answer here after not getting what I wanted from:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = mystring.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?:neededToMatchButNotWantedInResult)(matchWanted)/igm&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After looking at the slightly convoluted function calls with while and .push() above, it dawned on me that the problem can be solved very elegantly with mystring.replace() instead (the replacing is NOT the point, and isn&apos;t even done, the CLEAN, built-in recursive function call option for the second parameter is!):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; yourstring = &lt;span class=&quot;hljs-string&quot;&gt;&apos;something format_abc something format_def something format_ghi&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = [];\nyourstring.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/format_([^\\s]+)/igm&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m, p1&lt;/span&gt;){ matches.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(p1); } );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After this, I don&apos;t think I&apos;m ever going to use .match() for hardly anything ever again.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;String#matchAll&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (see the &lt;a href=&quot;https://tc39.github.io/proposal-string-matchall/#sec-string-prototype-matchall&quot; rel=&quot;noreferrer&quot;&gt;Stage 3 Draft / December 7, 2018 proposal&lt;/a&gt;), simplifies acccess to all groups in the match object (mind that Group 0 is the whole match, while further groups correspond to the capturing groups in the pattern):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;With &lt;code&gt;matchAll&lt;/code&gt; available, you can avoid the &lt;code&gt;while&lt;/code&gt; loop and &lt;code&gt;exec&lt;/code&gt; with &lt;code&gt;/g&lt;/code&gt;... Instead, by using &lt;code&gt;matchAll&lt;/code&gt;, you get back an iterator which you can use with the more convenient &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;array spread&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; constructs&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This method yields a similar output to &lt;code&gt;Regex.Matches&lt;/code&gt; in C#, &lt;code&gt;re.finditer&lt;/code&gt; in Python, &lt;code&gt;preg_match_all&lt;/code&gt; in PHP.&lt;/p&gt;\n\n&lt;p&gt;See a JS demo (tested in Google Chrome 73.0.3683.67 (official build), beta (64-bit)):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;key1:value1, key2-value2!!@key3=value3&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = myString.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(\\w+)[:=-](\\w+)/g&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([...matches]); &lt;span class=&quot;hljs-comment&quot;&gt;// All match with capturing group values&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;console.log([...matches])&lt;/code&gt; shows&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/hfFbK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/hfFbK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You may also get match value or specific group values using&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; matchData = &lt;span class=&quot;hljs-string&quot;&gt;&quot;key1:value1, key2-value2!!@key3=value3&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(\\w+)[:=-](\\w+)/g&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = [...matchData]; &lt;span class=&quot;hljs-comment&quot;&gt;// Note matchAll result is not re-iterable&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(matches, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt; =&amp;gt;&lt;/span&gt; m[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;// All match (Group 0) values&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; [ &quot;key1:value1&quot;, &quot;key2-value2&quot;, &quot;key3=value3&quot; ]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(matches, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;m&lt;/span&gt; =&amp;gt;&lt;/span&gt; m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;// All match (Group 1) values&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; [ &quot;key1&quot;, &quot;key2&quot;, &quot;key3&quot; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#Browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;browser compatibility&lt;/strong&gt;&lt;/a&gt; details.&lt;/p&gt;\n    ","\n&lt;h2&gt;Terminology used in this answer:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Match&lt;/strong&gt; indicates the result of running your RegEx pattern against your string like so: &lt;code&gt;someString.match(regexPattern)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Matched patterns&lt;/strong&gt; indicate all matched portions of the input string, which all reside inside the &lt;strong&gt;match&lt;/strong&gt; array. These are all instances of your pattern inside the input string.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Matched groups&lt;/strong&gt; indicate all groups to catch, defined in the RegEx pattern. (The patterns inside parentheses, like so: &lt;code&gt;/format_(.*?)/g&lt;/code&gt;, where &lt;code&gt;(.*?)&lt;/code&gt; would be a matched group.) These reside within &lt;strong&gt;matched patterns&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Description&lt;/h2&gt;\n\n&lt;p&gt;To get access to the &lt;em&gt;matched groups&lt;/em&gt;, in each of the &lt;em&gt;matched patterns&lt;/em&gt;, you need a function or something similar to iterate over the &lt;em&gt;match&lt;/em&gt;. There are a number of ways you can do this, as many of the other answers show. Most other answers use a while loop to iterate over all &lt;em&gt;matched patterns&lt;/em&gt;, but I think we all know the potential dangers with that approach. It is necessary to match against a &lt;code&gt;new RegExp()&lt;/code&gt; instead of just the pattern itself, which only got mentioned in a comment. This is because the &lt;code&gt;.exec()&lt;/code&gt; method behaves similar to a &lt;em&gt;generator function&lt;/em&gt;  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#Description&quot; rel=&quot;noreferrer&quot;&gt;it stops every time there is a match&lt;/a&gt;, but keeps its &lt;code&gt;.lastIndex&lt;/code&gt; to continue from there on the next &lt;code&gt;.exec()&lt;/code&gt; call.&lt;/p&gt;\n\n&lt;h2&gt;Code examples&lt;/h2&gt;\n\n&lt;p&gt;Below is an example of a function &lt;code&gt;searchString&lt;/code&gt; which returns an &lt;code&gt;Array&lt;/code&gt; of all &lt;em&gt;matched patterns&lt;/em&gt;, where each &lt;code&gt;match&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt; with all the containing &lt;em&gt;matched groups&lt;/em&gt;. Instead of using a while loop, I have provided examples using both the &lt;code&gt;Array.prototype.map()&lt;/code&gt; function as well as a more performant way  using a plain &lt;code&gt;for&lt;/code&gt;-loop.&lt;/p&gt;\n\n&lt;h3&gt;Concise versions (less code, more syntactic sugar)&lt;/h3&gt;\n\n&lt;p&gt;These are less performant since they basically implement a &lt;code&gt;forEach&lt;/code&gt;-loop instead of the faster &lt;code&gt;for&lt;/code&gt;-loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Concise ES6/ES2015 syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt; = \n    (&lt;span class=&quot;hljs-params&quot;&gt;string, pattern&lt;/span&gt;) =&amp;gt; \n        string\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;))\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;match&lt;/span&gt; =&amp;gt;&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;)\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(match));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Or if you will, with ES5 syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, pattern&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;))\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;match&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;)\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(match));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;,\n    pattern = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt;(string, pattern);\n&lt;span class=&quot;hljs-comment&quot;&gt;// [[&quot; format_abc&quot;, &quot;abc&quot;], null]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The trailing `null` disappears if you add the `global` flag&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Performant versions (more code, less syntactic sugar)&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Performant ES6/ES2015 syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;string, pattern&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; matches = string.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; matches.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(matches[i]));\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Same thing, but with ES5 syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, pattern&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = string.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; matches.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, pattern.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(matches[i]));\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;,\n    pattern = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;searchString&lt;/span&gt;(string, pattern);\n&lt;span class=&quot;hljs-comment&quot;&gt;// [[&quot; format_abc&quot;, &quot;abc&quot;], null]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The trailing `null` disappears if you add the `global` flag&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have yet to compare these alternatives to the ones previously mentioned in the other answers, but I doubt this approach is less performant and less fail-safe than the others.&lt;/p&gt;\n    ","\n&lt;p&gt;Your syntax probably isn&apos;t the best to keep. FF/Gecko defines RegExp as an extension of Function.&lt;br&gt;\n(FF2 went as far as &lt;code&gt;typeof(/pattern/) == &apos;function&apos;&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;It seems this is specific to FF -- IE, Opera, and Chrome all throw exceptions for it.&lt;/p&gt;\n\n&lt;p&gt;Instead, use either method previously mentioned by others: &lt;code&gt;RegExp#exec&lt;/code&gt; or &lt;code&gt;String#match&lt;/code&gt;.&lt;br&gt;\nThey offer the same results:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;regex&lt;/span&gt;(input);        &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [&quot; format_abc&quot;, &quot;abc&quot;]&lt;/span&gt;\nregex.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(input);   &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [&quot; format_abc&quot;, &quot;abc&quot;]&lt;/span&gt;\ninput.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(regex);  &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [&quot; format_abc&quot;, &quot;abc&quot;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is no need to invoke the &lt;code&gt;exec&lt;/code&gt; method! You can use &quot;match&quot; method directly on the string. Just don&apos;t forget the parentheses.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is cool&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = str.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(This is)( cool)$/&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(matches) ); &lt;span class=&quot;hljs-comment&quot;&gt;// will print [&quot;This is cool&quot;,&quot;This is&quot;,&quot; cool&quot;] or something like that...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Position 0 has a string with all the results. Position 1 has the first match represented by parentheses, and position 2 has the second match isolated in your parentheses. Nested parentheses are tricky, so beware!&lt;/p&gt;\n    ","\n&lt;p&gt;With es2018 you can now &lt;code&gt;String.match()&lt;/code&gt; with named groups, makes your regex more explicit of what it was trying to do.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; url =\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://stackoverflow.com/questions/432493/how-do-you-access-the-matched-groups-in-a-javascript-regular-expression?some=parameter&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?&amp;lt;protocol&amp;gt;https?):\\/\\/(?&amp;lt;hostname&amp;gt;[\\w-\\.]*)\\/(?&amp;lt;pathname&amp;gt;[\\w-\\./]+)\\??(?&amp;lt;querystring&amp;gt;.*?)?$/&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;groups&lt;/span&gt;: segments } = url.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(regex);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(segments);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and you&apos;ll get something like &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;blockquote&gt;\n      &lt;p&gt;{protocol: &quot;https&quot;, hostname: &quot;stackoverflow.com&quot;, pathname: &quot;questions/432493/how-do-you-access-the-matched-groups-in-a-javascript-regular-expression&quot;, querystring: &quot;some=parameter&quot;}&lt;/p&gt;\n    &lt;/blockquote&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;A one liner that is practical only if you have a single pair of parenthesis:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( ( match = myRegex.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;( myStr ) ) &amp;amp;&amp;amp; matches.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;( match[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] ) ) {};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints: abc&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints:  format_abc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: Safari 3, if it matters.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, regex, index&lt;/span&gt;) {\n  index || (index = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// default to the first capturing group&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match = regex.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(string)) {\n    matches.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(match[index]);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; matches;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example :&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Rs.200 is Debited to A/c ...2031 on 02-12-14 20:05:49 (Clear Bal Rs.66248.77) AT ATM. TollFree 1800223344 18001024455 (6am-10pm)&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegEx = &lt;span class=&quot;hljs-regexp&quot;&gt;/clear bal.+?(\\d+\\.?\\d{2})/gi&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get an array containing the first capturing group for every match&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(myString, myRegEx, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Log results&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(matches.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; matches found: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(matches))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(matches);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;string, regex, index&lt;/span&gt;) {\n  index || (index = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// default to the first capturing group&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match = regex.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(string)) {\n    matches.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(match[index]);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; matches;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example :&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;something format_abc something format_def something format_ghi&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myRegEx = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get an array containing the first capturing group for every match&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matches = &lt;span class=&quot;hljs-title function_&quot;&gt;getMatches&lt;/span&gt;(myString, myRegEx, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Log results&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(matches.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; matches found: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(matches))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(matches);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Your code works for me (FF3 on Mac) even if I agree with &lt;a href=&quot;https://stackoverflow.com/users/15459/philho&quot;&gt;PhiLo&lt;/a&gt; that the regex should probably be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;/\\&lt;span class=&quot;hljs-title function_&quot;&gt;bformat_&lt;/span&gt;(.*?)\\b/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(But, of course, I&apos;m not sure because I don&apos;t know the context of the regex.)&lt;/p&gt;\n    ","\n&lt;p&gt;As @cms said in ECMAScript (ECMA-262) you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;matchAll&lt;/code&gt;&lt;/a&gt;. It return an iterator and by putting it in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;[... ]&lt;/code&gt;&lt;/a&gt; (spread operator) it converts to an array.(this regex extract urls of file names)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; text = &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;a href=&quot;http://myhost.com/myfile_01.mp4&quot;&amp;gt;File1&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;http://myhost.com/myfile_02.mp4&quot;&amp;gt;File2&amp;lt;/a&amp;gt;`&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; fileUrls = [...text.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/href=&quot;(http\\:\\/\\/[^&quot;]+\\.\\w{3})\\&quot;/g&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt; =&amp;gt;&lt;/span&gt; r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(fileUrls);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*Regex function for extracting object from &quot;window.location.search&quot; string.\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search = &lt;span class=&quot;hljs-string&quot;&gt;&quot;?a=3&amp;amp;b=4&amp;amp;c=7&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Example search string&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getSearchObj = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;searchString&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match, key, value, obj = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pattern = &lt;span class=&quot;hljs-regexp&quot;&gt;/(\\w+)=(\\w+)/g&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search = searchString.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Remove &apos;?&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (match = pattern.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(search)) {\n        obj[match[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] = match[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;=&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getSearchObj&lt;/span&gt;(search));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You don&apos;t really need an explicit loop to parse multiple matches  pass a replacement function as the second argument as described in: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Using_an_inline_function_that_modifies_the_matched_characters&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;String.prototype.replace(regex, func)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Our chief weapon is {1}, {0} and {2}!&quot;&lt;/span&gt;; \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params= [&lt;span class=&quot;hljs-string&quot;&gt;&apos;surprise&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ruthless efficiency&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; patt = &lt;span class=&quot;hljs-regexp&quot;&gt;/{([^}]+)}/g&lt;/span&gt;;\n\nstr=str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(patt, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;m0, m1, position&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; params[&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(m1)];});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(str);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;m0&lt;/code&gt; argument represents the full matched substring &lt;code&gt;{0}&lt;/code&gt;, &lt;code&gt;{1}&lt;/code&gt;, etc. &lt;code&gt;m1&lt;/code&gt; represents the first matching group, i.e. the part enclosed in brackets in the regex which is &lt;code&gt;0&lt;/code&gt; for the first match. And &lt;code&gt;position&lt;/code&gt; is the starting index within the string where the matching group was found  unused in this case.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;We can access the matched group in a regular expressions by using backslash followed by number of the matching group:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;/([a-z])\\&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;In the code \\1 represented matched by first group ([a-z])&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One line solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;matches&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;text,regex&lt;/span&gt;) =&amp;gt; [...text.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(regex)].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[match]&lt;/span&gt;)=&amp;gt;&lt;/span&gt;match)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you can use this way (must use /g):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;matches&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot; format_abc&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;JUST USE RegExp.$1...$n th group\neg:&lt;/p&gt;\n\n&lt;p&gt;1.To match 1st group RegExp.$1&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;To match 2nd group RegExp.$2&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;if you use 3 group in regex likey(note use after string.match(regex))&lt;/p&gt;\n\n&lt;p&gt;RegExp.$1 RegExp.$2 RegExp.$3&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The rain in ${india} stays safe&quot;&lt;/span&gt;; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = str.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\${(.*?)\\}/ig&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;//i used only one group in above example so RegExp.$1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//easiest way is use RegExp.$1 1st group in regex and 2nd grounp like&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;//RegExp.$2 if exist use after match&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; regex=&lt;span class=&quot;hljs-regexp&quot;&gt;/\\${(.*?)\\}/ig&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The rain in ${SPAIN} stays ${mainly} in the plain&quot;&lt;/span&gt;; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = str.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(regex);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; res) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = match.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(regex);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(match);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$1&lt;/span&gt;)\n \n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Get all group occurrence &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; m=[], s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc  format_def  format_ghi&quot;&lt;/span&gt;;\n\ns.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/g&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt; m.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(y));\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(m);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I you are like me and wish regex would return an Object like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n    &lt;span class=&quot;hljs-attr&quot;&gt;match&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;matchAtIndex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;capturedGroups&lt;/span&gt;: [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;...&apos;&lt;/span&gt; ]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then snip the function from below&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;string | number&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;input&lt;/span&gt;\n *          The input string to match\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;regex | string&lt;/span&gt;}  &lt;span class=&quot;hljs-variable&quot;&gt;expression&lt;/span&gt;\n *          Regular expression \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;string&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;flags&lt;/span&gt;\n *          Optional Flags\n * \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;}\n * [{\n    match: &apos;...&apos;,\n    matchAtIndex: 0,\n    capturedGroups: [ &apos;...&apos;, &apos;...&apos; ]\n  }]     \n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;regexMatch&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input, expression, flags = &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; regex = expression &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt; ? expression : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(expression, flags)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; matches = input.&lt;span class=&quot;hljs-title function_&quot;&gt;matchAll&lt;/span&gt;(regex)\n  matches = [...matches]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; matches.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attr&quot;&gt;match&lt;/span&gt;: item[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],\n      &lt;span class=&quot;hljs-attr&quot;&gt;matchAtIndex&lt;/span&gt;: item.&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;capturedGroups&lt;/span&gt;: item.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? item.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n    }\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;key1:value1, key2:value2 &quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; regex = &lt;span class=&quot;hljs-regexp&quot;&gt;/(\\w+):(\\w+)/g&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; matches = &lt;span class=&quot;hljs-title function_&quot;&gt;regexMatch&lt;/span&gt;(input, regex)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(matches)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I thought you just want to grab all the words containing the &lt;strong&gt;abc&lt;/strong&gt; substring and &lt;strong&gt;store&lt;/strong&gt; the &lt;strong&gt;matched&lt;/strong&gt; group/entries, so I made this script:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;s = &lt;span class=&quot;hljs-string&quot;&gt;&apos;something format_abc another word abc abc_somestring&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(s.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\b\\w*abc\\w*\\b/igm&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;\\b&lt;/code&gt;  - a word boundary&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\w*&lt;/code&gt; - 0+ word chars&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;abc&lt;/code&gt; - your exact match&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\w*&lt;/code&gt; - 0+ word chars&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\b&lt;/code&gt;  - a word boundary&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;References: &lt;a href=&quot;https://stackoverflow.com/questions/42535652/regex-match-all-the-words-that-contains-some-word&quot;&gt;Regex: Match all the words that contains some word&lt;/a&gt;\n&lt;a href=&quot;https://javascript.info/regexp-introduction&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://javascript.info/regexp-introduction&lt;/a&gt;&lt;/p&gt;\n    "],"id":510,"title":"How do you access the matched groups in a JavaScript regular expression?","content":"\n                \n&lt;p&gt;I want to match a portion of a string using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot; rel=&quot;noreferrer&quot;&gt;regular expression&lt;/a&gt; and then access that parenthesized substring:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;something format_abc&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// I want &quot;abc&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;hljs-regexp&quot;&gt;/(?:^|\\s)format_(.*?)(?:\\s|$)/&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;exec&lt;/span&gt;(myString);\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr);     &lt;span class=&quot;hljs-comment&quot;&gt;// Prints: [&quot; format_abc&quot;, &quot;abc&quot;] .. so far so good.&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// Prints: undefined  (???)&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// Prints: format_undefined (!!!)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;What am I doing wrong?&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I&apos;ve discovered that there was nothing wrong with the regular expression code above: the actual string which I was testing against was this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;date format_%A&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Reporting that &quot;%A&quot; is undefined seems a very strange behaviour, but it is not directly related to this question, so I&apos;ve opened a new one, &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/432826/why-is-a-matched-substring-returning-undefined-in-javascript&quot;&gt;Why is a matched substring returning &quot;undefined&quot; in JavaScript?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The issue was that &lt;code&gt;console.log&lt;/code&gt; takes its parameters like a &lt;code&gt;printf&lt;/code&gt; statement, and since the string I was logging (&lt;code&gt;&quot;%A&quot;&lt;/code&gt;) had a special value, it was trying to find the value of the next parameter.&lt;/p&gt;\n    ","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817","postType":"QUESTION","createdAt":"2022-07-09T17:37:13.000Z","updatedAt":"2022-07-09T17:37:13.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Variables are not behaving as expected","slug":"variables-are-not-behaving-as-expected-1657384865672"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"Is there any way to kill a Thread?","slug":"is-there-any-way-to-kill-a-thread-1657387859831"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"commandButton/commandLink/ajax action/listener method not invoked or input value not set/updated","slug":"commandbuttoncommandlinkajax-actionlistener-method-not-invoked-or-input-value-not-setupdated-1657384667519"},{"title":"How can I transition height: 0; to height: auto; using CSS?","slug":"how-can-i-transition-height:-0-to-height:-auto-using-css-1657388022100"}]},"__N_SSG":true}