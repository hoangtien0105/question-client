{"pageProps":{"data":{"answer":["\n&lt;p&gt;In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that &quot;Jon&quot; and &quot;Inbar&quot; are objects joined to the verb &quot;equals&quot;, but the Python interpreter is more literal minded.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is logically equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which, for user Bob, is equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; operator chooses the first argument with a positive &lt;a href=&quot;http://docs.python.org/3/library/stdtypes.html#truth-value-testing&quot; rel=&quot;noreferrer&quot;&gt;truth value&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And since &quot;Jon&quot; has a positive truth value, the &lt;code&gt;if&lt;/code&gt; block executes. That is what causes &quot;Access granted&quot; to be printed regardless of the name given.&lt;/p&gt;\n&lt;p&gt;All of this reasoning also applies to the expression &lt;code&gt;if &quot;Kevin&quot; or &quot;Jon&quot; or &quot;Inbar&quot; == name&lt;/code&gt;. the first value, &lt;code&gt;&quot;Kevin&quot;&lt;/code&gt;, is true, so the &lt;code&gt;if&lt;/code&gt; block executes.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;There are two common ways to properly construct this conditional.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use multiple &lt;code&gt;==&lt;/code&gt; operators to explicitly check against each value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Compose a collection of valid values (a set, a list or a tuple for example), and use the &lt;code&gt;in&lt;/code&gt; operator to test for membership:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;}:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In general of the two the second should be preferred as it&apos;s easier to read and also faster:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name == &quot;Kevin&quot; or name == &quot;Jon&quot; or name == &quot;Inbar&quot;&apos;&lt;/span&gt;,\n    setup=&lt;span class=&quot;hljs-string&quot;&gt;&quot;name=&apos;Inbar&apos;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.4247764749999945&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timeit.timeit(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name in {&quot;Kevin&quot;, &quot;Jon&quot;, &quot;Inbar&quot;}&apos;&lt;/span&gt;, setup=&lt;span class=&quot;hljs-string&quot;&gt;&quot;name=&apos;Inbar&apos;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.18493307199999265&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;For those who may want proof that &lt;code&gt;if a == b or c or d or e: ...&lt;/code&gt; is indeed parsed like this. The built-in &lt;code&gt;ast&lt;/code&gt; module provides an answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a == b or c or d or e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;eval&quot;&lt;/span&gt;)\n&amp;lt;ast.Expression &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7f929c898220&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ast.dump(_, indent=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\nExpression(\n    body=BoolOp(\n        op=Or(),\n        values=[\n            Compare(\n                left=Name(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, ctx=Load()),\n                ops=[\n                    Eq()],\n                comparators=[\n                    Name(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, ctx=Load())]),\n            Name(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, ctx=Load()),\n            Name(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, ctx=Load()),\n            Name(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, ctx=Load())]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As one can see, it&apos;s the boolean operator &lt;code&gt;or&lt;/code&gt; applied to four sub-expressions: comparison &lt;code&gt;a == b&lt;/code&gt;; and simple expressions &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, and &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are 3 condition checks in &lt;code&gt;if name == &quot;Kevin&quot; or &quot;Jon&quot; or &quot;Inbar&quot;:&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;name == &quot;Kevin&quot;&lt;/li&gt;\n&lt;li&gt;&quot;Jon&quot;&lt;/li&gt;\n&lt;li&gt;&quot;Inbar&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;and this if statement is equivalent to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since &lt;code&gt;elif &quot;Jon&quot;&lt;/code&gt; will always be true so access to any user is granted&lt;/p&gt;\n&lt;h2&gt;Solution&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;You can use any one method below&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;]:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Slow&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Slow + Unnecessary code&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Summarising all existing answers&lt;/h1&gt;\n&lt;h5&gt;(And adding a few of my points)&lt;/h5&gt;\n&lt;h2&gt;Explanation :&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is logically equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which, for user Bob, is equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;NOTE : Python evaluates the logical value of any non-zero integer as &lt;code&gt;True&lt;/code&gt;. Therefore, all Non-empty lists, sets, strings, etc. are evaluable and return &lt;code&gt;True&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; operator chooses the first argument with a positive truth value.&lt;/p&gt;\n&lt;p&gt;Therefore, &quot;Jon&quot; has a positive truth value and the if block executes, since it is now equivalent to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is what causes &quot;Access granted&quot; to be printed regardless of the name input.&lt;/p&gt;\n&lt;h2&gt;Solutions :&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Solution 1 :&lt;/strong&gt; Use multiple &lt;code&gt;==&lt;/code&gt; operators to explicitly check against each value&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Solution 2 :&lt;/strong&gt; Compose a collection of valid values (a set, a list or a tuple for example), and use the &lt;code&gt;in&lt;/code&gt; operator to test for membership &lt;em&gt;(faster, preferred method)&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;}:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OR&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;]:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Solution 3 :&lt;/strong&gt; Use the basic &lt;em&gt;(and not very efficient)&lt;/em&gt; &lt;code&gt;if-elif-else&lt;/code&gt; structure&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simple engineering problem, let&apos;s simply it a bit further.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: a,b,c,d=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: a==b\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, inherited from the language C, Python evaluates the logical value of a non zero integer as True.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n    ...:     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;yey&quot;&lt;/span&gt;)\n    ...:\nyey\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, Python builds on that logic and let you use logic literals such as or on integers, and so &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: a==b &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; d\nOut[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The proper way to write it would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (b,c,d):\n    ...:     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access granted&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For safety I&apos;d also suggest you don&apos;t hard code passwords.&lt;/p&gt;\n    ","\n&lt;h1&gt;Not-empty lists, sets, strings, etc. are evaluable and, therefore, return True.&lt;/h1&gt;\n&lt;p&gt;Therefore, when you say:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Raul&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You are actually saying:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Raul&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since at least one of &quot;John&quot; and &quot;Inbar&quot; is not an empty string, the whole expression always returns True!&lt;/p&gt;\n&lt;h1&gt;The solution:&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Raul&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a == &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Raul&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;}:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Approaches&lt;/h1&gt;\n&lt;h2&gt;How a data scientist approaches this problem&lt;/h2&gt;\n&lt;p&gt;The simplest way possible is to eliminate the need for comparison operators and use a list. This looks impressive on security systems because you learn to access ORMs.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;user = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter name: &quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; user &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;}:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted, &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(user) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, you can resemble the &lt;em&gt;exact&lt;/em&gt; same code above, just put the list of registered users in their own list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;user = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter name: &quot;&lt;/span&gt;)\nusers = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a million more users if you like&quot;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; user &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; users:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted, &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(user) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you wanted to complete this protocol safely without the risk of attack, set up double parameters. This would check your mini-ORM for &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; name fields, as well as a &lt;code&gt;password&lt;/code&gt; or &lt;code&gt;secret question&lt;/code&gt; key. Objects can be sorted like this if you want to efficiently lazy-load user credentials without hashing:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lazy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n   j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# For example&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; j &amp;lt; i:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; j\n      j += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The loop will consume &lt;strong&gt;only&lt;/strong&gt; the yielded values to save time and energy on your system:&lt;/p&gt;\n&lt;p&gt;You can then do something with the iterated list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lazy_range(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n   do_something_here(j)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This problem can be approached from any angle: memory management, security, or simply by an organic list or packaged ORM.&lt;/p&gt;\n    "],"id":173,"title":"Why does \"a == x or y or z\" always evaluate to True?","content":"\n                \n&lt;p&gt;I am writing a security system that denies access to unauthorized users.&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello. Please enter your name: &quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jon&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Inbar&quot;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access granted.&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It grants access to authorized users as expected, but it also lets in unauthorized users!&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Hello. Please enter your name: Bob\nAccess granted.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Why does this occur? I&apos;ve plainly stated to only grant access when &lt;code&gt;name&lt;/code&gt; equals Kevin, Jon, or Inbar. I have also tried the opposite logic, &lt;code&gt;if &quot;Kevin&quot; or &quot;Jon&quot; or &quot;Inbar&quot; == name&lt;/code&gt;, but the result is the same.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: this question is intended as the canonical duplicate target of this very common problem. There is another popular question &lt;a href=&quot;https://stackoverflow.com/questions/15112125/how-to-test-multiple-variables-against-a-single-value&quot;&gt;How to test multiple variables for equality against a single value?&lt;/a&gt; that has the same fundamental problem, but the comparison targets are reversed. This question should not be closed as a duplicate of that one as this problem is encountered by newcomers to Python who might have difficulties applying the knowledge from the reversed question to their problem.&lt;/em&gt;&lt;/p&gt;\n    ","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216","postType":"QUESTION","createdAt":"2022-07-09T16:40:55.000Z","updatedAt":"2022-07-09T16:40:55.000Z","tags":[{"id":636,"name":"boolean","slug":"boolean","createdAt":"2022-07-09T16:40:55.000Z","updatedAt":"2022-07-09T16:40:55.000Z","Questions_Tags":{"questionId":173,"tagId":636}},{"id":637,"name":"boolean-expression","slug":"boolean-expression","createdAt":"2022-07-09T16:40:55.000Z","updatedAt":"2022-07-09T16:40:55.000Z","Questions_Tags":{"questionId":173,"tagId":637}}],"relatedQuestions":[{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216","tags":[{"name":"boolean","Questions_Tags":{"questionId":173,"tagId":636}},{"name":"boolean-expression","Questions_Tags":{"questionId":173,"tagId":637}}]}]},"randomQuestions":[{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"With arrays, why is it the case that a[5] == 5[a]?","slug":"with-arrays-why-is-it-the-case-that-a5-5a-1657387956216"},{"title":"How do I make a list of data frames?","slug":"how-do-i-make-a-list-of-data-frames-1657385480437"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"How do I attach events to dynamic HTML elements with jQuery? [duplicate]","slug":"how-do-i-attach-events-to-dynamic-html-elements-with-jquery-duplicate-1657387992964"},{"title":"How to deal with SettingWithCopyWarning in Pandas","slug":"how-to-deal-with-settingwithcopywarning-in-pandas-1657384778377"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"Unfortunately MyApp has stopped. How can I solve this?","slug":"unfortunately-myapp-has-stopped.-how-can-i-solve-this-1657384402171"},{"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890"},{"title":"Scanner is skipping nextLine() after using next() or nextFoo()?","slug":"scanner-is-skipping-nextline()-after-using-next()-or-nextfoo()-1657384379697"},{"title":"How to close/hide the Android soft keyboard programmatically?","slug":"how-to-closehide-the-android-soft-keyboard-programmatically-1657388217420"},{"title":"\"Thinking in AngularJS\" if I have a jQuery background? [closed]","slug":"\"thinking-in-angularjs\"-if-i-have-a-jquery-background-closed-1657384761159"}]},"__N_SSG":true}