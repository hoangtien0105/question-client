{"pageProps":{"data":{"answer":["\n&lt;p&gt;Instead of using the &lt;code&gt;/regex\\d/g&lt;/code&gt; syntax, you can construct a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;noreferrer&quot;&gt;RegExp&lt;/a&gt; object:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex\\\\d&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replace,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can dynamically create regex objects this way. Then you will do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mystring1&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;newstring&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As Eric Wendelin mentioned, you can do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(str1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern matching .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This yields &lt;code&gt;&quot;regex matching .&quot;&lt;/code&gt;. However, it will fail if str1 is &lt;code&gt;&quot;.&quot;&lt;/code&gt;. You&apos;d expect the result to be &lt;code&gt;&quot;pattern matching regex&quot;&lt;/code&gt;, replacing the period with &lt;code&gt;&quot;regex&quot;&lt;/code&gt;, but it&apos;ll turn out to be...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;regexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregex\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because, although &lt;code&gt;&quot;.&quot;&lt;/code&gt; is a String, in the RegExp constructor it&apos;s still interpreted as a regular expression, meaning any non-line-break character, meaning every character in the string. For this purpose, the following function may be useful:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;quote&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([.?*+^$[\\]\\\\(){}|-])/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$1&quot;&lt;/span&gt;);\n };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;quote&lt;/span&gt;(str1), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern matching .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yielding &lt;code&gt;&quot;pattern matching regex&quot;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;&quot;ABABAB&quot;.replace(/B/g, &quot;A&quot;);&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As always: don&apos;t use regex unless you have to. For a simple string replace, the idiom is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABABAB&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you don&apos;t have to worry about the quoting issues mentioned in Gracenotes&apos;s answer.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to get &lt;em&gt;all&lt;/em&gt; occurrences (&lt;code&gt;g&lt;/code&gt;), be case insensitive (&lt;code&gt;i&lt;/code&gt;), and use boundaries so that it isn&apos;t a word within another word (&lt;code&gt;\\\\b&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${replaceThis}&lt;/span&gt;\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; inputString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m John, or johnny, but I prefer john.&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; replaceThis = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${replaceThis}&lt;/span&gt;\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(inputString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// I&apos;m Jack, or johnny, but I prefer Jack.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern,attributes);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt=&lt;span class=&quot;hljs-regexp&quot;&gt;/pattern/&lt;/span&gt;attributes;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot; rel=&quot;noreferrer&quot;&gt;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For anyone looking to use a variable with the &lt;strong&gt;match&lt;/strong&gt; method, this worked for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; alpha = &lt;span class=&quot;hljs-string&quot;&gt;&apos;fig&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;food fight&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(alpha + &lt;span class=&quot;hljs-string&quot;&gt;&apos;ht&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// fight&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;( replaceThis, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt; ), withThis );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to build the regular expression dynamically and for this &lt;strong&gt;you must use the &lt;code&gt;new RegExp(string)&lt;/code&gt; constructor with escaping&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;There is a built-in function in &lt;a href=&quot;https://api.jqueryui.com/autocomplete/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery UI autocomplete widget&lt;/a&gt; called &lt;code&gt;$.ui.autocomplete.escapeRegex&lt;/code&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It&apos;ll take a single string argument and escape all regex characters,\nmaking the result safe to pass to &lt;code&gt;new RegExp()&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you are not using jQuery UI you can copy its definition &lt;a href=&quot;https://github.com/jquery/jquery-ui/blob/main/ui/widgets/autocomplete.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;from the source&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; value &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;( &lt;span class=&quot;hljs-regexp&quot;&gt;/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$&amp;amp;&quot;&lt;/span&gt; );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And use it like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;[z-a][z-a][z-a]&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(escapeRegex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[z-a]&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;[a-z]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//            escapeRegex(&quot;[z-a]&quot;)       -&amp;gt; &quot;\\[z\\-a\\]&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// new RegExp(escapeRegex(&quot;[z-a]&quot;), &quot;g&quot;) -&amp;gt; /\\[z\\-a\\]/g&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// end result                            -&amp;gt; &quot;[a-z][a-z][a-z]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;replaceThis, withThis&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replaceThis,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;); \n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, withThis);\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aa = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abab54..aba&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;v&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test with this &lt;a href=&quot;http://www.pagecolumn.com/tool/regtest.htm&quot; rel=&quot;noreferrer&quot;&gt;tool&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([.?*+^$[\\]\\\\(){}|-])/ig&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$1&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;), b)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test it like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; whatever = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Some [b]random[/b] text in a [b]sentence.[/b]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(whatever.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;And the CoffeeScript version of &lt;a href=&quot;https://stackoverflow.com/questions/494035/how-do-you-use-a-variable-in-a-regular-expression/13608644#13608644&quot;&gt;Steven Penny&apos;s answer&lt;/a&gt;, since this is #2 Google result....even if CoffeeScript is just JavaScript with a lot of characters removed...;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;baz = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\nfilter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(baz + &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;food fight&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(filter)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// food&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And in my particular case:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;robot.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = hubot\nfilter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(robot.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; msg.&lt;span class=&quot;hljs-property&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(filter)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;True!&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To satisfy my need to insert a variable/alias/function into a Regular Expression, this is what I came up with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;oldre = &lt;span class=&quot;hljs-regexp&quot;&gt;/xx\\(&quot;&quot;\\)/&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newre&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(e.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\//g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/xx/g&lt;/span&gt;, yy), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;)\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;newre&lt;/span&gt;(oldre), &lt;span class=&quot;hljs-string&quot;&gt;&quot;withThis&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &apos;oldre&apos; is the original regexp that I want to insert a variable,\n&apos;xx&apos; is the placeholder for that variable/alias/function,\nand &apos;yy&apos; is the actual variable name, alias, or function.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use a string as a regular expression. Dont forget to use &lt;strong&gt;new RegExp&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; yourFunction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;^-?\\\\d+(?:\\\\.\\\\d{0,&apos;&lt;/span&gt; + yourVar + &lt;span class=&quot;hljs-string&quot;&gt;&apos;})?&apos;&lt;/span&gt;\n      )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another replaceAll implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;stringToFind, stringToReplace&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( stringToFind == stringToReplace) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(stringToFind);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            temp = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(stringToFind, stringToReplace);\n            index = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(stringToFind);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this if &lt;code&gt;$1&lt;/code&gt; does not work for you:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pattern = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;amman&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc Amman efg&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(pattern, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc Amman efg&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(pattern)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While you can make dynamically-created RegExp&apos;s (as per the other responses to this question), I&apos;ll echo my comment from a &lt;a href=&quot;https://stackoverflow.com/questions/487509/passing-variable-to-a-regexp-in-javascript/488133#488133&quot;&gt;similar post&lt;/a&gt;: The functional form of &lt;a href=&quot;https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Replace&quot; rel=&quot;nofollow noreferrer&quot;&gt;String.replace()&lt;/a&gt; is extremely useful and in many cases reduces the need for dynamically-created RegExp objects. (which are kind of a pain &apos;cause you have to express the input to the RegExp constructor as a string rather than use the slashes /[A-Z]+/ regexp literal format)&lt;/p&gt;\n    ","\n&lt;p&gt;This self calling function will iterate over replacerItems using an index, and change replacerItems[index] globally on the string with each pass.   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; replacerItems = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;];    \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, index&lt;/span&gt;){\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item = replacerItems[index];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`[&lt;span class=&quot;hljs-subst&quot;&gt;${item}&lt;/span&gt;]`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newStr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(regex, &lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; replacerItems.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(newStr, index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newStr;\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// console.log(replacer(&apos;abcdefg&apos;, 0)) will output &apos;zzzdefg&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of these answers were clear to me. I eventually found a good explanation at &lt;em&gt;&lt;a href=&quot;http://burnignorance.com/php-programming-tips/how-to-use-a-variable-in-replace-function-of-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to use a variable in replace function of JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The simple answer is:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search_term = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(search_term, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\ntext = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(search_term, replace_term);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Find&lt;/span&gt;_and_replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lorem&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Chocolate&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Find&lt;/span&gt;_and_replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ipsum&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ice-cream&quot;&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Find_and_replace&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search_term, replace_term&lt;/span&gt;) {\n  text = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textbox&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search_term = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(search_term, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n  text = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(search_term, replace_term);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textbox&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(text);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;textbox&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;textbox&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can always use &lt;code&gt;indexOf&lt;/code&gt; repeatedly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;substring, replacement&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(substring, lastIndex);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        result += &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(lastIndex, index) + replacement;\n        lastIndex = index + substring.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(lastIndex);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This doesnt go into an infinite loop when the replacement contains the match.&lt;/p&gt;\n    ","\n&lt;p&gt;One way to implement is by taking the value from a text field which is the one you want to replace and another is the &quot;replace with&quot; text field, getting the value from text-field in a variable and setting the variable to RegExp function to further replace. In my case I am using jQuery, but you can also do it by only JavaScript too.&lt;/p&gt;\n&lt;p&gt;JavaScript code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace =&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;replace}&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// getting a value from a text field with I want to replace&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace_with = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;with&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Getting the value from another text fields with which I want to replace another string.&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sRegExInput = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replace, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;children&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;($(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(sRegExInput,replace_with));\n  });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code is on the Onclick event of a button, and you can put this in a function to call.&lt;/p&gt;\n&lt;p&gt;So now you can pass a variable in the replace function.&lt;/p&gt;\n    ","\n&lt;p&gt;For multiple replace without regular expressions I went with the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a cat man. I like cats&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; find = &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; replace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;;\n\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Count how many occurrences there are of the string to find &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// inside the str to be examined.&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; findCount = str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(find).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; loopCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (loopCount &amp;lt; findCount) \n      {\n        str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(find, replace);\n        loopCount = loopCount + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n      }  \n\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str);\n      &lt;span class=&quot;hljs-comment&quot;&gt;// I am a dog man. I like dogs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39422368/4683230&quot;&gt;The important part of the solution was found here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you pass the variable with the correct syntax, you can do this like so with the code below.&lt;/p&gt;\n&lt;p&gt;This has the added benefit of using the flags in the same variable.&lt;/p&gt;\n&lt;p&gt;Also you don&apos;t have to double escape &lt;code&gt;\\&lt;/code&gt; in the regular expression when it comes to &lt;code&gt;\\w&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;regexVariable example: This is my example of RegExp replacing with a regexVariable.&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reVar = &lt;span class=&quot;hljs-regexp&quot;&gt;/(.*?)(regex\\w+?iable)(.+?)/gi&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resStr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(reVar), &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1 :) :) :) $2 :) :) :)$3&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(resStr);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// :) :) :) regexVariable :) :) :) example: This is my example of RegExp replacing with a  :) :) :) regexVariable :) :) :).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The prototype version as per the OP&apos;s example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;regexVariable prototype: This is my example of RegExp replacing with a regexVariable.&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;regexVariable&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;reFind, reReplace&lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(reFind), reReplace);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reVar = &lt;span class=&quot;hljs-regexp&quot;&gt;/(.*?)(regex\\w+?iable)(.+?)/gi&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;regexVariable&lt;/span&gt;(reVar, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1 :) :) :) $2 :) :) :)$3&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// :) :) :) regexVariable :) :) :) prototype: This is my example of replacing with a  :) :) :) regexVariable :) :) :).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As a relative JavaScript novice, the accepted answer &lt;a href=&quot;https://stackoverflow.com/a/494046/1904943&quot;&gt;https://stackoverflow.com/a/494046/1904943&lt;/a&gt; is noted / appreciated, but it is not very intuitive.&lt;/p&gt;\n&lt;p&gt;Here is a simpler interpretation, by example (using a &lt;a href=&quot;https://stackoverflow.com/questions/17132593/simple-javascript-ide/66376974#66376974&quot;&gt;simple JavaScript IDE&lt;/a&gt;).&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple pie, banana loaf&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/pie/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bpie\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/pi/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIEe, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bpi\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_word = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pie&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/match_word/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\b`${bmatch_word}`\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... new RegExp(): be sure to \\-escape your backslashes: \\b &amp;gt;&amp;gt; \\\\b ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_term = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pie&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${match_term}&lt;/span&gt;\\\\b)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PiE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PiE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple **PIE**, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple **PIE**, banana loaf&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;E.g.: replacing (color highlighting) words in string / sentence, [optionally] if the search term matches a more than a user-defined proportion of the matched word.&lt;/p&gt;\n&lt;p&gt;Note: original character case of matched term is retained. &lt;code&gt;hl&lt;/code&gt;: highlight; &lt;code&gt;re&lt;/code&gt;: regex | regular expression&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;mySentence = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple, boOk? BOoks; booKEd. BookMark, &apos;BookmarkeD&apos;, bOOkmarks! bookmakinG, Banana; bE, BeEn, beFore.&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mySentence, hl_term, hl_re&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mySentence [raw]:&apos;&lt;/span&gt;, mySentence)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hl_term:&apos;&lt;/span&gt;, hl_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| hl_term.length:&apos;&lt;/span&gt;, hl_term.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n    cutoff = hl_term.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cutoff:&apos;&lt;/span&gt;, cutoff)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `.match()` conveniently collects multiple matched items&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// (including partial matches) into an [array]&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_terms  = mySentence.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(hl_re, hl_term);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hl_terms == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;No matches to hl_term &quot;&apos;&lt;/span&gt; + hl_term + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;; echoing input string then exiting ...&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mySentence;\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hl_terms:&apos;&lt;/span&gt;, hl_terms)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  i &amp;lt; hl_terms.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;----------------------------------------&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; + i + &lt;span class=&quot;hljs-string&quot;&gt;&apos;]:&apos;&lt;/span&gt;, hl_terms[i], &lt;span class=&quot;hljs-string&quot;&gt;&apos;| length:&apos;&lt;/span&gt;, hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| parseInt(0.7(length)):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;*hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TEST: if (hl_terms[i].length &amp;gt;= cutoff*10) {&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (cutoff &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match_term = hl_terms[i].&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;matched term:&apos;&lt;/span&gt;, match_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;[cutoff length:&apos;&lt;/span&gt;, cutoff, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| 0.7(matched term length):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${match_term}&lt;/span&gt;\\\\b)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\n            mySentence = mySentence.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;$1&amp;lt;/font&amp;gt;&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match_term = hl_terms[i].&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;NO match:&apos;&lt;/span&gt;, match_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;[cutoff length:&apos;&lt;/span&gt;, cutoff, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| 0.7(matched term length):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mySentence;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// TESTS:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;be&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;bee&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;before&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;book&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_term = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bookma&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;Leibniz&apos;;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This regex matches from start of word:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${hl_term}&lt;/span&gt;[A-z]*)\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\nmySentence = &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(mySentence, hl_term, hl_re);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mySentence [processed]:&apos;&lt;/span&gt;, mySentence)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;mySentence [raw]: Apple, boOk? BOoks; booKEd. BookMark, &apos;BookmarkeD&apos;,\nbOOkmarks! bookmakinG, Banana; bE, BeEn, beFore.\n\nhl_term: bookma | hl_term.length: 6\ncutoff: 6\nhl_terms: Array(4) [ &quot;bookmark&quot;, &quot;bookmarked&quot;, &quot;bookmarks&quot;, &quot;bookmaking&quot; ]\n\n----------------------------------------\n[0]: bookmark | length: 8 | parseInt(0.7(length)): 5\nmatched term: bookmark [cutoff length: 6 | 0.7(matched term length): 5\n----------------------------------------\n[1]: bookmarked | length: 10 | parseInt(0.7(length)): 7\nNO match: bookmarked [cutoff length: 6 | 0.7(matched term length): 7\n----------------------------------------\n[2]: bookmarks | length: 9 | parseInt(0.7(length)): 6\nmatched term: bookmarks [cutoff length: 6 | 0.7(matched term length): 6\n----------------------------------------\n[3]: bookmaking | length: 10 | parseInt(0.7(length)): 7\nNO match: bookmaking [cutoff length: 6 | 0.7(matched term length): 7\n\nmySentence [processed]: Apple, boOk? BOoks; booKEd.\n&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;BookMark&amp;lt;/font&amp;gt;, &apos;BookmarkeD&apos;,\n&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;bOOkmarks&amp;lt;/font&amp;gt;! bookmakinG,\nBanana; bE, BeEn, beFore.\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":423,"title":"How do you use a variable in a regular expression?","content":"\n                \n&lt;p&gt;I would like to create a &lt;code&gt;String.replaceAll()&lt;/code&gt; method in JavaScript and I&apos;m thinking that using a regex would be most terse way to do it.  However, I can&apos;t figure out how to pass a variable in to a regex.  I can do this already which will replace all the instances of &lt;code&gt;&quot;B&quot;&lt;/code&gt; with &lt;code&gt;&quot;A&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;ABABAB&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/B/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I want to do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;replaceThis, withThis&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/replaceThis/g&lt;/span&gt;, withThis);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But obviously this will only replace the text &lt;code&gt;&quot;replaceThis&quot;&lt;/code&gt;...so how do I pass this variable in to my regex string?&lt;/p&gt;\n    ","slug":"how-do-you-use-a-variable-in-a-regular-expression-1657387939007","postType":"QUESTION","createdAt":"2022-07-09T17:32:19.000Z","updatedAt":"2022-07-09T17:32:19.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"Make container shrink-to-fit child elements as they wrap","slug":"make-container-shrink-to-fit-child-elements-as-they-wrap-1657388134549"},{"title":"Unfortunately MyApp has stopped. How can I solve this?","slug":"unfortunately-myapp-has-stopped.-how-can-i-solve-this-1657384402171"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"How to print without a newline or space","slug":"how-to-print-without-a-newline-or-space-1657387814213"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"How do I vertically center text with CSS? [duplicate]","slug":"how-do-i-vertically-center-text-with-css-duplicate-1657387645821"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"How to fix java.lang.UnsupportedClassVersionError: Unsupported major.minor version","slug":"how-to-fix-java.lang.unsupportedclassversionerror:-unsupported-major.minor-version-1657384863422"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"What is a stack trace, and how can I use it to debug my application errors?","slug":"what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors-1657384750732"},{"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827"},{"title":"Selenium - wait until element is present, visible and interactable","slug":"selenium-wait-until-element-is-present-visible-and-interactable-1657384820071"},{"title":"Big O, how do you calculate/approximate it?","slug":"big-o-how-do-you-calculateapproximate-it-1657387856392"},{"title":"Determine Whether Two Date Ranges Overlap","slug":"determine-whether-two-date-ranges-overlap-1657387924335"}]},"__N_SSG":true}