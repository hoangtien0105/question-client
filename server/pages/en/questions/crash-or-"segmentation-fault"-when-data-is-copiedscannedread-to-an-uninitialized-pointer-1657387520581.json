{"pageProps":{"data":{"answer":["\n&lt;p&gt;A pointer is a special type of variable, which can only contain an address of another variable. It cannot contain any data. You cannot &quot;copy/store data into a pointer&quot; - that doesn&apos;t make any sense. You can only set a pointer to point at data allocated elsewhere.&lt;/p&gt;\n\n&lt;p&gt;This means that in order for a pointer to be meaningful, it must always point at a valid memory location. For example it could point at memory allocated on the stack:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; data = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* ptr = &amp;amp;data;\n  ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or memory allocated dynamically on the heap:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* ptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is always a bug to use a pointer before it has been initialized. It does not yet point at valid memory. &lt;/p&gt;\n\n&lt;p&gt;These examples could all lead to program crashes or other kinds of unexpected behavior, such as &quot;segmentation faults&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*** examples of incorrect use of pointers ***/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* bad;\n*bad = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* bad;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(bad, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead, you must ensure that the pointer points at (enough) allocated memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*** examples of correct use of pointers ***/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; var;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* good = &amp;amp;var;\n*good = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* good = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// allocates memory for 5 characters *and*  the null terminator&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(good, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that you can also set a pointer to point at a well-defined &quot;nowhere&quot;, by letting it point to &lt;code&gt;NULL&lt;/code&gt;. This makes it a &lt;em&gt;null pointer&lt;/em&gt;, which is a pointer that is guaranteed not to point at any valid memory. This is different from leaving the pointer completely uninitialized.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p1 = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to nowhere&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p2;        &lt;span class=&quot;hljs-comment&quot;&gt;// uninitialized pointer, pointer to &quot;anywhere&quot;, cannot be used yet&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yet, should you attempt to access the memory pointed at by a null pointer, you can get similar problems as when using an uninitialized pointer: crashes or segmentation faults. In the best case, your system notices that you are trying to access the address null and then throws a &quot;null pointer exception&quot;. &lt;/p&gt;\n\n&lt;p&gt;The solution for null pointer exception bugs is the same: you must set the pointer to point at valid memory before using it.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pointers pointing at invalid data&lt;/strong&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/4570366/pointer-to-local-variable&quot;&gt;How to access a local variable from a different function using pointers?&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope&quot;&gt;Can a local variable&apos;s memory be accessed outside its scope?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Segmentation fault and causes&lt;/strong&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/2346806/what-is-segmentation-fault&quot;&gt;What is a segmentation fault?&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/164194/why-do-i-get-a-segmentation-fault-when-writing-to-a-string-initialized-with-cha&quot;&gt;Why do I get a segmentation fault when writing to a string initialized with &quot;char *s&quot; but not &quot;char s[]&quot;?&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/1704407/what-is-the-difference-between-char-s-and-char-s-in-c&quot;&gt;What is the difference between char s[] and char *s?&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/33047452/definitive-list-of-common-reasons-for-segmentation-faults&quot;&gt;Definitive List of Common Reasons for Segmentation Faults&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/212466/what-is-a-bus-error&quot;&gt;What is a bus error?&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Pointers only point to a memory location. You created a pointer but you did not bind to a memory location yet. &lt;code&gt;strcpy&lt;/code&gt; wants you to pass two pointers (&lt;em&gt;first one mustn&apos;t be constant&lt;/em&gt;) that point to two character arrays like this signature:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * &lt;span class=&quot;hljs-title function_&quot;&gt;strcpy&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * destination, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * source )&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;sample usage:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* ptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;);  \n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(ptr, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n \n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;];  \n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(str, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You can try the following code snippet to read string until reaching newline character (*you can also add other whitespace characters like &lt;code&gt;&quot;%[^\\t\\n]s&quot;&lt;/code&gt;(&lt;em&gt;tab, newline&lt;/em&gt;) or &lt;code&gt;&quot;%[^ \\t\\n]s&quot;&lt;/code&gt; (&lt;em&gt;space, tab, newline&lt;/em&gt;)).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%31[^\\n]&quot;&lt;/span&gt;, ptr);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(In real life, don&apos;t forget to check the return value from &lt;code&gt;scanf()&lt;/code&gt;!)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;One situation that frequently occurs while learning C is trying to use single quotes to denote a string literal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; ptr[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(ptr, &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// crash here!&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//            ^     ^   because of &apos; instead of &quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C, &lt;code&gt;&apos;h&apos;&lt;/code&gt; is a single character literal, while &lt;code&gt;&quot;h&quot;&lt;/code&gt; is a string literal containing an &lt;code&gt;&apos;h&apos;&lt;/code&gt; and a null terminator &lt;code&gt;\\0&lt;/code&gt; (that is, a 2 char array). Also, in C, the type of a character literal is &lt;code&gt;int&lt;/code&gt;, that is, &lt;code&gt;sizeof(&apos;h&apos;)&lt;/code&gt; is equivalent to &lt;code&gt;sizeof(int)&lt;/code&gt;, while &lt;code&gt;sizeof(char)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; h = &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Size: %zu\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(h));     &lt;span class=&quot;hljs-comment&quot;&gt;// Size: 1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Size: %zu\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;));   &lt;span class=&quot;hljs-comment&quot;&gt;// likely output: Size: 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This happens because you have &lt;strong&gt;not allocated&lt;/strong&gt; memory for the &lt;strong&gt;pointer&lt;/strong&gt; &lt;code&gt;char* ptr&lt;/code&gt; .\nIn this case you have to &lt;em&gt;dynamically allocate&lt;/em&gt; memory for the pointer.&lt;/p&gt;\n\n&lt;p&gt;Two functions &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;calloc()&lt;/code&gt; can be used for &lt;code&gt;dynamic memory allocation&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Try this code :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* ptr;\nptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// allocate space for 50 characters.&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(ptr, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the use of &lt;code&gt;*ptr&lt;/code&gt; over don&apos;t forget to &lt;em&gt;deallocate memory&lt;/em&gt; allocated for &lt;code&gt;*ptr&lt;/code&gt; .This can be done using &lt;code&gt;free()&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(ptr);  &lt;span class=&quot;hljs-comment&quot;&gt;// deallocating memory.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Size of &lt;em&gt;dynamically allocated memory&lt;/em&gt; can be changed by using &lt;code&gt;realloc()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *tmp = &lt;span class=&quot;hljs-built_in&quot;&gt;realloc&lt;/span&gt;(ptr, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// allocate space for 100 characters.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (! tmp) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// reallocation failed, ptr not freed&lt;/span&gt;\n    perror(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Resize failed&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);       \n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// reallocation succeeded, old ptr freed&lt;/span&gt;\n    ptr = tmp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In most cases &lt;strong&gt;&quot;segmentation fault&quot;&lt;/strong&gt; happens due to error in &lt;em&gt;memory allocation&lt;/em&gt; or &lt;em&gt;array out of bound&lt;/em&gt; cases.&lt;/p&gt;\n    ","\n&lt;p&gt;For making a modifiable copy of a string, instead of using &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;strlen&lt;/code&gt; and &lt;code&gt;strcpy&lt;/code&gt;, the POSIX C library has a handy function called &lt;code&gt;strdup&lt;/code&gt; in &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt; that will return a copy of the passed-in null-terminated string with allocated storage duration. After use the pointer should be released with &lt;code&gt;free&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* ptr;\nptr = strdup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);\nptr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(ptr);\n&lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(ptr);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":290,"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","content":"\n                \n&lt;p&gt;This question is meant to be used as reference for all frequently asked questions of the nature:&lt;/p&gt;\n\n&lt;p&gt;Why do I get a mysterious crash or &quot;segmentation fault&quot; when I copy/scan data to the address where an uninitialised pointer points to?&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* ptr;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(ptr, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// crash here!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* ptr;\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, ptr); &lt;span class=&quot;hljs-comment&quot;&gt;// crash here!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581","postType":"QUESTION","createdAt":"2022-07-09T17:25:20.000Z","updatedAt":"2022-07-09T17:25:20.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What to do Regular expression pattern doesn't match anywhere in string?","slug":"what-to-do-regular-expression-pattern-doesn't-match-anywhere-in-string-1657388095896"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"Efficiently convert rows to columns in sql server","slug":"efficiently-convert-rows-to-columns-in-sql-server-1657387919213"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"Resolve build errors due to circular dependency amongst classes","slug":"resolve-build-errors-due-to-circular-dependency-amongst-classes-1657384903462"},{"title":"Serialize and Deserialize Json and Json Array in Unity","slug":"serialize-and-deserialize-json-and-json-array-in-unity-1657388273270"},{"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295"},{"title":"commandButton/commandLink/ajax action/listener method not invoked or input value not set/updated","slug":"commandbuttoncommandlinkajax-actionlistener-method-not-invoked-or-input-value-not-setupdated-1657384667519"},{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"Is it possible for flex items to align tightly to the items above them?","slug":"is-it-possible-for-flex-items-to-align-tightly-to-the-items-above-them-1657388511179"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"How do I execute a program or call a system command?","slug":"how-do-i-execute-a-program-or-call-a-system-command-1657385465629"},{"title":"Why use getters and setters/accessors?","slug":"why-use-getters-and-settersaccessors-1657387343971"},{"title":"How do I compare strings in Java?","slug":"how-do-i-compare-strings-in-java-1657384243187"}]},"__N_SSG":true}