{"pageProps":{"data":{"answer":["\n&lt;p&gt;Use the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;string.equals(Object other)&lt;/code&gt;&lt;/a&gt; function to compare strings, not the &lt;code&gt;==&lt;/code&gt; operator.&lt;/p&gt;\n\n&lt;p&gt;The function checks the actual contents of the string, the &lt;code&gt;==&lt;/code&gt; operator checks whether the references to the objects are equal.  Note that string constants are usually &quot;interned&quot; such that two constants with the same value can actually be compared with &lt;code&gt;==&lt;/code&gt;, but it&apos;s better not to rely on that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (usuario.equals(datos[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) {\n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NB: the compare is done on &apos;usuario&apos; because that&apos;s guaranteed non-null in your code, although you should still check that you&apos;ve actually got some tokens in the &lt;code&gt;datos&lt;/code&gt; array otherwise you&apos;ll get an array-out-of-bounds exception.&lt;/p&gt;\n    ","\n&lt;h2&gt;Meet Jorman&lt;/h2&gt;\n\n&lt;p&gt;Jorman is a successful businessman and has 2 houses. &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/xLcfG.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;But others don&apos;t know that.&lt;/p&gt;\n\n&lt;h2&gt;Is it the same Jorman?&lt;/h2&gt;\n\n&lt;p&gt;When you ask neighbours from either Madison or Burke streets, this is the only thing they can say:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZjMlG.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Using the residence alone, it&apos;s tough to confirm that it&apos;s the same Jorman. Since they&apos;re 2 different addresses, it&apos;s just natural to assume that those are 2 different persons.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;That&apos;s how the operator &lt;code&gt;==&lt;/code&gt; behaves.&lt;/strong&gt; So it will say that &lt;code&gt;datos[0]==usuario&lt;/code&gt; is false, because it only &lt;em&gt;compares the addresses&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h2&gt;An Investigator to the Rescue&lt;/h2&gt;\n\n&lt;p&gt;What if we sent an investigator? We know that it&apos;s the same Jorman, but we need to prove it. Our detective will look closely at all physical aspects. With thorough inquiry, the agent will be able to conclude whether it&apos;s the same person or not. Let&apos;s see it happen in Java terms.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s the source code of String&apos;s &lt;code&gt;equals()&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/6MYZy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;It compares the Strings character by character, in order to come to a conclusion that they are indeed equal.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;That&apos;s how the String &lt;code&gt;equals&lt;/code&gt; method behaves.&lt;/strong&gt; So &lt;code&gt;datos[0].equals(usuario)&lt;/code&gt; will return true, because it performs a &lt;em&gt;logical comparison&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s good to notice that &lt;strong&gt;in some cases use of &quot;==&quot; operator can lead to the expected result, because the way how java handles strings&lt;/strong&gt; - string literals are interned  (see &lt;code&gt;String.intern()&lt;/code&gt;) during compilation - so when you write for example &lt;code&gt;&quot;hello world&quot;&lt;/code&gt; in two classes and compare those strings with &quot;==&quot; you could get result: true, which is expected according to &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5&quot; rel=&quot;noreferrer&quot;&gt;specification&lt;/a&gt;; when you compare same strings (if they have same value) when the first one is string literal (ie. defined through &lt;code&gt;&quot;i am string literal&quot;&lt;/code&gt;) and second is constructed during runtime ie. with &quot;new&quot; keyword like &lt;code&gt;new String(&quot;i am string literal&quot;)&lt;/code&gt;, the &lt;code&gt;==&lt;/code&gt; (equality) operator returns false, because both of them are different instances of the &lt;code&gt;String&lt;/code&gt; class. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Only right way is using &lt;code&gt;.equals()&lt;/code&gt; -&amp;gt; &lt;code&gt;datos[0].equals(usuario)&lt;/code&gt;.&lt;/strong&gt; &lt;code&gt;==&lt;/code&gt; says only if two objects are the same instance of object (ie. have same memory address)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: 01.04.2013 I updated this post due comments below which are somehow right. Originally I declared that interning (String.intern) is side effect of JVM optimization. Although it certainly save memory resources (which was what i meant by &quot;optimization&quot;) it is mainly feature of language&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; function is a method of &lt;code&gt;Object&lt;/code&gt; class which should be overridden by programmer. &lt;code&gt;String&lt;/code&gt; class overrides it to check if two strings are equal i.e. in content and not reference. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; operator checks if the references of both the objects are the same. &lt;/p&gt;\n\n&lt;p&gt;Consider the programs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Awesome&quot;&lt;/span&gt; ;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  abc;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(abc == xyz)\n     System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Refers to same string&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;xyz&lt;/code&gt;, both refer to same &lt;code&gt;String&lt;/code&gt; &lt;code&gt;&quot;Awesome&quot;&lt;/code&gt;. Hence the expression &lt;code&gt;(abc == xyz)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(abc == xyz)\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Refers to same string&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Refers to different strings&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(abc.equals(xyz))\n     System.out.prinln(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contents of both strings are same&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n     System.out.prinln(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Contents of strings are different&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;xyz&lt;/code&gt; are two different strings with the same content &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;. Hence here the expression &lt;code&gt;(abc == xyz)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; where as &lt;code&gt;(abc.equals(xyz))&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Hope you understood the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;&amp;lt;Object&amp;gt;.equals()&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;Thanks.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;The == operator checks &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; the two references point to the same object or not.\n.equals() checks &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the actual string &lt;span class=&quot;hljs-title function_&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(value)&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the .equals() method belongs to class Object (super class of all classes). You need to override it as per you class requirement, but for String it is already implemented and it checks whether two strings have the same value or not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Case1)\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;;\ns1 == s1;      &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\ns1.equals(s2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\nReason: String literals created without &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; are stored in the string pool in the permgen area of the heap. So both s1 and s2 point to the same object in the pool.\nCase2)\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;);\ns1 == s2;      &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\ns1.equals(s2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\nReason: If you create a String object using the `&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;` keyword a separate space is allocated to it on the heap.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;datos[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == usuario\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;datos[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].equals(usuario)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compares the reference of the variable where &lt;code&gt;.equals()&lt;/code&gt; compares the values which is what you want.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; tests for reference equality.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.equals()&lt;/code&gt; tests for value equality.&lt;/p&gt;\n\n&lt;p&gt;Consequently, if you actually want to test whether two strings have the same value you should use &lt;code&gt;.equals()&lt;/code&gt; (except in a few situations where you can guarantee that two strings with the same value will be represented by the same object eg: &lt;code&gt;String&lt;/code&gt; interning).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; is for testing whether two strings are the same &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// These two have the same value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... but they are not the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... neither are these&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... but these are because literals are interned by &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the compiler and thus refer to the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// concatenation of string literals happens at compile time resulting in same objects&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;te&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;st&quot;&lt;/span&gt;  ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// but .substring() is invoked at runtime, generating distinct objects&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;!test&quot;&lt;/span&gt;.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is important to note that &lt;code&gt;==&lt;/code&gt; is much cheaper than &lt;code&gt;equals()&lt;/code&gt; (a single pointer comparision instead of a loop), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s analyze the following Java, to understand the identity and equality of Strings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testEquality&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str1 == str2)\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 == str2\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 != str2\\n&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(str1.equals(str2))\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 equals to str2\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 doesn&apos;t equal to str2\\n&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str3 == str4)\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str3 == str4\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str3 != str4\\n&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(str3.equals(str4))\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str3 equals to str4\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str3 doesn&apos;t equal to str4\\n&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the first line of code &lt;code&gt;String str1 = &quot;Hello world.&quot;&lt;/code&gt; executes, a string &lt;code&gt;\\Hello world.&quot;&lt;/code&gt;\nis created, and the variable &lt;code&gt;str1&lt;/code&gt; refers to it. Another string &lt;code&gt;&quot;Hello world.&quot;&lt;/code&gt; will not be created again when the next line of code executes because of optimization. The variable &lt;code&gt;str2&lt;/code&gt; also refers to the existing &lt;code&gt;&quot;&quot;Hello world.&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The operator &lt;code&gt;==&lt;/code&gt; checks identity of two objects (whether two variables refer to same object). Since &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; refer to same string in memory, they are identical to each other. The method &lt;code&gt;equals&lt;/code&gt; checks equality of two objects (whether two objects have same content). Of course, the content of &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; are same.&lt;/p&gt;\n\n&lt;p&gt;When code &lt;code&gt;String str3 = new String(&quot;Hello world.&quot;)&lt;/code&gt; executes, a new instance of string with content &lt;code&gt;&quot;Hello world.&quot;&lt;/code&gt; is created, and it is referred to by the variable &lt;code&gt;str3&lt;/code&gt;. And then another instance of string with content &lt;code&gt;&quot;Hello world.&quot;&lt;/code&gt; is created again, and referred to by\n&lt;code&gt;str4&lt;/code&gt;. Since &lt;code&gt;str3&lt;/code&gt; and &lt;code&gt;str4&lt;/code&gt; refer to two different instances, they are not identical, but their\ncontent are same.&lt;/p&gt;\n\n&lt;p&gt;Therefore, the output contains four lines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Str1 == str2\n\nStr1 equals str2\n\nStr3! = str4\n\nStr3 equals str4\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equals(java.lang.Object)&quot; rel=&quot;noreferrer&quot;&gt;string equals&lt;/a&gt; to compare two strings for equality, not operator == which just compares the references.&lt;/p&gt;\n    ","\n&lt;p&gt;It will also work if you call &lt;code&gt;intern()&lt;/code&gt; on the string before inserting it into the array.\nInterned strings are reference-equal (&lt;code&gt;==&lt;/code&gt;) if and only if they are value-equal (&lt;code&gt;equals()&lt;/code&gt;.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String... aArguments)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;usuario&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;14988611&quot;&lt;/span&gt;;\n\nString strDatos=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman 14988611&quot;&lt;/span&gt;;\nStringTokenizer tokens=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringTokenizer&lt;/span&gt;(strDatos, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; nDatos=tokens.countTokens();\nString[] datos=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[nDatos];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(tokens.hasMoreTokens()) {\n    String str=tokens.nextToken();\n    datos[i]= str.intern();            \n    i++;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//System.out.println (usuario);&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(datos[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==usuario) {  \n     System.out.println (&lt;span class=&quot;hljs-string&quot;&gt;&quot;WORKING&quot;&lt;/span&gt;);    \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generally &lt;code&gt;.equals&lt;/code&gt; is used for &lt;code&gt;Object&lt;/code&gt; comparison, where you want to verify if two &lt;code&gt;Objects&lt;/code&gt; have an identical value.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; for reference comparison (are the two &lt;code&gt;Objects&lt;/code&gt; the same &lt;code&gt;Object&lt;/code&gt; on the heap) &amp;amp; to check if the &lt;code&gt;Object&lt;/code&gt; is null. It is also used to compare the values of primitive types.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; operator compares the reference of an object in Java. You can use string&apos;s &lt;code&gt;equals&lt;/code&gt; method .&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;))\n{\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Equal&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are going to compare any assigned value of the string i.e. primitive string, both &quot;==&quot; and .equals will work, but for the new string object you should use only .equals, and here &quot;==&quot; will not work.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;if(a == b)&lt;/code&gt;  and &lt;code&gt;(a.equals(b))&lt;/code&gt; will return true.&lt;/p&gt;\n\n&lt;p&gt;But&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case &lt;code&gt;if(a == b)&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;So it&apos;s better to use the &lt;code&gt;.equals&lt;/code&gt; operator...&lt;/p&gt;\n    ","\n&lt;p&gt;The == operator is a simple comparison of values.&lt;br&gt;\nFor object references the (values) are the (references). So x == y returns true if x and y reference the same object.&lt;/p&gt;\n    ","\n&lt;p&gt;I know this is an old question but here&apos;s how I look at it (I find very useful):&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Technical explanations&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In Java, all variables are either &lt;strong&gt;primitive types&lt;/strong&gt; or &lt;strong&gt;references&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;(If you need to know what a reference is: &quot;Object variables&quot; are just &lt;em&gt;pointers to objects.&lt;/em&gt; So with &lt;code&gt;Object something = ...&lt;/code&gt;, something is really an address in memory (a number).)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compares the exact values. So it compares if the primitive values are the same, or if the references (addresses) are the same. That&apos;s why &lt;code&gt;==&lt;/code&gt; often doesn&apos;t work on Strings; Strings are objects, and doing &lt;code&gt;==&lt;/code&gt; on two string variables just compares if the address is same in memory, as others have pointed out. &lt;code&gt;.equals()&lt;/code&gt; calls the comparison method of objects, which will compare the actual objects pointed by the references. In the case of Strings, it compares each character to see if they&apos;re equal.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;The interesting part&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;So why does &lt;code&gt;==&lt;/code&gt; sometimes return true for Strings? Note that Strings are immutable. In your code, if you do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since strings are immutable (when you call &lt;code&gt;.trim()&lt;/code&gt; or something, it produces a new string, not modifying the original object pointed to in memory), you don&apos;t really need two different &lt;code&gt;String(&quot;hi&quot;)&lt;/code&gt; objects. If the compiler is smart, the bytecode will read to only generate one &lt;code&gt;String(&quot;hi&quot;)&lt;/code&gt; object. So if you do &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (foo == bar) ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;right after, they&apos;re pointing to the same object, and will return true. But you rarely intend this. Instead, you&apos;re asking for user input, which is creating new strings at different parts of memory, etc. etc.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you do something like &lt;code&gt;baz = new String(bar)&lt;/code&gt; the compiler may still figure out they&apos;re the same thing. But the main point is when the compiler sees literal strings, it can easily optimize same strings.&lt;/p&gt;\n\n&lt;p&gt;I don&apos;t know how it works in runtime, but I assume the JVM doesn&apos;t keep a list of &quot;live strings&quot; and check if a same string exists. (eg if you read a line of input twice, and the user enters the same input twice, it won&apos;t check if the second input string is the same as the first, and point them to the same memory). It&apos;d save a bit of heap memory, but it&apos;s so negligible the overhead isn&apos;t worth it. Again, the point is it&apos;s easy for the compiler to optimize literal strings.&lt;/p&gt;\n\n&lt;p&gt;There you have it... a gritty explanation for &lt;code&gt;==&lt;/code&gt; vs. &lt;code&gt;.equals()&lt;/code&gt; and why it seems random.&lt;/p&gt;\n    ","\n&lt;p&gt;@Melkhiah66 You can use equals method instead of &apos;==&apos; method to check the equality.\nIf you use intern() then it checks whether the object is in pool if present then returns\nequal else unequal. equals method internally uses hashcode and gets you the required result.\n&lt;code&gt;&lt;/code&gt;&lt;/p&gt;&lt;code&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n  {\n              &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman 14988611&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman&quot;&lt;/span&gt;).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot; 14988611&quot;&lt;/span&gt;).toString();\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str2.intern();\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 == str2 &quot;&lt;/span&gt; + (str1 == str2));           &lt;span class=&quot;hljs-comment&quot;&gt;//gives false&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 == str3 &quot;&lt;/span&gt; + (str1 == str3));           &lt;span class=&quot;hljs-comment&quot;&gt;//gives true&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 equals str2 &quot;&lt;/span&gt; + (str1.equals(str2)));  &lt;span class=&quot;hljs-comment&quot;&gt;//gives true&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1 equals str3 &quot;&lt;/span&gt; + (str1.equals(str3)));  &lt;span class=&quot;hljs-comment&quot;&gt;//gives true&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;.equals()&lt;/code&gt; will check if the two strings have the same value and return the &lt;code&gt;boolean&lt;/code&gt; value where as the &lt;code&gt;==&lt;/code&gt; operator checks to see if the two strings are the same object.&lt;/p&gt;\n    ","\n&lt;p&gt;Someone said on a post higher up that  == is used for int and for checking nulls.\nIt may also be used to check for Boolean operations and char types.&lt;/p&gt;\n\n&lt;p&gt;Be very careful though and double check that you are using a char and not a String.\nfor example &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strType&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;charType&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for strings you would then check\nThis would be correct&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(strType.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(charType.equals(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be incorrect, you would need to do the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(charType == &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n         &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;a==b&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Compares references, not values. The use of &lt;code&gt;==&lt;/code&gt; with object references is generally limited to the following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Comparing to see if a reference is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Comparing two enum values. This works because there is only one object for each &lt;code&gt;enum&lt;/code&gt; constant.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You want to know if two references are to the same object&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;code&gt;&quot;a&quot;.equals(&quot;b&quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Compares values for equality. Because this method is defined in the &lt;code&gt;Object&lt;/code&gt; class, from which all other classes are derived, it&apos;s automatically defined for every class. However, it doesn&apos;t perform an intelligent comparison for most classes unless the class overrides it. It has been defined in a meaningful way for most Java core classes. If it&apos;s not defined for a (user) class, it behaves the same as &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use Split rather than tokenizer,it will surely provide u exact output\nfor E.g:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;string name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harry&quot;&lt;/span&gt;;\nstring salary=&lt;span class=&quot;hljs-string&quot;&gt;&quot;25000&quot;&lt;/span&gt;;\nstring namsal=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harry 25000&quot;&lt;/span&gt;;\nstring[] s=namsal.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;s.length;i++)\n{\nSystem.out.println(s[i]);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Harry&quot;&lt;/span&gt;))\n{\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task Complete&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After this I am sure you will get better results.....&lt;/p&gt;\n    "],"id":313,"title":"String.equals versus == [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/513832/how-do-i-compare-strings-in-java&quot; dir=&quot;ltr&quot;&gt;How do I compare strings in Java?&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (23 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2013-12-23 21:27:25Z&quot; class=&quot;relativetime&quot;&gt;8 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;This code separates a string into tokens and stores them in an array of strings, and then compares a variable with the first home ... why isn&apos;t it working?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String...aArguments)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;usuario&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;14988611&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strDatos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jorman 14988611&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringTokenizer&lt;/span&gt;(strDatos, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nDatos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tokens.countTokens();\n    String[] datos = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[nDatos];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (tokens.hasMoreTokens()) {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tokens.nextToken();\n        datos[i] = str;\n        i++;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//System.out.println (usuario);&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((datos[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == usuario)) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WORKING&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"string.equals-versus-duplicate-1657387599972","postType":"QUESTION","createdAt":"2022-07-09T17:26:39.000Z","updatedAt":"2022-07-09T17:26:39.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I attach events to dynamic HTML elements with jQuery? [duplicate]","slug":"how-do-i-attach-events-to-dynamic-html-elements-with-jquery-duplicate-1657387992964"},{"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"Retrieve only the queried element in an object array in MongoDB collection","slug":"retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection-1657384890457"},{"title":"How to calculate the difference between two dates using PHP?","slug":"how-to-calculate-the-difference-between-two-dates-using-php-1657387409560"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"console.log() async or sync?","slug":"console.log()-async-or-sync-1657388401087"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"How do I make a list of data frames?","slug":"how-do-i-make-a-list-of-data-frames-1657385480437"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"What does the 'static' keyword do in a class?","slug":"what-does-the-'static'-keyword-do-in-a-class-1657388554238"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"},{"title":"How to remove the space between inline/inline-block elements?","slug":"how-to-remove-the-space-between-inlineinline-block-elements-1657384532273"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"}]},"__N_SSG":true}