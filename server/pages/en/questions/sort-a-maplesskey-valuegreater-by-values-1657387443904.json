{"pageProps":{"data":{"answer":["\n&lt;p&gt;Here&apos;s a generic-friendly version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapUtil&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; Map&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n        List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(map.entrySet());\n        list.sort(Entry.comparingByValue());\n\n        Map&amp;lt;K, V&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Entry&amp;lt;K, V&amp;gt; entry : list) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Important note:&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;This code can break in multiple ways.&lt;/strong&gt; If you intend to use the code provided, be sure to read the comments as well to be aware of the implications. For example, values can no longer be retrieved by their key. (&lt;code&gt;get&lt;/code&gt; always returns &lt;code&gt;null&lt;/code&gt;.)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;It seems much easier than all of the foregoing. Use a TreeMap as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Testing&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        HashMap&amp;lt;String, Double&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Double&amp;gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;ValueComparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bvc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparator&lt;/span&gt;(map);\n        TreeMap&amp;lt;String, Double&amp;gt; sorted_map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;String, Double&amp;gt;(bvc);\n\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;);\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;);\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;);\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67.3&lt;/span&gt;);\n\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unsorted map: &quot;&lt;/span&gt; + map);\n        sorted_map.putAll(map);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;results: &quot;&lt;/span&gt; + sorted_map);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;String&amp;gt; {\n    Map&amp;lt;String, Double&amp;gt; base;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValueComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;String, Double&amp;gt; base)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.base = base;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note: this comparator imposes orderings that are inconsistent with&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// equals.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String a, String b)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (base.get(a) &amp;gt;= base.get(b)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-comment&quot;&gt;// returning 0 would merge keys&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;unsorted map: {D=&lt;span class=&quot;hljs-number&quot;&gt;67.3&lt;/span&gt;, A=&lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;, B=&lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;, C=&lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;}\nresults: {D=&lt;span class=&quot;hljs-number&quot;&gt;67.3&lt;/span&gt;, B=&lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;, C=&lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;, A=&lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Java 8 offers a new answer: convert the entries into a stream, and use the comparator combinators from Map.Entry:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Stream&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt; sorted =\n    map.entrySet().stream()\n       .sorted(Map.Entry.comparingByValue());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will let you consume the entries sorted in ascending order of value.  If you want descending value, simply reverse the comparator:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Stream&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt; sorted =\n    map.entrySet().stream()\n       .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the values are not comparable, you can pass an explicit comparator:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Stream&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt; sorted =\n    map.entrySet().stream()\n       .sorted(Map.Entry.comparingByValue(comparator));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can then proceed to use other stream operations to consume the data. For example, if you want the top 10 in a new map:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;K,V&amp;gt; topTen =\n    map.entrySet().stream()\n       .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n       .limit(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n       .collect(Collectors.toMap(\n          Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&amp;gt; e1, LinkedHashMap::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/LinkedHashMap.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;&lt;/a&gt; seen above iterates entries in the order in which they were inserted.&lt;/p&gt;\n&lt;p&gt;Or print to &lt;code&gt;System.out&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;map.entrySet().stream()\n   .sorted(Map.Entry.comparingByValue())\n   .forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Three 1-line answers...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I would use &lt;s&gt;Google Collections&lt;/s&gt; &lt;a href=&quot;http://code.google.com/p/guava-libraries/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Guava&lt;/strong&gt;&lt;/a&gt; to do this - if your values are &lt;code&gt;Comparable&lt;/code&gt; then you can use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;valueComparator = Ordering.natural().onResultOf(Functions.forMap(map))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which will create a function (object) for the map [that takes any of the keys as input, returning the respective value], and then apply natural (comparable) ordering to them [the values].&lt;/p&gt;\n\n&lt;p&gt;If they&apos;re not comparable, then you&apos;ll need to do something along the lines of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;valueComparator = Ordering.from(comparator).onResultOf(Functions.forMap(map)) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These may be applied to a TreeMap (as &lt;code&gt;Ordering&lt;/code&gt; extends &lt;code&gt;Comparator&lt;/code&gt;), or a &lt;a href=&quot;https://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java/109389#109389&quot;&gt;LinkedHashMap after some sorting&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;NB&lt;/em&gt;: If you are going to use a TreeMap, remember that if a comparison == 0, then the item is already in the list (which will happen if you have multiple values that compare the same).  To alleviate this, you could add your key to the comparator like so (presuming that your keys and values are &lt;code&gt;Comparable&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;valueComparator = Ordering.natural().onResultOf(Functions.forMap(map)).compound(Ordering.natural())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;= &lt;em&gt;Apply natural ordering to the value mapped by the key, and compound that with the natural ordering of the key&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that this will still not work if your keys compare to 0, but this should be sufficient for most &lt;code&gt;comparable&lt;/code&gt; items (as &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;compareTo&lt;/code&gt; are often in sync...)&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/Ordering.html#onResultOf(com.google.common.base.Function)&quot; rel=&quot;noreferrer&quot;&gt;Ordering.onResultOf()&lt;/a&gt; and &lt;a href=&quot;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Functions.html#forMap(java.util.Map)&quot; rel=&quot;noreferrer&quot;&gt;Functions.forMap()&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Implementation&lt;/h2&gt;\n\n&lt;p&gt;So now that we&apos;ve got a comparator that does what we want, we need to get a result from it. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now this will most likely work work, but:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;needs to be done given a complete finished map&lt;/li&gt;\n&lt;li&gt;Don&apos;t try the comparators above on a &lt;code&gt;TreeMap&lt;/code&gt;; there&apos;s no point trying to compare an inserted key when it doesn&apos;t have a value until after the put, i.e., it will break really fast&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Point 1 is a bit of a deal-breaker for me; google collections is incredibly lazy (which is good: you can do pretty much every operation in an instant; the real work is done when you start using the result), and this requires copying a &lt;em&gt;whole&lt;/em&gt; map!&lt;/p&gt;\n\n&lt;h2&gt;&quot;Full&quot; answer/Live sorted map by values&lt;/h2&gt;\n\n&lt;p&gt;Don&apos;t worry though; if you were obsessed enough with having a &quot;live&quot; map sorted in this manner, you could solve not one but both(!) of the above issues with something crazy like the following:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note: This has changed significantly in June 2012 - the previous code could never work: an internal HashMap is required to lookup the values without creating an infinite loop between the &lt;code&gt;TreeMap.get()&lt;/code&gt; -&amp;gt; &lt;code&gt;compare()&lt;/code&gt; and &lt;code&gt;compare()&lt;/code&gt; -&amp;gt; &lt;code&gt;get()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.TreeMap;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.common.base.Functions;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.google.common.collect.Ordering;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparableMap&lt;/span&gt;&amp;lt;K &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;K&amp;gt;,V&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;K,V&amp;gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//A map for doing lookups on the keys for comparison so we don&apos;t get infinite loops&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; valueMap;\n\n    ValueComparableMap(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Ordering&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt; partialValueOrdering) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;(partialValueOrdering, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;K,V&amp;gt;());\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValueComparableMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Ordering&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt; partialValueOrdering,\n            HashMap&amp;lt;K, V&amp;gt; valueMap)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(partialValueOrdering &lt;span class=&quot;hljs-comment&quot;&gt;//Apply the value ordering&lt;/span&gt;\n                .onResultOf(Functions.forMap(valueMap)) &lt;span class=&quot;hljs-comment&quot;&gt;//On the result of getting the value for the key from the map&lt;/span&gt;\n                .compound(Ordering.natural())); &lt;span class=&quot;hljs-comment&quot;&gt;//as well as ensuring that the keys don&apos;t get clobbered&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.valueMap = valueMap;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K k, V v)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (valueMap.containsKey(k)){\n            &lt;span class=&quot;hljs-comment&quot;&gt;//remove the key in the sorted set before adding the key again&lt;/span&gt;\n            remove(k);\n        }\n        valueMap.put(k,v); &lt;span class=&quot;hljs-comment&quot;&gt;//To get &quot;real&quot; unsorted values for the comparator&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.put(k, v); &lt;span class=&quot;hljs-comment&quot;&gt;//Put it in value order&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n        TreeMap&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparableMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;(Ordering.natural());\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,map.firstKey());\n        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,map.lastKey());\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,map.firstKey());\n        &lt;span class=&quot;hljs-comment&quot;&gt;//ensure it&apos;s still a map (by overwriting a key, but with a new value) &lt;/span&gt;\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, map.firstKey());\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Ensure multiple values do not clobber keys&lt;/span&gt;\n        map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, map.size());\n        assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;));\n        assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;));\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When we put, we ensure that the hash map has the value for the comparator, and then put to the TreeSet for sorting. But before that we check the hash map to see that the key is not actually a duplicate. Also, the comparator that we create will also include the key so that duplicate values don&apos;t delete the non-duplicate keys (due to == comparison).\nThese 2 items are &lt;em&gt;vital&lt;/em&gt; for ensuring the map contract is kept; if you think you don&apos;t want that, then you&apos;re almost at the point of reversing the map entirely (to &lt;code&gt;Map&amp;lt;V,K&amp;gt;&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;The constructor would need to be called as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparableMap&lt;/span&gt;(Ordering.natural());\n &lt;span class=&quot;hljs-comment&quot;&gt;//or&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparableMap&lt;/span&gt;(Ordering.from(comparator));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;http://www.programmersheaven.com/download/49349/download.aspx&quot; rel=&quot;noreferrer&quot;&gt;http://www.programmersheaven.com/download/49349/download.aspx&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; Map&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;&amp;gt;(map.entrySet());\n    Collections.sort(list, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Object&amp;gt;() {\n        &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o1, Object o2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((Comparable&amp;lt;V&amp;gt;) ((Map.Entry&amp;lt;K, V&amp;gt;) (o1)).getValue()).compareTo(((Map.Entry&amp;lt;K, V&amp;gt;) (o2)).getValue());\n        }\n    });\n\n    Map&amp;lt;K, V&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; it = list.iterator(); it.hasNext();) {\n        Map.Entry&amp;lt;K, V&amp;gt; entry = (Map.Entry&amp;lt;K, V&amp;gt;) it.next();\n        result.put(entry.getKey(), entry.getValue());\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With Java 8, you can use the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; rel=&quot;noreferrer&quot;&gt;streams api&lt;/a&gt; to do it in a significantly less verbose way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;K, V&amp;gt; sortedMap = map.entrySet().stream()\n                         .sorted(Entry.comparingByValue())\n                         .collect(Collectors.toMap(Entry::getKey, Entry::getValue, (e1, e2) -&amp;gt; e1, LinkedHashMap::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Sorting the keys requires the Comparator to look up each value for each comparison. A more scalable solution would use the entrySet directly, since then the value would be immediately available for each comparison (although I haven&apos;t backed this up by numbers).&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a generic version of such a thing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; List&amp;lt;K&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getKeysSortedByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.size();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;(size);\n    list.addAll(map.entrySet());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ValueComparator&amp;lt;V&amp;gt; cmp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparator&lt;/span&gt;&amp;lt;V&amp;gt;();\n    Collections.sort(list, cmp);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;K&amp;gt; keys = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;K&amp;gt;(size);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) {\n        keys.set(i, list.get(i).getKey());\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; keys;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparator&lt;/span&gt;&amp;lt;V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt;\n                                     &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;?, V&amp;gt;&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map.Entry&amp;lt;?, V&amp;gt; o1, Map.Entry&amp;lt;?, V&amp;gt; o2)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o1.getValue().compareTo(o2.getValue());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are ways to lessen memory rotation for the above solution. The first ArrayList created could for instance be re-used as a return value; this would require suppression of some generics warnings, but it might be worth it for re-usable library code. Also,  the Comparator does not have to be re-allocated at every invocation.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a more efficient albeit less appealing version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; List&amp;lt;K&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getKeysSortedByValue2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.size();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;reusedList&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;(size);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; meView = reusedList;\n    meView.addAll(map.entrySet());\n    Collections.sort(meView, SINGLE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;K&amp;gt; keyView = reusedList;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) {\n        keyView.set(i, meView.get(i).getKey());\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; keyView;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Comparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SINGLE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueComparator&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, if you need to continously access the sorted information (rather than just sorting it once in a while), you can use an additional multi map. Let me know if you need more details...&lt;/p&gt;\n    ","\n&lt;p&gt;The commons-collections library contains a solution called &lt;a href=&quot;http://commons.apache.org/collections/api-release/org/apache/commons/collections/bidimap/TreeBidiMap.html&quot; rel=&quot;noreferrer&quot;&gt;TreeBidiMap&lt;/a&gt;. Or, you could have a look at the Google Collections API. It has &lt;a href=&quot;http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/TreeMultimap.html&quot; rel=&quot;noreferrer&quot;&gt;TreeMultimap&lt;/a&gt; which you could use.&lt;/p&gt;\n\n&lt;p&gt;And if you don&apos;t want to use these framework... they come with source code.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve looked at the given answers, but a lot of them are more complicated than needed or remove map elements when several keys have same value.&lt;/p&gt;\n\n&lt;p&gt;Here is a solution that I think fits better:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt; Map&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    Comparator&amp;lt;K&amp;gt; valueComparator =  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;K&amp;gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K k1, K k2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.get(k2).compareTo(map.get(k1));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (compare == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compare;\n        }\n    };\n    Map&amp;lt;K, V&amp;gt; sortedByValues = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;K, V&amp;gt;(valueComparator);\n    sortedByValues.putAll(map);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortedByValues;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the map is sorted from the highest value to the lowest.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Given Map&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;   Map&amp;lt;String, Integer&amp;gt; wordCounts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n    wordCounts.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;USA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n    wordCounts.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jobs&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);\n    wordCounts.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;software&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n    wordCounts.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;technology&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;);\n    wordCounts.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;opportunity&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort the map based on the value in ascending order&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String,Integer&amp;gt;  sortedMap =  wordCounts.entrySet().\n                                                stream().\n                                                sorted(Map.Entry.comparingByValue()).\n        collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&amp;gt; e1, LinkedHashMap::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;));\n    System.out.println(sortedMap);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort the map based on value in desending order&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String,Integer&amp;gt;  sortedMapReverseOrder =  wordCounts.entrySet().\n            stream().\n            sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).\n            collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&amp;gt; e1, LinkedHashMap::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;));\n    System.out.println(sortedMapReverseOrder);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;{software=50, technology=70, USA=100, jobs=200, opportunity=200}&lt;/p&gt;\n\n&lt;p&gt;{jobs=200, opportunity=200, USA=100, technology=70, software=50}&lt;/p&gt;\n    ","\n&lt;p&gt;To accomplish this with the new features in Java 8:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; java.util.Map.Entry.comparingByValue;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; java.util.stream.Collectors.toList;\n\n&amp;lt;K, V&amp;gt; List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map, Comparator&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt; comparator)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; map.entrySet().stream().sorted(comparingByValue(comparator)).collect(toList());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The entries are ordered by their values using the given comparator. Alternatively, if your values are mutually comparable, no explicit comparator is needed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; map.entrySet().stream().sorted(comparingByValue()).collect(toList());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The returned list is a snapshot of the given map at the time this method is called, so neither will reflect subsequent changes to the other. For a live iterable view of the map:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; Iterable&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; () -&amp;gt; map.entrySet().stream().sorted(comparingByValue()).iterator();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The returned iterable creates a fresh snapshot of the given map each time it&apos;s iterated, so barring concurrent modification, it will always reflect the current state of the map.&lt;/p&gt;\n    ","\n&lt;p&gt;Create customized comparator and use it while creating new TreeMap object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyComparator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Object&amp;gt; {\n\n    Map&amp;lt;String, Integer&amp;gt; map;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;String, Integer&amp;gt; map)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.map = map;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o1, Object o2)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (map.get(o2) == map.get(o1))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((Integer) map.get(o2)).compareTo((Integer)     \n                                                            map.get(o1));\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use the below code in your main func&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    Map&amp;lt;String, Integer&amp;gt; lMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();\n    lMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;);\n    lMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;);\n    lMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n    lMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;MyComparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;comparator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyComparator&lt;/span&gt;(lMap);\n\n    Map&amp;lt;String, Integer&amp;gt; newMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;(comparator);\n    newMap.putAll(lMap);\n    System.out.println(newMap);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;{B=&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, D=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, C=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, A=&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While I agree that the constant need to sort a map is probably a smell, I think the following code is the easiest way to do it without using a different data structure.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapUtilities&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt; List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; entries = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt;(map.entrySet());\n    Collections.sort(entries, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ByValue&lt;/span&gt;&amp;lt;K, V&amp;gt;());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; entries;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ByValue&lt;/span&gt;&amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Entry&amp;lt;K, V&amp;gt; o1, Entry&amp;lt;K, V&amp;gt; o2)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o1.getValue().compareTo(o2.getValue());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;And here is an embarrassingly incomplete unit test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapUtilitiesTest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestCase&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testSorting&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    HashMap&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n\n    List&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; sorted = MapUtilities.sortByValue(map);\n    assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;, sorted.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getKey());\n    assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Second&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;, sorted.get(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).getKey());\n    assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Third&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;, sorted.get(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).getKey());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;The result is a sorted list of Map.Entry objects, from which you can obtain the keys and values.&lt;/p&gt;\n    ","\n&lt;p&gt;Use a generic comparator such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapValueComparator&lt;/span&gt;&amp;lt;K,V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;K&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K,V&amp;gt; map;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MapValueComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MapValueComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K,V&amp;gt; map)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.map = map;\n    }\n        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K o1, K o2)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; map.get(o1).compareTo(map.get(o2));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answer voted for the most does not work when you have 2 items that equals.\nthe TreeMap leaves equal values out.&lt;/p&gt;\n\n&lt;p&gt;the exmaple:\nunsorted map&lt;/p&gt;\n\n&lt;pre&gt;key/value: D/67.3\nkey/value: A/99.5\nkey/value: B/67.4\nkey/value: C/67.5\nkey/value: E/99.5\n&lt;/pre&gt;\n\n&lt;p&gt;results&lt;/p&gt;\n\n&lt;pre&gt;key/value: A/99.5\nkey/value: C/67.5\nkey/value: B/67.4\nkey/value: D/67.3\n&lt;/pre&gt;\n\n&lt;p&gt;So leaves out E!!&lt;/p&gt;\n\n&lt;p&gt;For me it worked fine to adjust the comparator, if it equals do not return 0 but -1.&lt;/p&gt;\n\n&lt;p&gt;in the example:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;class ValueComparator implements Comparator {&lt;/p&gt;\n    \n    &lt;p&gt;Map base;\n      public ValueComparator(Map base) {\n          this.base = base;\n      }&lt;/p&gt;\n    \n    &lt;p&gt;public int compare(Object a, Object b) {&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((Double)base.get(a) &amp;lt; (Double)base.get(b)) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((Double)base.get(a) == (Double)base.get(b)) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    \n    &lt;p&gt;}\n    }&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;now it returns:&lt;/p&gt;\n\n&lt;p&gt;unsorted map:&lt;/p&gt;\n\n&lt;pre&gt;key/value: D/67.3\nkey/value: A/99.5\nkey/value: B/67.4\nkey/value: C/67.5\nkey/value: E/99.5\n&lt;/pre&gt;\n\n&lt;p&gt;results:&lt;/p&gt;\n\n&lt;pre&gt;key/value: A/99.5\nkey/value: E/99.5\nkey/value: C/67.5\nkey/value: B/67.4\nkey/value: D/67.3\n&lt;/pre&gt;\n\n&lt;p&gt;as a response to Aliens (2011 nov. 22):\nI Am using this solution for a map of Integer Id&apos;s and names, but the idea is the same, so might be the code above is not correct (I will write it in a test and give you the correct code), this is the code for a Map sorting, based on the solution above:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; nl.iamit.util;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Comparator;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparators&lt;/span&gt; {\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapIntegerStringComparator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt; {\n\n        Map&amp;lt;Integer, String&amp;gt; base;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MapIntegerStringComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;Integer, String&amp;gt; base)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.base = base;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object a, Object b)&lt;/span&gt; {\n\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ((String) base.get(a))\n                    .compareTo((String) base.get(b));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (compare == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compare;\n        }\n    }\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and this is the test class (I just tested it, and this works for the Integer, String Map:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; test.nl.iamit.util;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.TreeMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; nl.iamit.util.Comparators;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertArrayEquals;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestComparators&lt;/span&gt; {\n\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testMapIntegerStringComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        HashMap&amp;lt;Integer, String&amp;gt; unSoretedMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;Integer, String&amp;gt;();\n        Comparators.&lt;span class=&quot;hljs-type&quot;&gt;MapIntegerStringComparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bvc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparators&lt;/span&gt;.MapIntegerStringComparator(\n                unSoretedMap);\n        TreeMap&amp;lt;Integer, String&amp;gt; sorted_map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;Integer, String&amp;gt;(bvc);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//the testdata:&lt;/span&gt;\n        unSoretedMap.put(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;);\n        unSoretedMap.put(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\n        unSoretedMap.put(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;);\n        unSoretedMap.put(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\n        unSoretedMap.put(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;F&quot;&lt;/span&gt;);\n\n        sorted_map.putAll(unSoretedMap);\n\n        Object[] targetKeys={&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) };\n        Object[] currecntKeys=sorted_map.keySet().toArray();\n\n        assertArrayEquals(targetKeys,currecntKeys);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here is the code for the Comparator of a Map:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapStringDoubleComparator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt; {\n\n    Map&amp;lt;String, Double&amp;gt; base;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MapStringDoubleComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;String, Double&amp;gt; base)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.base = base;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//note if you want decending in stead of ascending, turn around 1 and -1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object a, Object b)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((Double) base.get(a) == (Double) base.get(b)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((Double) base.get(a) &amp;lt; (Double) base.get(b)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and this is the testcase for this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testMapStringDoubleComparator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n    HashMap&amp;lt;String, Double&amp;gt; unSoretedMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Double&amp;gt;();\n    Comparators.&lt;span class=&quot;hljs-type&quot;&gt;MapStringDoubleComparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bvc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparators&lt;/span&gt;.MapStringDoubleComparator(\n            unSoretedMap);\n    TreeMap&amp;lt;String, Double&amp;gt; sorted_map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;String, Double&amp;gt;(bvc);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//the testdata:&lt;/span&gt;\n    unSoretedMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Double&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;67.3&lt;/span&gt;));\n    unSoretedMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Double&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;));\n    unSoretedMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Double&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;67.4&lt;/span&gt;));\n    unSoretedMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Double&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;67.5&lt;/span&gt;));\n    unSoretedMap.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Double&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt;));\n\n    sorted_map.putAll(unSoretedMap);\n\n    Object[] targetKeys={&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;};\n    Object[] currecntKeys=sorted_map.keySet().toArray();\n\n    assertArrayEquals(targetKeys,currecntKeys);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;of cource you can make this a lot more generic, but I just needed it for 1 case (the Map)&lt;/p&gt;\n    ","\n&lt;p&gt;Instead of using &lt;code&gt;Collections.sort&lt;/code&gt; as some do I&apos;d suggest using &lt;code&gt;Arrays.sort&lt;/code&gt;. Actually what &lt;code&gt;Collections.sort&lt;/code&gt; does is something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; T&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;T&amp;gt; list)&lt;/span&gt; {\n    Object[] a = list.toArray();\n    Arrays.sort(a);\n    ListIterator&amp;lt;T&amp;gt; i = list.listIterator();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;a.length; j++) {\n        i.next();\n        i.set((T)a[j]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It just calls &lt;code&gt;toArray&lt;/code&gt; on the list and then uses &lt;code&gt;Arrays.sort&lt;/code&gt;. This way all the map entries will be copied three times: once from the map to the temporary list (be it a LinkedList or ArrayList), then to the temporary array and finally to the new map.&lt;/p&gt;\n\n&lt;p&gt;My solution ommits this one step as it does not create unnecessary LinkedList. Here is the code, generic-friendly and performance-optimal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; Map&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n    Map.Entry&amp;lt;K,V&amp;gt;[] array = map.entrySet().toArray(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;.Entry[map.size()]);\n\n    Arrays.sort(array, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;() \n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map.Entry&amp;lt;K, V&amp;gt; e1, Map.Entry&amp;lt;K, V&amp;gt; e2)&lt;/span&gt; \n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e1.getValue().compareTo(e2.getValue());\n        }\n    });\n\n    Map&amp;lt;K, V&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;K, V&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;K, V&amp;gt; entry : array)\n        result.put(entry.getKey(), entry.getValue());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a variation of Anthony&apos;s answer, which doesn&apos;t work if there are duplicate values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt; Map&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMapByValues&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    Comparator&amp;lt;K&amp;gt; valueComparator =  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;K&amp;gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K k1, K k2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.get(k1);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.get(k2);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;/* Not sure how to handle nulls ... */&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (v1 == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (v2 == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; v2.compareTo(v1);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (compare != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compare;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; k1.hashCode();\n                &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; k2.hashCode();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h2.compareTo(h1);\n            }\n        }\n    };\n    Map&amp;lt;K, V&amp;gt; sortedByValues = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;K, V&amp;gt;(valueComparator);\n    sortedByValues.putAll(map);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortedByValues;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that it&apos;s rather up in the air how to handle nulls. &lt;/p&gt;\n\n&lt;p&gt;One important advantage of this approach is that it actually returns a Map, unlike some of the other solutions offered here.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Best Approach&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Collections;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Comparator;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Set;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map.Entry; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OrderByValue&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String a[])&lt;/span&gt;{\n    Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C++&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unix&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MAC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;);\n    map.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Why this kolavari&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;);\n    Set&amp;lt;Entry&amp;lt;String, Integer&amp;gt;&amp;gt; set = map.entrySet();\n    List&amp;lt;Entry&amp;lt;String, Integer&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Entry&amp;lt;String, Integer&amp;gt;&amp;gt;(set);\n    Collections.sort( list, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt;()\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Map.Entry&amp;lt;String, Integer&amp;gt; o1, Map.Entry&amp;lt;String, Integer&amp;gt; o2 )&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (o1.getValue()).compareTo( o2.getValue() );&lt;span class=&quot;hljs-comment&quot;&gt;//Ascending order&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//return (o2.getValue()).compareTo( o1.getValue() );//Descending order&lt;/span&gt;\n        }\n    } );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Map.Entry&amp;lt;String, Integer&amp;gt; entry:list){\n        System.out.println(entry.getKey()+&lt;span class=&quot;hljs-string&quot;&gt;&quot; ==== &quot;&lt;/span&gt;+entry.getValue());\n    }\n  }}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;java ==== &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n\nMAC ==== &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;\n\nC++ ==== &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;\n\nUnix ==== &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;\n\nWhy &lt;span class=&quot;hljs-type&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;kolavari&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;=== &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Late Entry.&lt;/p&gt;\n\n&lt;p&gt;With the advent of Java-8, we can use streams for data manipulation in a very easy/succinct way. You can use streams to sort the map entries by value and create a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html&quot; rel=&quot;noreferrer&quot;&gt;LinkedHashMap&lt;/a&gt; which preserves &lt;em&gt;insertion-order&lt;/em&gt; iteration.&lt;/p&gt;\n\n&lt;p&gt;Eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;LinkedHashMap&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sortedByValueMap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; map.entrySet().stream()\n                .sorted(comparing(Entry&amp;lt;Key,Value&amp;gt;::getValue).thenComparing(Entry::getKey))     &lt;span class=&quot;hljs-comment&quot;&gt;//first sorting by Value, then sorting by Key(entries with same value)&lt;/span&gt;\n                .collect(LinkedHashMap::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;,(map,entry) -&amp;gt; map.put(entry.getKey(),entry.getValue()),LinkedHashMap::putAll);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For reverse ordering, replace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;comparing(Entry&amp;lt;Key,Value&amp;gt;::getValue).thenComparing(Entry::getKey)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;comparing(Entry&amp;lt;Key,Value&amp;gt;::getValue).thenComparing(Entry::getKey).reversed()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Major problem. If you use the first answer (Google takes you here), change the comparator to add an equal clause, otherwise you cannot get values from the sorted_map by keys:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String a, String b)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (base.get(a) &amp;gt; base.get(b)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (base.get(a) &amp;lt; base.get(b)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } \n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// returning 0 would merge keys&lt;/span&gt;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are a lot of answers for this question already, but none provided me what I was looking for, a map implementation that returns keys and entries sorted by the associated value, and maintains this property as keys and values are modified in the map. Two &lt;a href=&quot;https://stackoverflow.com/q/13108887/1760575&quot;&gt;other&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/q/7465369/1760575&quot;&gt;questions&lt;/a&gt; ask for this specifically. &lt;/p&gt;\n\n&lt;p&gt;I cooked up a generic friendly example that solves this use case. This implementation does not honor all of the contracts of the Map interface, such as reflecting value changes and removals in the sets return from keySet() and entrySet() in the original object. I felt such a solution would be too large to include in a Stack Overflow answer. If I manage to create a more complete implementation, perhaps I will post it to Github and then to it link in an updated version of this answer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * A map where {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; #keySet()} and {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; #entrySet()} return sets ordered\n * by associated values based on the the comparator provided at construction\n * time. The order of two or more keys with identical values is not defined.\n * &amp;lt;p&amp;gt;\n * Several contracts of the Map interface are not satisfied by this minimal\n * implementation.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueSortedMap&lt;/span&gt;&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;K, V&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; Map&amp;lt;V, Collection&amp;lt;K&amp;gt;&amp;gt; valueToKeysMap;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// uses natural order of value object, if any&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValueSortedMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;((Comparator&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;) &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ValueSortedMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Comparator&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt; valueComparator)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.valueToKeysMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;V, Collection&amp;lt;K&amp;gt;&amp;gt;(valueComparator);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;containsValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; valueToKeysMap.containsKey(o);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(K k, V v)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldV&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (containsKey(k)) {\n            oldV = get(k);\n            valueToKeysMap.get(oldV).remove(k);\n        }\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.put(k, v);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!valueToKeysMap.containsKey(v)) {\n            Collection&amp;lt;K&amp;gt; keys = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;K&amp;gt;();\n            keys.add(k);\n            valueToKeysMap.put(v, keys);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            valueToKeysMap.get(v).add(k);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oldV;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;putAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;K&lt;/span&gt;, ? &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;V&lt;/span&gt;&amp;gt; e : m.entrySet())\n            put(e.getKey(), e.getValue());\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object k)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;oldV&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (containsKey(k)) {\n            oldV = get(k);\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.remove(k);\n            valueToKeysMap.get(oldV).remove(k);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oldV;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.clear();\n        valueToKeysMap.clear();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;K&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        LinkedHashSet&amp;lt;K&amp;gt; ret = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashSet&lt;/span&gt;&amp;lt;K&amp;gt;(size());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (V v : valueToKeysMap.keySet()) {\n            Collection&amp;lt;K&amp;gt; keys = valueToKeysMap.get(v);\n            ret.addAll(keys);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entrySet() {\n        LinkedHashSet&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; ret = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashSet&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;(size());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Collection&amp;lt;K&amp;gt; keys : valueToKeysMap.values()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; K k : keys) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; get(k);\n                ret.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;K,V&amp;gt;() {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; K &lt;span class=&quot;hljs-title function_&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; k;\n                    }\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n                    }\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;hljs-title function_&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(V v)&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnsupportedOperationException&lt;/span&gt;();\n                    }\n                });\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simple way to sort any map in Java 8 and above&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String, Object&amp;gt; mapToSort = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n\nList&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;&amp;gt;(mapToSort.entrySet());\n\nCollections.sort(list, Comparator.comparing(o -&amp;gt; o.getValue().getAttribute()));\n\nHashMap&amp;lt;String, Object&amp;gt; sortedMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Object&amp;gt; map : list) {\n   sortedMap.put(map.getKey(), map.getValue());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you are using Java 7 and below&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String, Object&amp;gt; mapToSort = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n\nList&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;&amp;gt;(mapToSort.entrySet());\n\nCollections.sort(list, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map.Entry&amp;lt;String, Object&amp;gt; o1, Map.Entry&amp;lt;String, Object&amp;gt; o2)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o1.getValue().getAttribute().compareTo(o2.getValue().getAttribute());      \n    }\n});\n\nHashMap&amp;lt;String, Object&amp;gt; sortedMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Object&amp;gt; map : list) {\n   sortedMap.put(map.getKey(), map.getValue());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Depending on the context, using &lt;code&gt;java.util.LinkedHashMap&amp;lt;T&amp;gt;&lt;/code&gt; which rememebers the order in which items are placed into the map.  Otherwise, if you need to sort values based on their natural ordering, I would recommend maintaining a separate List which can be sorted via &lt;code&gt;Collections.sort()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Afaik the most cleaner way is utilizing collections to sort map on value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String, Long&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Long&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// populate with data to sort on Value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// use datastructure designed for sorting&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PriorityQueue&lt;/span&gt;( map.size(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapComparable&lt;/span&gt;() );\nqueue.addAll( map.entrySet() );\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// get a sorted map&lt;/span&gt;\nLinkedHashMap&amp;lt;String, Long&amp;gt; linkedMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;String, Long&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Long&amp;gt; entry; (entry = queue.poll())!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;) {\n    linkedMap.put(entry.getKey(), entry.getValue());\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapComparable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Long&amp;gt;&amp;gt;{\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Entry&amp;lt;String, Long&amp;gt; e1, Entry&amp;lt;String, Long&amp;gt; e2)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e1.getValue().compareTo(e2.getValue());\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since &lt;strong&gt;&lt;em&gt;TreeMap&amp;lt;&amp;gt; does not work&lt;/em&gt;&lt;/strong&gt; for values that can be equal, I used this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;? &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt; V&amp;gt;&amp;gt; List&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt;     {\n    List&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;(map.entrySet());\n    Collections.sort(list, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map.Entry&amp;lt;K, V&amp;gt; o1, Map.Entry&amp;lt;K, V&amp;gt; o2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o1.getValue().compareTo(o2.getValue());\n        }\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You might want to put &lt;strong&gt;&lt;em&gt;list&lt;/em&gt;&lt;/strong&gt; in a &lt;strong&gt;&lt;em&gt;LinkedHashMap&lt;/em&gt;&lt;/strong&gt;, but if you&apos;re only going to iterate over it right away, that&apos;s superfluous...&lt;/p&gt;\n    ","\n&lt;p&gt;This is just too complicated. Maps were not supposed to do such job as sorting them by Value. The easiest way is to create your own Class so it fits your requirement.&lt;/p&gt;\n\n&lt;p&gt;In example lower you are supposed to add TreeMap a comparator at place where * is. But by java API it gives comparator only keys, not values. All of examples stated here is based on 2 Maps. One Hash and one new Tree. Which is odd.&lt;/p&gt;\n\n&lt;p&gt;The example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;Driver driver, Float time&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeMap&lt;/span&gt;&amp;lt;Driver driver, Float time&amp;gt;(*);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So change the map into a set this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ResultComparator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ResultComparator&lt;/span&gt;();\nSet&amp;lt;Results&amp;gt; set = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeSet&lt;/span&gt;&amp;lt;Results&amp;gt;(rc);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will create class &lt;code&gt;Results&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Results&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Driver driver;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Float time;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Results&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Driver driver, Float time)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.driver = driver;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.time = time;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Float &lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; time;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Float time)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.time = time;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Driver &lt;span class=&quot;hljs-title function_&quot;&gt;getDriver&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; driver;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDriver&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Driver driver)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.driver = driver;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the Comparator class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ResultsComparator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Results&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Results t, Results t1)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t.getTime() &amp;lt; t1.getTime()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t.getTime() == t1.getTime()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you can easily add more dependencies.&lt;/p&gt;\n\n&lt;p&gt;And as the last point I&apos;ll add simple iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; set.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Results&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Results)it.next();\n    System.out.println( r.getDriver().toString\n        &lt;span class=&quot;hljs-comment&quot;&gt;//or whatever that is related to Driver class -getName() getSurname()&lt;/span&gt;\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;\n        + r.getTime()\n        );\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Based on @devinmoore code, a map sorting methods using generics and supporting both ascending and descending ordering.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sort a map by it&apos;s keys in ascending order. \n *  \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; new instance of {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; LinkedHashMap} contained sorted entries of supplied map.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; LinkedHashMap&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMapByKey&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortMapByKey(map, SortingOrder.ASCENDING);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sort a map by it&apos;s values in ascending order.\n *  \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; new instance of {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; LinkedHashMap} contained sorted entries of supplied map.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; LinkedHashMap&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMapByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortMapByValue(map, SortingOrder.ASCENDING);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sort a map by it&apos;s keys.\n *  \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; sortingOrder {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SortingOrder} enum specifying requested sorting order. \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; new instance of {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; LinkedHashMap} contained sorted entries of supplied map.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; LinkedHashMap&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMapByKey&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SortingOrder sortingOrder)&lt;/span&gt; {\n    Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Entry&amp;lt;K, V&amp;gt; o1, Entry&amp;lt;K, V&amp;gt; o2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; comparableCompare(o1.getKey(), o2.getKey(), sortingOrder);\n        }\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortMap(map, comparator);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sort a map by it&apos;s values.\n *  \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; sortingOrder {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SortingOrder} enum specifying requested sorting order. \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; new instance of {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; LinkedHashMap} contained sorted entries of supplied map.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; LinkedHashMap&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMapByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SortingOrder sortingOrder)&lt;/span&gt; {\n    Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Entry&amp;lt;K, V&amp;gt; o1, Entry&amp;lt;K, V&amp;gt; o2)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; comparableCompare(o1.getValue(), o2.getValue(), sortingOrder);\n        }\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortMap(map, comparator);\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;comparableCompare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T o1, T o2, SortingOrder sortingOrder)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ((Comparable&amp;lt;T&amp;gt;)o1).compareTo(o2);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (sortingOrder) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; ASCENDING:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compare;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DESCENDING:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * compare;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sort a map by supplied comparator logic.\n *  \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; new instance of {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; LinkedHashMap} contained sorted entries of supplied map.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K, V&amp;gt; LinkedHashMap&amp;lt;K, V&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K, V&amp;gt; map, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparator)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Convert the map into a list of key,value pairs.&lt;/span&gt;\n    List&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; mapEntries = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;(map.entrySet());\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Sort the converted list according to supplied comparator.&lt;/span&gt;\n    Collections.sort(mapEntries, comparator);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Build a new ordered map, containing the same entries as the old map.  &lt;/span&gt;\n    LinkedHashMap&amp;lt;K, V&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;K, V&amp;gt;(map.size() + (map.size() / &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Map.Entry&amp;lt;K, V&amp;gt; entry : mapEntries) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// We iterate on the mapEntries list which is sorted by the comparator putting new entries into &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// the targeted result which is a sorted map. &lt;/span&gt;\n        result.put(entry.getKey(), entry.getValue());\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sorting order enum, specifying request result sort behavior.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Maxim Veksler\n *\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SortingOrder&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Resulting sort will be from smaller to biggest.\n     */&lt;/span&gt;\n    ASCENDING,\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Resulting sort will be from biggest to smallest.\n     */&lt;/span&gt;\n    DESCENDING\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an OO solution (i.e., doesn&apos;t use &lt;code&gt;static&lt;/code&gt; methods):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Collections;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Comparator;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.LinkedList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.LinkedHashMap;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SortableValueMap&lt;/span&gt;&amp;lt;K, V &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparable&lt;/span&gt;&amp;lt;V&amp;gt;&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedHashMap&lt;/span&gt;&amp;lt;K, V&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SortableValueMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; { }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SortableValueMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Map&amp;lt;K, V&amp;gt; map )&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;( map );\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortByValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    List&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;( entrySet() );\n\n    Collections.sort( list, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;() {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Map.Entry&amp;lt;K, V&amp;gt; entry1, Map.Entry&amp;lt;K, V&amp;gt; entry2 )&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; entry1.getValue().compareTo( entry2.getValue() );\n      }\n    });\n\n    clear();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( Map.Entry&amp;lt;K, V&amp;gt; entry : list ) {\n      put( entry.getKey(), entry.getValue() );\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( String text, Map&amp;lt;String, Double&amp;gt; map )&lt;/span&gt; {\n    System.out.println( text );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( String key : map.keySet() ) {\n      System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;key/value: &quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + map.get( key ) );\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( String[] args )&lt;/span&gt; {\n    SortableValueMap&amp;lt;String, Double&amp;gt; map =\n      &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SortableValueMap&lt;/span&gt;&amp;lt;String, Double&amp;gt;();\n\n    map.put( &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67.5&lt;/span&gt; );\n    map.put( &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99.5&lt;/span&gt; );\n    map.put( &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;82.4&lt;/span&gt; );\n    map.put( &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42.0&lt;/span&gt; );\n\n    print( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unsorted map&quot;&lt;/span&gt;, map );\n    map.sortByValue();\n    print( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sorted map&quot;&lt;/span&gt;, map );\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hereby donated to the public domain.&lt;/p&gt;\n    ","\n&lt;p&gt;Some simple changes in order to have a sorted map with pairs that have duplicate values. In the compare method (class ValueComparator) when values are equal do not return 0 but return the result of comparing the 2 keys. Keys are distinct in a map so you succeed to keep duplicate values (which are sorted by keys by the way). So the above example could be modified like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object a, Object b)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((Double)base.get(a) &amp;lt; (Double)base.get(b)) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((Double)base.get(a) == (Double)base.get(b)) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((String)a).compareTo((String)b);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n      }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For sure the solution of Stephen is really great, but for those who can&apos;t use Guava:&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s my solution for sorting by value a map.\nThis solution handle the case where there are twice the same value etc...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If you want to sort a map by value, and if there can be twice the same value:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// here is your original map&lt;/span&gt;\nMap&amp;lt;String,Integer&amp;gt; mapToSortByValue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;G&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;);\nmapToSortByValue.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;H&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort all the map entries by value&lt;/span&gt;\nSet&amp;lt;Map.Entry&amp;lt;String,Integer&amp;gt;&amp;gt; set = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeSet&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String,Integer&amp;gt;&amp;gt;(\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Comparator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String,Integer&amp;gt;&amp;gt;(){\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Map.Entry&amp;lt;String,Integer&amp;gt; obj1, Map.Entry&amp;lt;String,Integer&amp;gt; obj2)&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;val1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; obj1.getValue();\n                &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;val2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; obj2.getValue();\n                &lt;span class=&quot;hljs-comment&quot;&gt;// DUPLICATE VALUE CASE&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// If the values are equals, we can&apos;t return 0 because the 2 entries would be considered&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// as equals and one of them would be deleted (because we use a set, no duplicate, remember!)&lt;/span&gt;\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compareValues&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; val1.compareTo(val2);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( compareValues == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) {\n                    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;key1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; obj1.getKey();\n                    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; obj2.getKey();\n                    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compareKeys&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; key1.compareTo(key2);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( compareKeys == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) {\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// what you return here will tell us if you keep REAL KEY-VALUE duplicates in your set&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// if you want to, do whatever you want but do not return 0 (but don&apos;t break the comparator contract!)&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n                    }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compareKeys;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compareValues;\n            }\n        }\n);\nset.addAll(mapToSortByValue.entrySet());\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// OK NOW OUR SET IS SORTED COOL!!!!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// And there&apos;s nothing more to do: the entries are sorted by value!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( Map.Entry&amp;lt;String,Integer&amp;gt; entry : set ) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set entries: &quot;&lt;/span&gt; + entry.getKey() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; -&amp;gt; &quot;&lt;/span&gt; + entry.getValue());\n}\n\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// But if you add them to an hashmap&lt;/span&gt;\nMap&amp;lt;String,Integer&amp;gt; myMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String,Integer&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// When iterating over the set the order is still good in the println...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( Map.Entry&amp;lt;String,Integer&amp;gt; entry : set ) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Added to result map entries: &quot;&lt;/span&gt; + entry.getKey() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + entry.getValue());\n    myMap.put(entry.getKey(), entry.getValue());\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// But once they are in the hashmap, the order is not kept!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( Integer value : myMap.values() ) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result map values: &quot;&lt;/span&gt; + value);\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Also this way doesn&apos;t work:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Logic because the entryset is a hashset for hashmaps and not a treeset&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (and even if it was a treeset, it would be on the keys only)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( Map.Entry&amp;lt;String,Integer&amp;gt; entry : myMap.entrySet() ) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result map entries: &quot;&lt;/span&gt; + entry.getKey() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; -&amp;gt; &quot;&lt;/span&gt; + entry.getValue());\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// CONCLUSION:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// If you want to iterate on a map ordered by value, you need to remember:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1) Maps are only sorted by keys, so you can&apos;t sort them directly by value&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2) So you simply CAN&apos;T return a map to a sortMapByValue function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3) You can&apos;t reverse the keys and the values because you have duplicate values&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//    This also means you can&apos;t neither use Guava/Commons bidirectionnal treemaps or stuff like that&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// SOLUTIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// So you can:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1) only sort the values which is easy, but you loose the key/value link (since you have duplicate values)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2) sort the map entries, but don&apos;t forget to handle the duplicate value case (like i did)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3) if you really need to return a map, use a LinkedHashMap which keep the insertion order&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The exec:\n&lt;a href=&quot;http://www.ideone.com/dq3Lu&quot; rel=&quot;nofollow&quot;&gt;http://www.ideone.com/dq3Lu&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Set entries: E -&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nSet entries: B -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nSet entries: A -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nSet entries: C -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nSet entries: D -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nSet entries: H -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nSet entries: G -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;\nSet entries: F -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\nAdded to result map entries: E -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nAdded to result map entries: B &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nAdded to result map entries: A &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nAdded to result map entries: C &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nAdded to result map entries: D &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nAdded to result map entries: H &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nAdded to result map entries: G &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;\nAdded to result map entries: F &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nResult map values: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nResult map values: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\nResult map entries: D -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nResult map entries: E -&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nResult map entries: F -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\nResult map entries: G -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;\nResult map entries: A -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nResult map entries: B -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nResult map entries: C -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nResult map entries: H -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope it will help some folks&lt;/p&gt;\n    "],"id":260,"title":"Sort a Map<Key, Value> by values","content":"\n                \n&lt;p&gt;I am relatively new to Java, and often find that I need to sort a &lt;code&gt;Map&amp;lt;Key, Value&amp;gt;&lt;/code&gt; on the values.&lt;/p&gt;\n\n&lt;p&gt;Since the values are not unique, I find myself converting the &lt;code&gt;keySet&lt;/code&gt; into an &lt;code&gt;array&lt;/code&gt;, and sorting that array through &lt;strong&gt;array sort&lt;/strong&gt; with a &lt;strong&gt;custom comparator&lt;/strong&gt; that sorts on the value associated with the key.&lt;/p&gt;\n\n&lt;p&gt;Is there an easier way?&lt;/p&gt;\n    ","slug":"sort-a-maplesskey-valuegreater-by-values-1657387443904","postType":"QUESTION","createdAt":"2022-07-09T17:24:03.000Z","updatedAt":"2022-07-09T17:24:03.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"How to manage startActivityForResult on Android","slug":"how-to-manage-startactivityforresult-on-android-1657387967393"},{"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749"},{"title":"Sort ArrayList of custom Objects by property","slug":"sort-arraylist-of-custom-objects-by-property-1657387678339"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"How do I Pandas group-by to get sum?","slug":"how-do-i-pandas-group-by-to-get-sum-1657387908708"},{"title":"My regex is matching too much. How do I make it stop? [duplicate]","slug":"my-regex-is-matching-too-much.-how-do-i-make-it-stop-duplicate-1657384845028"},{"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768"},{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"What is event bubbling and capturing?","slug":"what-is-event-bubbling-and-capturing-1657388059203"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"When should I use a return statement in ES6 arrow functions","slug":"when-should-i-use-a-return-statement-in-es6-arrow-functions-1657388472113"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195"},{"title":"Does JavaScript guarantee object property order?","slug":"does-javascript-guarantee-object-property-order-1657384822587"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"How to count the number of set bits in a 32-bit integer?","slug":"how-to-count-the-number-of-set-bits-in-a-32-bit-integer-1657388437370"},{"title":"GUI not working after rewriting to MVC","slug":"gui-not-working-after-rewriting-to-mvc-1657388388035"}]},"__N_SSG":true}