{"pageProps":{"data":{"answer":["\n&lt;p&gt;You should never escape, trim or use any other cleansing mechanism on passwords you&apos;ll be hashing with PHP&apos;s &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;password_hash()&lt;/code&gt;&lt;/a&gt; for a number of reasons, the single largest of which is because doing additional cleansing to the password requires unnecessary additional code.&lt;/p&gt;\n\n&lt;p&gt;You will argue (and you see it in every post where user data is accepted for use in your systems) that we should cleanse all user input and you would be right for every other piece of information we&apos;re accepting from our users. Passwords are different. &lt;em&gt;Hashed passwords cannot offer any SQL injection threat because the string is turned into hash prior to storing in the database.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The act of hashing a password is the act of making the password safe to store in your database.  The hash function doesn&apos;t give special meaning to any bytes, so no cleansing of its input is required for security reasons&lt;/p&gt;\n\n&lt;p&gt;If you follow the mantras of allowing users to use the &lt;a href=&quot;https://xkcd.com/936/&quot; rel=&quot;noreferrer&quot;&gt;passwords / phrases&lt;/a&gt; they desire and you &lt;a href=&quot;http://jayblanchard.net/security_fail_passwords.html&quot; rel=&quot;noreferrer&quot;&gt;don&apos;t limit passwords&lt;/a&gt;, allowing any length, any number of spaces and any special characters hashing will make the password/passphrase safe no matter what is contained within the password. As of right now the most common hash (the default), &lt;a href=&quot;http://php.net/manual/en/password.constants.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt;&lt;/a&gt;, turns the password into a 60 character wide string containing a random salt along with the hashed password information and a cost (the algorithmic cost of creating the hash):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm. This will always result in a hash using the &quot;$2y$&quot; crypt format, which is always 60 characters wide.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The space requirements for storing the hash are subject to change as different hashing methods are added to the function, so it is always better to go larger on the column type for the stored hash, such as &lt;code&gt;VARCHAR(255)&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You could use a complete SQL query as your password and it would be hashed, making it unexecutable by the SQL engine e.g.,&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `users`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Could be hashed to &lt;code&gt;$2y$10$1tOKcWUWBW5gBka04tGMO.BH7gs/qjAHZsC5wyG0zmI2C.KgaqU5G&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Let&apos;s see how different sanitizing methods affect the password -&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The password is &lt;code&gt;I&apos;m a &quot;dessert topping&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&lt;/code&gt; (There are 5 spaces at the end of the password which are not displayed here.)&lt;/p&gt;\n\n&lt;p&gt;When we apply the following methods of trimming we get some wildy different results:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;var_dump(&lt;span class=&quot;hljs-name&quot;&gt;trim&lt;/span&gt;($_POST[&apos;upassword&apos;]))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\nvar_dump(&lt;span class=&quot;hljs-name&quot;&gt;htmlentities&lt;/span&gt;($_POST[&apos;upassword&apos;]))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\nvar_dump(&lt;span class=&quot;hljs-name&quot;&gt;htmlspecialchars&lt;/span&gt;($_POST[&apos;upassword&apos;]))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\nvar_dump(&lt;span class=&quot;hljs-name&quot;&gt;addslashes&lt;/span&gt;($_POST[&apos;upassword&apos;]))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\nvar_dump(&lt;span class=&quot;hljs-name&quot;&gt;strip_tags&lt;/span&gt;($_POST[&apos;upassword&apos;]))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m a &quot;&lt;/span&gt;dessert topping&lt;span class=&quot;hljs-string&quot;&gt;&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// spaces at the end are missing&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m a &amp;amp;quot;dessert topping&amp;amp;quot; &amp;amp;amp; a &amp;amp;lt;floor wax&amp;amp;gt;!     &quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// double quotes, ampersand and braces have been changed&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m a &amp;amp;quot;dessert topping&amp;amp;quot; &amp;amp;amp; a &amp;amp;lt;floor wax&amp;amp;gt;!     &quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// same here&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;I\\&apos;m a \\&quot;dessert topping\\&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!     &quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// escape characters have been added&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m a &quot;&lt;/span&gt;dessert topping&lt;span class=&quot;hljs-string&quot;&gt;&quot; &amp;amp; a !     &quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// looks like we have something missing&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What happens when we send these to &lt;code&gt;password_hash()&lt;/code&gt;? They all get hashed, just as the query did above. The problem comes in when you try to verify the password. If we employ one or more of these methods we must re-employ them prior to comparing them with &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;password_verify()&lt;/code&gt;&lt;/a&gt;. The following would fail:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;password_verify(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;upassword&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$hashed_password&lt;/span&gt;); // &lt;span class=&quot;hljs-built_in&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$hashed_password&lt;/span&gt; comes from a database query\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would have to run the posted password through the cleansing method you chose before using the result of that in password verification. It is an unnecessary set of steps and will make the hash no better.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Using a PHP version less than 5.5? You can use the &lt;code&gt;password_hash()&lt;/code&gt; &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot; rel=&quot;noreferrer&quot;&gt;compatibility pack&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You really shouldn&apos;t use &lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;MD5 password hashes&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Before hashing the password, you should normalise it as described in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7613#section-4&quot; rel=&quot;nofollow noreferrer&quot;&gt;section 4 of RFC 7613&lt;/a&gt;.  In particular:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Additional Mapping Rule: Any instances of non-ASCII space MUST be\nmapped to ASCII space (U+0020); a non-ASCII space is any Unicode\ncode point having a Unicode general category of &quot;Zs&quot; (with the\nexception of U+0020).&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;Normalization Rule: Unicode Normalization Form C (NFC) MUST be\napplied to all characters.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This attempts to ensure that if the user types the same password but using a different input method, the password should still be accepted.&lt;/p&gt;\n    "],"id":237,"title":"Cleansing User Passwords","content":"\n                \n&lt;p&gt;How should I escape or cleanse user-provided passwords before I hash them and store them in my database?&lt;/p&gt;\n\n&lt;p&gt;When PHP developers consider hashing users&apos; passwords for security purposes, they often tend to think of those passwords like they would any other user-provided data. This subject comes up often in PHP questions related to password storage; the developer often wants to cleanse the password using functions such as &lt;code&gt;escape_string()&lt;/code&gt;(in various iterations), &lt;code&gt;htmlspecialchars()&lt;/code&gt;, &lt;code&gt;addslashes()&lt;/code&gt; and others before hashing it and storing it in the database. &lt;/p&gt;\n    ","slug":"cleansing-user-passwords-1657387365583","postType":"QUESTION","createdAt":"2022-07-09T17:22:45.000Z","updatedAt":"2022-07-09T17:22:45.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420"},{"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760"},{"title":"Split comma-separated strings in a column into separate rows","slug":"split-comma-separated-strings-in-a-column-into-separate-rows-1657387785823"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"Passing data between view controllers","slug":"passing-data-between-view-controllers-1657384540021"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"What is a plain English explanation of \"Big O\" notation?","slug":"what-is-a-plain-english-explanation-of-\"big-o\"-notation-1657387641953"},{"title":"What is the best regular expression to check if a string is a valid URL?","slug":"what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url-1657387618306"},{"title":"In CSS Flexbox, why are there no \"justify-items\" and \"justify-self\" properties?","slug":"in-css-flexbox-why-are-there-no-\"justify-items\"-and-\"justify-self\"-properties-1657384782711"},{"title":"Using regular expressions to parse HTML: why not?","slug":"using-regular-expressions-to-parse-html:-why-not-1657387543969"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"How do I make Git forget about a file that was tracked, but is now in .gitignore?","slug":"how-do-i-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-.gitignore-1657387328843"},{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"}]},"__N_SSG":true}