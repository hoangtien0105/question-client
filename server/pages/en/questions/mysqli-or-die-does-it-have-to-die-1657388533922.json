{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n&lt;p&gt;Does it have to die&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Quite contrary, &lt;strong&gt;it shouldn&apos;t &lt;code&gt;or die()&lt;/code&gt; ever.&lt;/strong&gt;&lt;br&gt;\nPHP is a language of bad heredity. Very bad heredity. And &lt;code&gt;or die()&lt;/code&gt; with error message is one of the worst rudiments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;die throws the error message out, revealing some system internals to the potential attacker&lt;/li&gt;\n&lt;li&gt;such error message confuses casual users, because they don&apos;t understand what does it mean&lt;/li&gt;\n&lt;li&gt;Besides, &lt;code&gt;die&lt;/code&gt; kills the script in the middle, leaving users without  familiar interface to work with, so they&apos;d likely just drop out&lt;/li&gt;\n&lt;li&gt;it kills the script irrecoverably. While exceptions can be caught and gracefully handled&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;die()&lt;/code&gt; gives you no hint of &lt;em&gt;where the error has been occurred&lt;/em&gt;. And in a relatively big application it will be quite a pain to find.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So, never use &lt;code&gt;die()&lt;/code&gt; with MySQL errors, &lt;strong&gt;even for the temporary debugging&lt;/strong&gt;: there are better ways.&lt;/p&gt;\n&lt;p&gt;Instead of manually checking for the error, just configure mysqli to throw exceptions on error, by adding the following line to your connection code&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and after that just write every mysqli command as is, without any &lt;code&gt;or die&lt;/code&gt; or anything else:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = mysqli_query(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will throw an exception in case of error and thus you will always be informed of every problem without a single line of extra code.&lt;/p&gt;\n&lt;p&gt;A more detailed explanation on how to make your error reporting production ready, uniform and overall sensible while making your code much cleaner, you can find in my article on &lt;a href=&quot;https://phpdelusions.net/articles/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP error reporting&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;or&lt;/code&gt; is just an operator (very similar to &lt;code&gt;||&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;or die()&lt;/code&gt; syntax works because &lt;code&gt;or&lt;/code&gt; short-circuits, which means that if the first statement is true, &lt;code&gt;True or X&lt;/code&gt; will always be true, so &lt;code&gt;X&lt;/code&gt; isn&apos;t evaluated and your script doesn&apos;t &lt;code&gt;die&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, you can provide a different function after the (or).\nI have tested the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;what!&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It doesn&apos;t have to be &lt;code&gt;die()&lt;/code&gt; specifically, but it needs to be something that&apos;ll make the script halt by calling &lt;code&gt;exit()&lt;/code&gt; or &lt;code&gt;die()&lt;/code&gt;, or something that throws an exception. Otherwise, the script will continue with the return value of that function (which is probably either null or some sort of junk) in &lt;code&gt;$update_result&lt;/code&gt;, which will almost certainly cause problems.&lt;/p&gt;\n    "],"id":599,"title":"mysqli or die, does it have to die?","content":"\n                \n&lt;p&gt;If I use a bit of code like this: &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$update_result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$sql_update_login&lt;/span&gt; ) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Unable to execute query. &apos;&lt;/span&gt;. &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Does it have to die or can you put a different query afterwards?  Like a predetermined function that writes a log of the error to another table?  Such as:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$update_result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mysqli_query( &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$sql_update_login&lt;/span&gt; ) or function(&apos;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What are the other options after &apos;or&apos;?  I haven&apos;t found it in the documentation, any clues are appreciated.&lt;/p&gt;\n    ","slug":"mysqli-or-die-does-it-have-to-die-1657388533922","postType":"QUESTION","createdAt":"2022-07-09T17:42:13.000Z","updatedAt":"2022-07-09T17:42:13.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Convert columns into rows with Pandas","slug":"convert-columns-into-rows-with-pandas-1657388374964"},{"title":"Is it possible to escape regex metacharacters reliably with sed","slug":"is-it-possible-to-escape-regex-metacharacters-reliably-with-sed-1657388428795"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"What is the explicit promise construction antipattern and how do I avoid it?","slug":"what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it-1657384436212"},{"title":"How do I give text or an image a transparent background using CSS?","slug":"how-do-i-give-text-or-an-image-a-transparent-background-using-css-1657388188508"},{"title":"Command not found error in Bash variable assignment","slug":"command-not-found-error-in-bash-variable-assignment-1657388326347"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"Why does jQuery or a DOM method such as getElementById not find the element?","slug":"why-does-jquery-or-a-dom-method-such-as-getelementbyid-not-find-the-element-1657384326458"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"How do you use bcrypt for hashing passwords in PHP? [duplicate]","slug":"how-do-you-use-bcrypt-for-hashing-passwords-in-php-duplicate-1657387318517"},{"title":"Selecting and manipulating CSS pseudo-elements such as ::before and ::after using javascript (or jQuery)","slug":"selecting-and-manipulating-css-pseudo-elements-such-as-::before-and-::after-using-javascript-(or-jquery)-1657387406132"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"Big O, how do you calculate/approximate it?","slug":"big-o-how-do-you-calculateapproximate-it-1657387856392"},{"title":"CSS selector for first element with class","slug":"css-selector-for-first-element-with-class-1657388028765"}]},"__N_SSG":true}