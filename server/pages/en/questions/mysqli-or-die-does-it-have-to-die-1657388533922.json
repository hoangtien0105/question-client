{"pageProps":{"data":{"answer":["\n&lt;blockquote&gt;\n&lt;p&gt;Does it have to die&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Quite contrary, &lt;strong&gt;it shouldn&apos;t &lt;code&gt;or die()&lt;/code&gt; ever.&lt;/strong&gt;&lt;br&gt;\nPHP is a language of bad heredity. Very bad heredity. And &lt;code&gt;or die()&lt;/code&gt; with error message is one of the worst rudiments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;die throws the error message out, revealing some system internals to the potential attacker&lt;/li&gt;\n&lt;li&gt;such error message confuses casual users, because they don&apos;t understand what does it mean&lt;/li&gt;\n&lt;li&gt;Besides, &lt;code&gt;die&lt;/code&gt; kills the script in the middle, leaving users without  familiar interface to work with, so they&apos;d likely just drop out&lt;/li&gt;\n&lt;li&gt;it kills the script irrecoverably. While exceptions can be caught and gracefully handled&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;die()&lt;/code&gt; gives you no hint of &lt;em&gt;where the error has been occurred&lt;/em&gt;. And in a relatively big application it will be quite a pain to find.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So, never use &lt;code&gt;die()&lt;/code&gt; with MySQL errors, &lt;strong&gt;even for the temporary debugging&lt;/strong&gt;: there are better ways.&lt;/p&gt;\n&lt;p&gt;Instead of manually checking for the error, just configure mysqli to throw exceptions on error, by adding the following line to your connection code&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and after that just write every mysqli command as is, without any &lt;code&gt;or die&lt;/code&gt; or anything else:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = mysqli_query(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will throw an exception in case of error and thus you will always be informed of every problem without a single line of extra code.&lt;/p&gt;\n&lt;p&gt;A more detailed explanation on how to make your error reporting production ready, uniform and overall sensible while making your code much cleaner, you can find in my article on &lt;a href=&quot;https://phpdelusions.net/articles/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP error reporting&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;or&lt;/code&gt; is just an operator (very similar to &lt;code&gt;||&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;or die()&lt;/code&gt; syntax works because &lt;code&gt;or&lt;/code&gt; short-circuits, which means that if the first statement is true, &lt;code&gt;True or X&lt;/code&gt; will always be true, so &lt;code&gt;X&lt;/code&gt; isn&apos;t evaluated and your script doesn&apos;t &lt;code&gt;die&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, you can provide a different function after the (or).\nI have tested the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;what!&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It doesn&apos;t have to be &lt;code&gt;die()&lt;/code&gt; specifically, but it needs to be something that&apos;ll make the script halt by calling &lt;code&gt;exit()&lt;/code&gt; or &lt;code&gt;die()&lt;/code&gt;, or something that throws an exception. Otherwise, the script will continue with the return value of that function (which is probably either null or some sort of junk) in &lt;code&gt;$update_result&lt;/code&gt;, which will almost certainly cause problems.&lt;/p&gt;\n    "],"id":599,"title":"mysqli or die, does it have to die?","content":"\n                \n&lt;p&gt;If I use a bit of code like this: &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$update_result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$sql_update_login&lt;/span&gt; ) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Unable to execute query. &apos;&lt;/span&gt;. &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Does it have to die or can you put a different query afterwards?  Like a predetermined function that writes a log of the error to another table?  Such as:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$update_result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mysqli_query( &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$sql_update_login&lt;/span&gt; ) or function(&apos;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What are the other options after &apos;or&apos;?  I haven&apos;t found it in the documentation, any clues are appreciated.&lt;/p&gt;\n    ","slug":"mysqli-or-die-does-it-have-to-die-1657388533922","postType":"QUESTION","createdAt":"2022-07-09T17:42:13.000Z","updatedAt":"2022-07-09T17:42:13.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"},{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"},{"title":"Add a property to a JavaScript object using a variable as the name?","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650"},{"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371"},{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How to return DataSnapshot value as a result of a method?","slug":"how-to-return-datasnapshot-value-as-a-result-of-a-method-1657387538165"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Why can templates only be implemented in the header file?","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"}]},"__N_SSG":true}