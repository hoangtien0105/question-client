{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/643542/doesnt-javascript-support-closures-with-local-variables/643664#643664&quot;&gt;Quoting myself&lt;/a&gt; for an explanation of the first example:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;JavaScript&apos;s scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function.&lt;/p&gt;\n&lt;p&gt;After the loop terminates, the function-level variable i has the value 5, and that&apos;s what the inner function &apos;sees&apos;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In the second example, for each iteration step the outer function literal will evaluate to a new function object with its own scope and local variable &lt;code&gt;num&lt;/code&gt;, whose value is set to the current value of &lt;code&gt;i&lt;/code&gt;. As &lt;code&gt;num&lt;/code&gt; is never modified, it will stay constant over the lifetime of the closure: The next iteration step doesn&apos;t overwrite the old value as the function objects are independant.&lt;/p&gt;\n&lt;p&gt;Keep in mind that this approach is rather inefficient as two new function objects have to be created for each link. This is unnecessary, as they can easily be shared if you use the DOM node for information storage:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;linkListener&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addLinks&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\n        link.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createTextNode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Link &apos;&lt;/span&gt; + i));\n        link.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; = i;\n        link.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = linkListener;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(link);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We have 5 divs on the page, each with an ID ... div1, div2, div3, div4, div5&lt;/p&gt;\n&lt;p&gt;jQuery can do this ...&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#div&quot;&lt;/span&gt; + i).&lt;span class=&quot;hljs-property&quot;&gt;click&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { alert ($(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;index&lt;/span&gt;()) } )\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But really addressing the problem (and building this up slowly) ...&lt;/p&gt;\n&lt;h3&gt;STEP 1&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#div&quot;&lt;/span&gt; + i).&lt;span class=&quot;hljs-property&quot;&gt;click&lt;/span&gt; (\n        &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;TODO:&lt;/span&gt; Write function to handle click event&lt;/span&gt;\n    )\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;STEP 2&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#div&quot;&lt;/span&gt; + i).&lt;span class=&quot;hljs-property&quot;&gt;click&lt;/span&gt; (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// A functions variable values are set WHEN THE FUNCTION IS CALLED!&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// PLEASE UNDERSTAND THIS AND YOU ARE HOME AND DRY (took me 2 years)!&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Now the click event is expecting a function as a handler so return it&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { alert (num) }\n        }(i) &lt;span class=&quot;hljs-comment&quot;&gt;// We call the function here, passing in i&lt;/span&gt;\n    )\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;SIMPLE TO UNDERSTAND ALTERNATIVE&lt;/h3&gt;\n&lt;p&gt;If you can&apos;t get your head around that then this should be easier to understand and has the same effect ...&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clickHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {    \n        $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#div&quot;&lt;/span&gt; + i).&lt;span class=&quot;hljs-property&quot;&gt;click&lt;/span&gt; (\n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { alert (num) }\n        )\n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;clickHandler&lt;/span&gt;(i);\n    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This should be simple to understand if you remember that a functions variable values are set when the function is called (but this uses the exact same thought process as before)&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, in the first example you&apos;re binding the &lt;code&gt;i&lt;/code&gt; inside the &lt;code&gt;onclick&lt;/code&gt; handler directly to the &lt;code&gt;i&lt;/code&gt; outside the &lt;code&gt;onclick&lt;/code&gt; handler.  So when the &lt;code&gt;i&lt;/code&gt; outside the &lt;code&gt;onclick&lt;/code&gt; handler changes, the &lt;code&gt;i&lt;/code&gt; inside the &lt;code&gt;onclick&lt;/code&gt; handler changes too.&lt;/p&gt;\n\n&lt;p&gt;In the second example, instead of binding it to the &lt;code&gt;num&lt;/code&gt; in the &lt;code&gt;onclick&lt;/code&gt; handler, you&apos;re passing it into a function, which then binds it to the &lt;code&gt;num&lt;/code&gt; in the &lt;code&gt;onclick&lt;/code&gt; handler.  When you pass it into the function, the value of &lt;code&gt;i&lt;/code&gt; is &lt;em&gt;copied, not bound&lt;/em&gt; to &lt;code&gt;num&lt;/code&gt;.  So when &lt;code&gt;i&lt;/code&gt; changes, &lt;code&gt;num&lt;/code&gt; stays the same.  The copy occurs because functions in JavaScript are &quot;closures&quot;, meaning that once something is passed into the function, it&apos;s &quot;closed&quot; for outside modification.&lt;/p&gt;\n    ","\n&lt;p&gt;Others have explained what&apos;s going on, here&apos;s an alternative solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addLinks&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, link; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n    link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n    link.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Link &quot;&lt;/span&gt; + i;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;n&lt;/span&gt;: i }) {\n      link.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(n);\n      };\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(link);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically the poor mans let-binding.&lt;/p&gt;\n    ","\n&lt;p&gt;In the first example, you simply bind this function to the onclick event:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means that on the click event js should alert the value of the addlink functions i variable. Its value will be 5 because of the for loop().&lt;/p&gt;\n\n&lt;p&gt;In the second example you generate a function to be bound with another function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(num); };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means: if called with a value, return me a function that will alert the input value. E.g. calling &lt;code&gt;function(3)&lt;/code&gt; will return &lt;code&gt;function() { alert(3) };&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You call this function with the value i at every iteration, thus you create separate onclick functions for each links.&lt;/p&gt;\n\n&lt;p&gt;The point is that in the first example your function contained a variable reference, while in the second one with the help of the outer function you substituted the reference with an actual value. This is called a closure roughly because you &quot;enclose&quot; the current value of a variable within your function instead of keeping a reference to it.&lt;/p&gt;\n    "],"id":282,"title":"Javascript infamous Loop issue? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/750486/javascript-closure-inside-loops-simple-practical-example&quot; dir=&quot;ltr&quot;&gt;JavaScript closure inside loops – simple practical example&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (44 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2014-05-21 09:52:27Z&quot; class=&quot;relativetime&quot;&gt;8 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I&apos;ve got the following code snippet.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addLinks&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, link; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n        link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n        link.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Link &quot;&lt;/span&gt; + i;\n        link.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n        };\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(link);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above code is for generating 5 links and binding each link with an alert event to show the current link id. But It doesn&apos;t work. When you click the generated links they all say &quot;link 5&quot;.&lt;/p&gt;\n&lt;p&gt;But the following code snippet works as our expectation.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addLinks&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, link; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n        link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n        link.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Link &quot;&lt;/span&gt; + i;\n        link.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(num);\n            };\n        }(i);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(link);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above 2 snippets are quoted from &lt;a href=&quot;http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;here&quot;&gt;here&lt;/a&gt;. As the author&apos;s explanation seems the &lt;strong&gt;closure&lt;/strong&gt; makes the magic.&lt;/p&gt;\n&lt;p&gt;But how it works and How &lt;strong&gt;closure&lt;/strong&gt; makes it work are all beyond my understanding. Why the first one doesn&apos;t work while the second one works? Can anyone give a detailed explanation about the magic?&lt;/p&gt;\n    ","slug":"javascript-infamous-loop-issue-duplicate-1657387498530","postType":"QUESTION","createdAt":"2022-07-09T17:24:58.000Z","updatedAt":"2022-07-09T17:24:58.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"How to use SharedPreferences in Android to store, fetch and edit values [closed]","slug":"how-to-use-sharedpreferences-in-android-to-store-fetch-and-edit-values-closed-1657387683057"},{"title":"What is the difference between a deep copy and a shallow copy?","slug":"what-is-the-difference-between-a-deep-copy-and-a-shallow-copy-1657388445063"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Get the values from the \"GET\" parameters (JavaScript) [duplicate]","slug":"get-the-values-from-the-\"get\"-parameters-(javascript)-duplicate-1657387656693"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"Read file line by line using ifstream in C++","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"AsyncTask Android example","slug":"asynctask-android-example-1657388127898"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"How can I read inputs as numbers?","slug":"how-can-i-read-inputs-as-numbers-1657384503324"},{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"Is an array name a pointer?","slug":"is-an-array-name-a-pointer-1657387874827"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"What is a plain English explanation of \"Big O\" notation?","slug":"what-is-a-plain-english-explanation-of-\"big-o\"-notation-1657387641953"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"Why does a RegExp with global flag give wrong results?","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550"}]},"__N_SSG":true}