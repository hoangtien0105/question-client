{"pageProps":{"data":{"answer":["\n&lt;h3&gt;&lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.product&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;itertools.product&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;\n\n&lt;p&gt;Available from Python 2.6.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelists):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(element)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is the same as,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(element)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n...\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Python 2.5 and older:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[(a, b, c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s a recursive version of &lt;code&gt;product()&lt;/code&gt; (just an illustration):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; args:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(((),)) &lt;span class=&quot;hljs-comment&quot;&gt;# yield tuple()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (items + (item,) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; items &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(*args[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; args[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;])) \n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([]))\n[]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product())\n[()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would use list comprehension : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\ncart_prod = [(a,b,c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;with &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.permutations&quot; rel=&quot;noreferrer&quot;&gt;itertools.product&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\nresult = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product(*somelists))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a recursive generator, which doesn&apos;t store any temporary lists&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ar_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; ar_list:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; ()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ar_list[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(ar_list[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (a,)+prod\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.6 and above you can use &apos;itertools.product`. In older versions of Python you can use the following (almost -- see documentation) equivalent &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.product&quot; rel=&quot;nofollow noreferrer&quot;&gt;code from the documentation&lt;/a&gt;, at least as a starting point:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwds&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# product(&apos;ABCD&apos;, &apos;xy&apos;) --&amp;gt; Ax Ay Bx By Cx Cy Dx Dy&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# product(range(2), repeat=3) --&amp;gt; 000 001 010 011 100 101 110 111&lt;/span&gt;\n    pools = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, args) * kwds.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;repeat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    result = [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; pool &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pools:\n        result = [x+[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pool]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(prod)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result of both is an iterator, so if you really need a list for furthert processing, use &lt;code&gt;list(result)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Although there are many answers already, I would like to share some of my thoughts:&lt;/p&gt;\n\n&lt;h2&gt;Iterative approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_iterative&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  result = [[]]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; pool &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pools:\n    result = [x+[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pool]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Recursive Approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_recursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pools) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n    pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = product(pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cartesian_recursive(pools)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = product(pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pools\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [xx + [yy] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(xx, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [xx] + [yy] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; xx &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; yy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Lambda Approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_reduct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y: product(x,y) , pools)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Recursive Approach:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rec_cart&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start, array, partial, results&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(partial) == &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array):\n    results.append(partial)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; \n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array[start]:\n    rec_cart(start+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, array, partial+[element], results)\n\nrec_res = []\nsome_lists = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]  \nrec_cart(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, some_lists, [], rec_res)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(rec_res)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Iterative Approach:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;itr_cart&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n  results = [[]]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)):\n    temp = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; res &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; results:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array[i]:\n        temp.append(res+[element])\n    results = temp\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results\n\nsome_lists = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]  \nitr_res = itr_cart(some_lists)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(itr_res)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A minor modification to the above recursive generator solution in variadic flavor:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product_args&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; args:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product_args(*args[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; args[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; ((),):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (a,) + prod\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And of course a wrapper which makes it work exactly the same as that solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ar_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    &amp;gt;&amp;gt;&amp;gt; list(product(()))\n    [()]\n    &amp;gt;&amp;gt;&amp;gt; list(product2(()))\n    []\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; product_args(*ar_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &lt;strong&gt;one trade-off&lt;/strong&gt;: it checks if recursion should break upon each outer loop, and &lt;strong&gt;one gain&lt;/strong&gt;: no yield upon empty call, e.g.&lt;code&gt;product(())&lt;/code&gt;, which I suppose would be semantically more correct (see the doctest).&lt;/p&gt;\n\n&lt;p&gt;Regarding list comprehension: the mathematical definition applies to an arbitrary number of arguments, while list comprehension could only deal with a known number of them.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to add a bit to what has already been said: if you use sympy, you can use symbols rather than strings which makes them mathematically useful.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sympy\n\nx, y = sympy.symbols(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x y&apos;&lt;/span&gt;)\n\nsomelist = [[x,y], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\nsomelist2 = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelist):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; element\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;About &lt;a href=&quot;http://sympy.com&quot; rel=&quot;nofollow&quot;&gt;sympy&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I believe this works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;L&lt;/span&gt;):  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {(a,) + b &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] \n                        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cartesian_product(L[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])}\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {()}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following code is a 95 % copy from &lt;a href=&quot;https://stackoverflow.com/a/1235363/11154841&quot;&gt;Using numpy to build an array of all combinations of two arrays&lt;/a&gt;, all credits go there! This is said to be much faster since it is only in numpy.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrays, dtype=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, out=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    arrays = [np.asarray(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arrays]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dtype &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        dtype = arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].dtype\n    n = np.prod([x.size &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arrays])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; out &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        out = np.zeros([n, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(arrays)], dtype=dtype)\n\n    m = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(n / arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].size) \n    out[:,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = np.repeat(arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], m)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; arrays[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]:\n        cartesian(arrays[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], out=out[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].size):\n            out[j*m:(j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] = out[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need to define the dtype as a parameter if you do not want to take the dtype from the first entry for all entries. Take dtype = &apos;object&apos; if you have letters and numbers as items. Test:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\n[&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cartesian(somelists, &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Out:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;List comprehension is simple and clean:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\nlst = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelists)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This can be done as&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(x, y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;another variable? No problem:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;itertools.product&lt;/code&gt; in the standard library to get the cartesian product. Other cool, related utilities in &lt;code&gt;itertools&lt;/code&gt; include &lt;code&gt;permutations&lt;/code&gt;, &lt;code&gt;combinations&lt;/code&gt;, and &lt;code&gt;combinations_with_replacement&lt;/code&gt;. Here is &lt;a href=&quot;https://polylang.io/#/python?id=bc8aa0249fdb4cd2b9ce2d647b1f9217&quot; rel=&quot;nofollow noreferrer&quot;&gt;a link&lt;/a&gt; to a python codepen for the snippet below:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; product\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\nresult = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product(*somelists))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(result)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":348,"title":"Get the cartesian product of a series of lists?","content":"\n                \n&lt;p&gt;How can I get the Cartesian product (every possible combination of values) from a group of lists?&lt;/p&gt;\n\n&lt;p&gt;Input: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Desired output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) ...]\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890","postType":"QUESTION","createdAt":"2022-07-09T17:28:29.000Z","updatedAt":"2022-07-09T17:28:29.000Z","tags":[{"id":1965,"name":"cartesian-product","slug":"cartesian-product","createdAt":"2022-07-09T17:28:30.000Z","updatedAt":"2022-07-09T17:28:30.000Z","Questions_Tags":{"questionId":348,"tagId":1965}}],"relatedQuestions":[{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890","tags":[{"name":"cartesian-product","Questions_Tags":{"questionId":348,"tagId":1965}}]}]},"randomQuestions":[{"title":"How to calculate the difference between two dates using PHP?","slug":"how-to-calculate-the-difference-between-two-dates-using-php-1657387409560"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"$(document).ready equivalent without jQuery","slug":"dollar(document).ready-equivalent-without-jquery-1657388504115"},{"title":"Is an array name a pointer?","slug":"is-an-array-name-a-pointer-1657387874827"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"Transpose / reshape dataframe without \"timevar\" from long to wide format","slug":"transpose-reshape-dataframe-without-\"timevar\"-from-long-to-wide-format-1657388213347"},{"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234"},{"title":"How do I vertically center text with CSS? [duplicate]","slug":"how-do-i-vertically-center-text-with-css-duplicate-1657387645821"},{"title":"What is __init__.py for?","slug":"what-is-__init__.py-for-1657388415243"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"How do I write a correct micro-benchmark in Java?","slug":"how-do-i-write-a-correct-micro-benchmark-in-java-1657384488725"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"How can I access the contents of an iframe with JavaScript/jQuery?","slug":"how-can-i-access-the-contents-of-an-iframe-with-javascriptjquery-1657388369923"},{"title":"Where should I put <script> tags in HTML markup?","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798"}]},"__N_SSG":true}