{"pageProps":{"data":{"answer":["\n&lt;p&gt;From the &lt;a href=&quot;http://floating-point-gui.de/&quot; rel=&quot;noreferrer&quot;&gt;Floating-Point Guide&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;What can I do to avoid this problem?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;That depends on what kind of\ncalculations youre doing.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you really need your results to add up exactly, especially when you\nwork with money: use a special decimal\ndatatype.&lt;/li&gt;\n&lt;li&gt;If you just dont want to see all those extra decimal places: simply\nformat your result rounded to a fixed\nnumber of decimal places when\ndisplaying it.&lt;/li&gt;\n&lt;li&gt;If you have no decimal datatype available, an alternative is to work\nwith integers, e.g. do money\ncalculations entirely in cents. But\nthis is more work and has some\ndrawbacks.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that the first point only applies if you really need specific precise &lt;em&gt;decimal&lt;/em&gt; behaviour. Most people don&apos;t need that, they&apos;re just irritated that their programs don&apos;t work correctly with numbers like 1/10 without realizing that they wouldn&apos;t even blink at the same error if it occurred with 1/3.&lt;/p&gt;\n&lt;p&gt;If the first point really applies to you, use &lt;a href=&quot;https://github.com/royNiladri/js-big-decimal&quot; rel=&quot;noreferrer&quot;&gt;BigDecimal for JavaScript&lt;/a&gt;, which is not elegant at all, but actually solves the problem rather than providing an imperfect workaround.&lt;/p&gt;\n    ","\n&lt;p&gt;I like Pedro Ladaria&apos;s solution and use something similar.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(number).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unlike Pedros solution this will round up 0.999...repeating and is accurate to plus/minus one on the least significant digit.&lt;/p&gt;\n\n&lt;p&gt;Note: When dealing with 32 or 64 bit floats, you should use toPrecision(7) and toPrecision(15) for best results.  See &lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;this question&lt;/a&gt; for info as to why.&lt;/p&gt;\n    ","\n&lt;p&gt;For the mathematically inclined: &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The recommended approach is to use correction factors (multiply by a suitable power of 10 so that the arithmetic happens between integers).  For example, in the case of &lt;code&gt;0.1 * 0.2&lt;/code&gt;, the correction factor is &lt;code&gt;10&lt;/code&gt;, and you are performing the calculation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cf = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&amp;gt; x * y\n&lt;span class=&quot;hljs-number&quot;&gt;0.020000000000000004&lt;/span&gt;\n&amp;gt; (x * cf) * (y * cf) / (cf * cf)\n&lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A (very quick) solution looks something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _cf = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_shift&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = x.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;prev, next&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prev === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || next === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;(prev, _shift (next)); }, -&lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt;);\n  };\n})();\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = _cf.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(f === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, i, o&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + f * y; }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, cb, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) / f;\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;s&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;l,r&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title function_&quot;&gt;_cf&lt;/span&gt;(l,r); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (l * f - r * f) / f; };\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;m&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = _cf.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, i, o&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (x*f) * (y*f) / (f * f); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, cb, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;l,r&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title function_&quot;&gt;_cf&lt;/span&gt;(l,r); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (l * f) / (r * f); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I definitely recommend using a tested library like &lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;SinfulJS&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Are you only performing multiplication?  If so then you can use to your advantage a neat secret about decimal arithmetic.  That is that &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt;. That is to say that if we have &lt;code&gt;0.123 * 0.12&lt;/code&gt; then we know that there will be 5 decimal places because &lt;code&gt;0.123&lt;/code&gt; has 3 decimal places and &lt;code&gt;0.12&lt;/code&gt; has two. Thus if JavaScript gave us a number like &lt;code&gt;0.014760000002&lt;/code&gt; we can safely round to the 5th decimal place without fear of losing precision.&lt;/p&gt;\n    ","\n&lt;p&gt;Surprisingly, this function has not been posted yet although others have similar variations of it. It is from the MDN web docs for &lt;code&gt;Math.round()&lt;/code&gt;.\nIt&apos;s concise and allows for varying precision.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(number * factor) / factor;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5678&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected output: 1234.6&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5678&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected output: 1230&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inp = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; btn = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;);\n\nbtn.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  inp[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(inp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;) * &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(inp[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;) , &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; );\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//MDN function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(number * factor) / factor;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;button&lt;/span&gt;{\n&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0.1&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0.2&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;Get Product&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;UPDATE: Aug/20/2019&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Just noticed this error. I believe it&apos;s due to a floating point precision error with &lt;code&gt;Math.round()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1.005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1, incorrect, should be 1.01&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These conditions work correctly:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1.0005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1.001&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1235&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1230&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Fix:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRoundMod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = precision &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? number : &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; / factor + number;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( n * factor) / factor;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This just adds a digit to the right when rounding decimals.\nMDN has updated the &lt;code&gt;Math.round()&lt;/code&gt; page so maybe someone could provide a better solution.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m finding &lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot; rel=&quot;noreferrer&quot;&gt;BigNumber.js&lt;/a&gt; meets my needs.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;A JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It has good &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; and the author is very diligent responding to feedback.&lt;/p&gt;\n\n&lt;p&gt;The same author has 2 other similar libraries:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot; rel=&quot;noreferrer&quot;&gt;Big.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;A small, fast JavaScript library for arbitrary-precision decimal arithmetic. The little sister to bignumber.js.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and &lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot; rel=&quot;noreferrer&quot;&gt;Decimal.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;An arbitrary-precision Decimal type for JavaScript.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here&apos;s some code using BigNumber:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; product = &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;);  \n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#product&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(product);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;plus&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;);  \n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#sum&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(sum);\n\n\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 1.4.1 is not the current version, but works for this example. --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cdn.bootcss.com/bignumber.js/1.4.1/bignumber.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n.1 &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;times;&lt;/span&gt; .2 = &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n.1 &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;plus;&lt;/span&gt; .2 = &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You are looking for an &lt;code&gt;sprintf&lt;/code&gt; implementation for JavaScript, so that you can write out floats with small errors in them (since they are stored in binary format) in a format that you expect.&lt;/p&gt;\n\n&lt;p&gt;Try &lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot; rel=&quot;noreferrer&quot;&gt;javascript-sprintf&lt;/a&gt;, you would call it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; yourString = &lt;span class=&quot;hljs-title function_&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;, yourNumber);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to print out your number as a float with two decimal places.&lt;/p&gt;\n\n&lt;p&gt;You may also use  &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot; rel=&quot;noreferrer&quot;&gt;Number.toFixed()&lt;/a&gt;  for display purposes, if you&apos;d rather not include  more files merely for floating point rounding to a given precision.  &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; times = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((a * b) * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;---or---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fpFix = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(n * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpFix&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; 0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;---also---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fpArithmetic = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;op, x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;: x * y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;: x - y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;: x + y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;: x / y\n        }[op];        \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(n * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--- as in ---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 0.02&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 0.3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// -0.1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This function will determine the needed precision from the multiplication of two floating point numbers and return a result with the appropriate precision. Elegant though it is not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multFloats&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; atens = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), \n      btens = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(b).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(b).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a * atens) * (b * btens) / (atens * btens); \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;parseFloat()&lt;/code&gt; and &lt;code&gt;toFixed()&lt;/code&gt; if you want to bypass this issue for a small operation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;;\nb = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n\na + b = &lt;span class=&quot;hljs-number&quot;&gt;0.30000000000000004&lt;/span&gt;;\n\nc = &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;((a+b).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n\nc = &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;;\n\na = &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;;\nb = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n\na - b = &lt;span class=&quot;hljs-number&quot;&gt;0.09999999999999998&lt;/span&gt;;\n\nc = &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;((a-b).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n\nc = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You just have to make up your mind on how many decimal digits you actually want - can&apos;t have the cake and eat it too :-)&lt;/p&gt;\n\n&lt;p&gt;Numerical errors accumulate with every further operation and if you don&apos;t cut it off early it&apos;s just going to grow. Numerical libraries which present results that look clean simply cut off the last 2 digits at every step, numerical co-processors also have a &quot;normal&quot; and &quot;full&quot; lenght for the same reason. Cuf-offs are cheap for a processor but very expensive for you in a script (multiplying and dividing and using pov(...)). Good math lib would provide floor(x,n) to do the cut-off for you.&lt;/p&gt;\n\n&lt;p&gt;So at the very least you should make global var/constant with pov(10,n) - meaning that you decided on the precision you need :-) Then do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(x*&lt;span class=&quot;hljs-variable constant_&quot;&gt;PREC_LIM&lt;/span&gt;)/&lt;span class=&quot;hljs-variable constant_&quot;&gt;PREC_LIM&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// floor - you are cutting off, not rounding&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could also keep doing math and only cut-off at the end - assuming that you are only displaying and not doing if-s with results. If you can do that, then .toFixed(...) might be more efficient.&lt;/p&gt;\n\n&lt;p&gt;If you are doing if-s/comparisons and don&apos;t want to cut of then you also need a small constant, usually called eps, which is one decimal place higher than max expected error. Say that your cut-off is last two decimals - then your eps has 1 at the 3rd place from the last (3rd least significant) and you can use it to compare whether the result is within eps range of expected (0.02 -eps &amp;lt; 0.1*0.2 &amp;lt; 0.02 +eps).&lt;/p&gt;\n    ","\n&lt;p&gt;Notice that for the general purpose use, this behavior is likely to be acceptable.&lt;br&gt;\nThe problem arises when comparing those floating points values to determine an appropriate action.&lt;br&gt;\n   With the advent of ES6, a new constant &lt;code&gt;Number.EPSILON&lt;/code&gt; is defined to determine the acceptable error margin :&lt;br&gt;\nSo instead of performing the comparison like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// which returns false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you can define a custom compare function, like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;epsEqu&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;abs&lt;/span&gt;(x - y) &amp;lt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;EPSILON&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;epsEqu&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source : &lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot; rel=&quot;noreferrer&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The round() function at phpjs.org works nicely: &lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;http://phpjs.org/functions/round&lt;/a&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;num = &lt;span class=&quot;hljs-number&quot;&gt;.01&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;.06&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// yields 0.0699999999999&lt;/span&gt;\nrnum = &lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(num,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// yields 0.07&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://mikemcl.github.io/decimal.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;decimal.js&lt;/a&gt;, &lt;a href=&quot;https://mikemcl.github.io/big.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;big.js&lt;/a&gt; or &lt;a href=&quot;https://mikemcl.github.io/bignumber.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;bignumber.js&lt;/a&gt; can be used to avoid floating-point manipulation problems in Javascript:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;                                &lt;span class=&quot;hljs-comment&quot;&gt;// 0.020000000000000004&lt;/span&gt;\nx = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Decimal&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)\ny = x.&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)                          &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;0.2&apos;&lt;/span&gt;\nx.&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)                  &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;big.js: minimalist; easy-to-use; precision specified in decimal places; precision applied to division only.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;bignumber.js: bases 2-64; configuration options; NaN; Infinity; precision specified in decimal places; precision applied to division only; base prefixes.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;decimal.js: bases 2-64; configuration options; NaN; Infinity; non-integer powers, exp, ln, log; precision specified in significant digits; precision always applied; random numbers.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/big.js/issues/45#issuecomment-104211175&quot; rel=&quot;nofollow noreferrer&quot;&gt;link to detailed comparisons&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The result you&apos;ve got is correct and fairly consistent across floating point implementations in different languages, processors and operating systems - the only thing that changes is the level of the inaccuracy when the float is actually a double (or higher).&lt;/p&gt;\n\n&lt;p&gt;0.1 in binary floating points is like 1/3 in decimal (i.e. 0.3333333333333... forever), there&apos;s just no accurate way to handle it. &lt;/p&gt;\n\n&lt;p&gt;If you&apos;re dealing with floats &lt;em&gt;always&lt;/em&gt; expect small rounding errors, so you&apos;ll also always have to round the displayed result to something sensible. In return you get very very fast and powerful arithmetic because all the computations are in the native binary of the processor.&lt;/p&gt;\n\n&lt;p&gt;Most of the time the solution is not to switch to fixed-point arithmetic, mainly because it&apos;s much slower and 99% of the time you just don&apos;t need the accuracy. If you&apos;re dealing with stuff that does need that level of accuracy (for instance financial transactions) Javascript probably isn&apos;t the best tool to use anyway (as you&apos;ve want to enforce the fixed-point types a static language is probably better).&lt;/p&gt;\n\n&lt;p&gt;You&apos;re looking for the elegant solution then I&apos;m afraid this is it: floats are quick but have small rounding errors - always round to something sensible when displaying their results.&lt;/p&gt;\n    ","\n&lt;p&gt;0.6 * 3 it&apos;s awesome!))\nFor me this works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; num &lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( num * p ) / p;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Very very simple))&lt;/p&gt;\n    ","\n&lt;p&gt;To avoid this you should work with integer values instead of floating points. So when you want to have 2 positions precision work with the values * 100, for 3 positions use 1000. When displaying you use a formatter to put in the separator.&lt;/p&gt;\n\n&lt;p&gt;Many systems omit working with decimals this way. That is the reason why many systems work with cents (as integer) instead of dollars/euro&apos;s (as floating point).&lt;/p&gt;\n    ","\n&lt;p&gt;not elegant but does the job (removes trailing zeros)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(num.&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))); &lt;span class=&quot;hljs-comment&quot;&gt;// shows 0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Floating point can&apos;t store all decimal values exactly. So when using floating point formats there will always be rounding errors on the input values.\nThe errors on the inputs of course results on errors on the output.\nIn case of a discrete function or operator there can be big differences on the output around the point where the function or operator is discrete.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Input and output for floating point values&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So, when using floating point variables, you should always be aware of this. And whatever output you want from a calculation with floating points should always be formatted/conditioned before displaying with this in mind.&lt;br&gt;\nWhen only continuous functions and operators are used, rounding to the desired precision often will do (don&apos;t truncate).  Standard formatting features used to convert floats to string will usually do this for you.&lt;br&gt;\nBecause the rounding adds an error which can cause the total error to be more then half of the desired precision, the output should be corrected based on expected precision of inputs and desired precision of output. You should&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Round inputs to the expected precision or make sure no values can be entered with higher precision.&lt;/li&gt;\n&lt;li&gt;Add a small value to the outputs before rounding/formatting them which is smaller than or equal to 1/4 of the desired precision and bigger than the maximum expected error caused by rounding errors on input and during calculation. If that is not possible the combination of the precision of the used data type isn&apos;t enough to deliver the desired output precision for your calculation.  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These 2 things are usually not done and in most cases the differences caused by not doing them are too small to be important for most users, but I already had a project where output wasn&apos;t accepted by the users without those corrections.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Discrete functions or operators (like modula)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When discrete operators or functions are involved, extra corrections might be required to make sure the output is as expected. Rounding and adding small corrections before rounding can&apos;t solve the problem.&lt;br&gt;\nA special check/correction on intermediate calculation results, immediately after applying the discrete function or operator might be required.\nFor a specific case (modula operator), see my answer on question: &lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;Why does modulus operator return fractional number in javascript?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Better avoid having the problem&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is often more efficient to avoid these problems by using data types (integer or fixed point formats) for calculations like this which can store the expected input without rounding errors.\nAn example of that is that you should never use floating point values for financial calculations.&lt;/p&gt;\n    ","\n&lt;h2&gt;Elegant, Predictable, and  Reusable&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s deal with the problem in an elegant way reusable way. The following seven lines will let you access the floating point precision you desire on any number simply by appending &lt;code&gt;.decimal&lt;/code&gt; to the end of the number, formula, or built in &lt;code&gt;Math&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// First extend the native Number object to handle precision. This populates&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the functionality to all math operations.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;decimal&quot;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decimal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;precision&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; ? &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; * f ) / f;\n  }\n});\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now lets see how it works by adjusting our global precision level and &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// checking our results.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;1/3 + 1/3 + 1/3 = 1&apos; Right?&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.333 - A raw 4 digit decimal, trimmed to 3...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 3&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.001&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 1&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cheers!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Solved it by first making both numbers integers, executing the expression and afterwards dividing the result to get the decimal places back:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;evalMathematicalExpression&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, op&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; smallest = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a &amp;lt; b ? a : b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; factor = smallest.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - smallest.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; factor; i++) {\n        b *= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n        a *= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n    }\n\n    a = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(a);\n    b = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; m = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; ** factor;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (op) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a + b) / m;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a - b) / m;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a * b) / (m ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a / b;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`Unknown operator &lt;span class=&quot;hljs-subst&quot;&gt;${op}&lt;/span&gt;`&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results for several operations (the excluded numbers are results from &lt;code&gt;eval&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;   = &lt;span class=&quot;hljs-number&quot;&gt;0.102&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.10200000000000001&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;     = &lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;     = -&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; (-&lt;span class=&quot;hljs-number&quot;&gt;0.19999999999999998&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; - -&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;    = &lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.0003&lt;/span&gt;  = &lt;span class=&quot;hljs-number&quot;&gt;0.00009&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.00008999999999999999&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;      = &lt;span class=&quot;hljs-number&quot;&gt;2500&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2500&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;    = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;30.000000000000004&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;      = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Have a look at &lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fixed-point arithmetic&lt;/a&gt;. It will probably solve your problem, if the range of numbers you want to operate on is small (eg, currency). I would round it off to a few decimal values, which is the simplest solution. &lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t represent most decimal fractions exactly with binary floating point types (which is what ECMAScript uses to represent floating point values). So there isn&apos;t an elegant solution unless you use arbitrary precision arithmetic types or a decimal based floating point type. For example, &lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;the Calculator app that ships with Windows now uses arbitrary precision arithmetic to solve this problem&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Avoid dealing with floating points during the operation using Integers&lt;/h2&gt;\n\n&lt;p&gt;As stated on the most voted answer until now, you can &lt;strong&gt;work with integers&lt;/strong&gt;, that would mean to multiply all your factors by 10 for each decimal you are working with, and divide the result by the same number used.&lt;/p&gt;\n\n&lt;p&gt;For example, if you are working with 2 decimals, you multiply all your factors by 100 before doing the operation, and then divide the result by 100.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example, Result1 is the usual result, Result2 uses the solution:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1110.7&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2220.2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result1&lt;/span&gt;=&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;)+&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result2&lt;/span&gt;=((&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)+(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result3&lt;/span&gt;=(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;))+&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;))).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result1: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result1&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;Result2: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result2&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;Result3: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result3&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The third result is to show what happens when using parseFloat instead, which created a conflict in our case.&lt;/p&gt;\n    ","\n&lt;p&gt;From my point of view, the idea here is to round the fp number in order to have a nice/short default string representation.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The 53-bit significand precision gives from 15 to 17 significant decimal digits precision (253  1.11 × 1016).\n  If a decimal string with at most 15 significant digits is converted to IEEE 754 double-precision representation,\n  and then converted back to a decimal string with the same number of digits, the final result should match the original string.\n  If an IEEE 754 double-precision number is converted to a decimal string with at least 17 significant digits,\n  and then converted back to double-precision representation, the final result must match the original number.&lt;br&gt;\n  ...&lt;br&gt;\n  With the 52 bits of the fraction (F) significand appearing in the memory format, the total precision is therefore 53 bits (approximately 16 decimal digits, 53 log10(2)  15.955). The bits are laid out as follows ... &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-precision_floating-point_format#cite_note-whyieee-1&quot; rel=&quot;nofollow noreferrer&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) -&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.1000000000000000055511151231257827021181583404541015625000000000000000000000000000000000000000000000&lt;/span&gt;\n\n(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) -&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.3000000000000000444089209850062616169452667236328125000000000000000000000000000000000000000000000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, as far as I understand, we can round the value up to 15 digits to keep a nice string representation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log10&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// 1e15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;eg.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt; ) / &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt; ) / &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.2999999999999999888977697537484345957636833190917968750000000000000000000000000000000000000000000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;roundNumberToHaveANiceDefaultStringRepresentation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; integerDigits = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log10&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;abs&lt;/span&gt;(num))+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; mult = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;-integerDigits); &lt;span class=&quot;hljs-comment&quot;&gt;// also consider integer digits&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(num * mult) / mult;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You are right, the reason for that is limited precision of floating point numbers. Store your rational numbers as a division of two integer numbers and in most situations you&apos;ll be able to store numbers without any precision loss. When it comes to printing, you may want to display the result as fraction. With representation I proposed, it becomes trivial.&lt;/p&gt;\n\n&lt;p&gt;Of course that won&apos;t help much with irrational numbers. But you may want to optimize your computations in the way they will cause the least problem (e.g. detecting situations like &lt;code&gt;sqrt(3)^2)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I had a nasty rounding error problem with mod 3. Sometimes when I should get 0 I would get .000...01. That&apos;s easy enough to handle, just test for &amp;lt;= .01. But then sometimes I would get 2.99999999999998. OUCH!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot; rel=&quot;nofollow&quot;&gt;BigNumbers&lt;/a&gt; solved the problem, but introduced another, somewhat ironic, problem. When trying to load 8.5 into BigNumbers I was informed that it was really 8.4999 and had more than 15 significant digits. This meant BigNumbers could not accept it (I believe I mentioned this problem was somewhat ironic).&lt;/p&gt;\n\n&lt;p&gt;Simple solution to ironic problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;x = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(x*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// I only need 2 decimal places, if i needed 3 I would use 1,000, etc.&lt;/span&gt;\nx = x / &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\nxB = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(x);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/gWE8D.png&quot; alt=&quot;enter image description here&quot;&gt;    &lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    You can use library https://github.com/MikeMcl/decimal.js/. \n    it will   help  lot to give proper solution. \n    javascript console output 95 *722228.630 /100 = 686117.1984999999\n    decimal library implementation \n    var firstNumber = new Decimal(95);\n    var secondNumber = new Decimal(722228.630);\n    var thirdNumber = new Decimal(100);\n    var partialOutput = firstNumber.times(secondNumber);\n    console.log(partialOutput);\n    var output = new Decimal(partialOutput).div(thirdNumber);\n    alert(output.valueOf());\n    console.log(output.valueOf())== 686117.1985\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try my chiliadic arithmetic library, which you can see &lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.\nIf you want a later version, I can get you one.&lt;/p&gt;\n    ","\n&lt;p&gt;Use Number(1.234443).toFixed(2); it will print 1.23&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(x).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":216,"title":"How to deal with floating point number precision in JavaScript?","content":"\n                \n&lt;p&gt;I have the following dummy test script:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(x);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This will print the result &lt;code&gt;0.020000000000000004&lt;/code&gt; while it should just print &lt;code&gt;0.02&lt;/code&gt; (if you use your calculator). As far as I understood this is due to errors in the floating point multiplication precision.&lt;/p&gt;\n\n&lt;p&gt;Does anyone have a good solution so that in such case I get the correct result &lt;code&gt;0.02&lt;/code&gt;? I know there are functions like &lt;code&gt;toFixed&lt;/code&gt; or rounding would be another possibility, but I&apos;d like to really have the whole number printed without any cutting and rounding. Just wanted to know if one of you has some nice, elegant solution.&lt;/p&gt;\n\n&lt;p&gt;Of course, otherwise I&apos;ll round to some 10 digits or so.&lt;/p&gt;\n    ","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762","postType":"QUESTION","createdAt":"2022-07-09T17:21:33.000Z","updatedAt":"2022-07-09T17:21:33.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"PHP code is not being executed, but the code shows in the browser source code","slug":"php-code-is-not-being-executed-but-the-code-shows-in-the-browser-source-code-1657384553581"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"How do you use a variable in a regular expression?","slug":"how-do-you-use-a-variable-in-a-regular-expression-1657387939007"},{"title":"Why is processing a sorted array faster than processing an unsorted array?","slug":"why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array-1657385497444"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"How to lazy load images in ListView in Android","slug":"how-to-lazy-load-images-in-listview-in-android-1657387332835"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706"},{"title":"How to use ThreeTenABP in Android Project","slug":"how-to-use-threetenabp-in-android-project-1657384345704"},{"title":"The 3 different equals","slug":"the-3-different-equals-1657385490242"},{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"Get the values from the \"GET\" parameters (JavaScript) [duplicate]","slug":"get-the-values-from-the-\"get\"-parameters-(javascript)-duplicate-1657387656693"},{"title":"JavaScript closure inside loops – simple practical example","slug":"javascript-closure-inside-loops-simple-practical-example-1657384278449"},{"title":"\"Thinking in AngularJS\" if I have a jQuery background? [closed]","slug":"\"thinking-in-angularjs\"-if-i-have-a-jquery-background-closed-1657384761159"}]},"__N_SSG":true}