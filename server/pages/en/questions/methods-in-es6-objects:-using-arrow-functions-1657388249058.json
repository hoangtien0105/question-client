{"pageProps":{"data":{"answer":["\n&lt;p&gt;Arrow functions are not designed to be used in every situation merely as a shorter version of old-fashioned functions. They are not intended to replace function syntax using the &lt;code&gt;function&lt;/code&gt; keyword. The most common use case for arrow functions is as short &quot;lambdas&quot; which do not redefine &lt;code&gt;this&lt;/code&gt;, often used when passing a function as a callback to some function.&lt;/p&gt;\n\n&lt;p&gt;Arrow functions cannot be used to write object methods because, as you have found, since arrow functions close over the &lt;code&gt;this&lt;/code&gt; of the lexically enclosing context, the &lt;code&gt;this&lt;/code&gt; within the arrow is the one that was current where you defined the object. Which is to say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Whatever `this` is here...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// ...is what `this` is here.&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your case, wanting to write a method on an object, you should simply use traditional &lt;code&gt;function&lt;/code&gt; syntax, or the method syntax introduced in ES6:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(There are small differences between them, but they&apos;re only important if you use &lt;code&gt;super&lt;/code&gt; in &lt;code&gt;getOwner&lt;/code&gt;, which you aren&apos;t, or if you copy &lt;code&gt;getOwner&lt;/code&gt; to another object.)&lt;/p&gt;\n\n&lt;p&gt;There was some debate on the es6 mailing list about a twist on arrow functions which have similar syntax but with their own &lt;code&gt;this&lt;/code&gt;. However, this proposal was poorly received because that is mere syntax sugar, allowing people to save typing a few characters, and provides no new functionality over existing function syntax. See the topic &lt;a href=&quot;https://esdiscuss.org/topic/unbound-arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;unbound arrow functions&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In this line &lt;code&gt;getOwner: () =&amp;gt; this.owner&lt;/code&gt; should be:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n}; &lt;span class=&quot;hljs-comment&quot;&gt;//here `this` refers to `window` object.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You would have to declare &lt;code&gt;this&lt;/code&gt; into a function:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Or:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopperFn = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setOwner&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; = name;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,{\n        &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jhon&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;,\n    })\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chopperFn&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());\nchopper.&lt;span class=&quot;hljs-title function_&quot;&gt;setOwner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Spiderman&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have to use arrow function, you can change &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;chopper&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; chopper.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although this is not best practice, when you change the object name, you have to change this arrow function. &lt;/p&gt;\n    ","\n&lt;p&gt;A quick tip that I follow to use arrow functions.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use non-arrow functions for methods that will be using &lt;code&gt;object.method()&lt;/code&gt; syntax. (Those are functions that will receive meaningful &lt;code&gt;this&lt;/code&gt; value from their caller.)&lt;/li&gt;\n&lt;li&gt;Use arrow function for almost everything else.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Another tip, in strict mode, &lt;code&gt;this&lt;/code&gt; still refers to Window instead of undefined.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// window&lt;/span&gt;\n  })();\n\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n  })();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This inside arrow function doesn&apos;t reflect context of the object. Instead it gives the context where the object method is called.&lt;/p&gt;\n\n&lt;p&gt;Check this, This gives some insight about when to use arrow and when not.\n&lt;a href=&quot;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&lt;/a&gt;&lt;/p&gt;\n    "],"id":515,"title":"Methods in ES6 objects: using arrow functions","content":"\n                \n&lt;p&gt;In ES6, both of these are legal:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and, as shorthand:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is it possible to use the new arrow functions as well? In trying something like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I get an error message suggesting that the method does not have access to &lt;code&gt;this&lt;/code&gt;. Is this just a syntax issue, or can you not use fat-arrow methods inside of ES6 objects?&lt;/p&gt;\n    ","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058","postType":"QUESTION","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","tags":[{"id":2553,"name":"ecmascript-harmony","slug":"ecmascript-harmony","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","Questions_Tags":{"questionId":515,"tagId":2553}}],"relatedQuestions":[{"title":"Methods in ES6 objects: using arrow functions","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058","tags":[{"name":"ecmascript-harmony","Questions_Tags":{"questionId":515,"tagId":2553}}]}]},"randomQuestions":[{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"How can I sanitize user input with PHP?","slug":"how-can-i-sanitize-user-input-with-php-1657387892329"},{"title":"Learning Regular Expressions [closed]","slug":"learning-regular-expressions-closed-1657384719460"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"How do you remove duplicates from a list whilst preserving order?","slug":"how-do-you-remove-duplicates-from-a-list-whilst-preserving-order-1657387877978"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"Why is the command bound to a Button or event executed when declared?","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"Accessing nested JavaScript objects and arrays by string path","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754"},{"title":"What is the best algorithm for overriding GetHashCode?","slug":"what-is-the-best-algorithm-for-overriding-gethashcode-1657387848932"},{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"Does JavaScript guarantee object property order?","slug":"does-javascript-guarantee-object-property-order-1657384822587"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"Calling a function of a module by using its name (a string)","slug":"calling-a-function-of-a-module-by-using-its-name-(a-string)-1657388565656"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"How do you use a variable in a regular expression?","slug":"how-do-you-use-a-variable-in-a-regular-expression-1657387939007"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"}]},"__N_SSG":true}