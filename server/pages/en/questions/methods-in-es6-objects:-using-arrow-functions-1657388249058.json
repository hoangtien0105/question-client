{"pageProps":{"data":{"answer":["\n&lt;p&gt;Arrow functions are not designed to be used in every situation merely as a shorter version of old-fashioned functions. They are not intended to replace function syntax using the &lt;code&gt;function&lt;/code&gt; keyword. The most common use case for arrow functions is as short &quot;lambdas&quot; which do not redefine &lt;code&gt;this&lt;/code&gt;, often used when passing a function as a callback to some function.&lt;/p&gt;\n\n&lt;p&gt;Arrow functions cannot be used to write object methods because, as you have found, since arrow functions close over the &lt;code&gt;this&lt;/code&gt; of the lexically enclosing context, the &lt;code&gt;this&lt;/code&gt; within the arrow is the one that was current where you defined the object. Which is to say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Whatever `this` is here...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// ...is what `this` is here.&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your case, wanting to write a method on an object, you should simply use traditional &lt;code&gt;function&lt;/code&gt; syntax, or the method syntax introduced in ES6:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(There are small differences between them, but they&apos;re only important if you use &lt;code&gt;super&lt;/code&gt; in &lt;code&gt;getOwner&lt;/code&gt;, which you aren&apos;t, or if you copy &lt;code&gt;getOwner&lt;/code&gt; to another object.)&lt;/p&gt;\n\n&lt;p&gt;There was some debate on the es6 mailing list about a twist on arrow functions which have similar syntax but with their own &lt;code&gt;this&lt;/code&gt;. However, this proposal was poorly received because that is mere syntax sugar, allowing people to save typing a few characters, and provides no new functionality over existing function syntax. See the topic &lt;a href=&quot;https://esdiscuss.org/topic/unbound-arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;unbound arrow functions&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In this line &lt;code&gt;getOwner: () =&amp;gt; this.owner&lt;/code&gt; should be:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n}; &lt;span class=&quot;hljs-comment&quot;&gt;//here `this` refers to `window` object.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You would have to declare &lt;code&gt;this&lt;/code&gt; into a function:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Or:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopperFn = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setOwner&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; = name;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,{\n        &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jhon&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;,\n    })\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chopperFn&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());\nchopper.&lt;span class=&quot;hljs-title function_&quot;&gt;setOwner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Spiderman&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have to use arrow function, you can change &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;chopper&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; chopper.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although this is not best practice, when you change the object name, you have to change this arrow function. &lt;/p&gt;\n    ","\n&lt;p&gt;A quick tip that I follow to use arrow functions.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use non-arrow functions for methods that will be using &lt;code&gt;object.method()&lt;/code&gt; syntax. (Those are functions that will receive meaningful &lt;code&gt;this&lt;/code&gt; value from their caller.)&lt;/li&gt;\n&lt;li&gt;Use arrow function for almost everything else.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Another tip, in strict mode, &lt;code&gt;this&lt;/code&gt; still refers to Window instead of undefined.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// window&lt;/span&gt;\n  })();\n\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n  })();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This inside arrow function doesn&apos;t reflect context of the object. Instead it gives the context where the object method is called.&lt;/p&gt;\n\n&lt;p&gt;Check this, This gives some insight about when to use arrow and when not.\n&lt;a href=&quot;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&lt;/a&gt;&lt;/p&gt;\n    "],"id":515,"title":"Methods in ES6 objects: using arrow functions","content":"\n                \n&lt;p&gt;In ES6, both of these are legal:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and, as shorthand:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is it possible to use the new arrow functions as well? In trying something like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I get an error message suggesting that the method does not have access to &lt;code&gt;this&lt;/code&gt;. Is this just a syntax issue, or can you not use fat-arrow methods inside of ES6 objects?&lt;/p&gt;\n    ","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058","postType":"QUESTION","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","tags":[{"id":2553,"name":"ecmascript-harmony","slug":"ecmascript-harmony","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","Questions_Tags":{"questionId":515,"tagId":2553}}],"relatedQuestions":[{"title":"Methods in ES6 objects: using arrow functions","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058","tags":[{"name":"ecmascript-harmony","Questions_Tags":{"questionId":515,"tagId":2553}}]}]},"randomQuestions":[{"title":"How to reshape data from long to wide format","slug":"how-to-reshape-data-from-long-to-wide-format-1657384486421"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570"},{"title":"How do I set, clear, and toggle a single bit?","slug":"how-do-i-set-clear-and-toggle-a-single-bit-1657388227052"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"When to use single quotes, double quotes, and backticks in MySQL","slug":"when-to-use-single-quotes-double-quotes-and-backticks-in-mysql-1657384337981"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793"},{"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588"},{"title":"What is DOM Event delegation?","slug":"what-is-dom-event-delegation-1657387625599"},{"title":"How can I find the time complexity of an algorithm?","slug":"how-can-i-find-the-time-complexity-of-an-algorithm-1657388486001"},{"title":"Do I cast the result of malloc?","slug":"do-i-cast-the-result-of-malloc-1657384271583"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Why is using the JavaScript eval function a bad idea?","slug":"why-is-using-the-javascript-eval-function-a-bad-idea-1657387485165"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"Sorting an array of objects by property values","slug":"sorting-an-array-of-objects-by-property-values-1657387447490"},{"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282"}]},"__N_SSG":true}