{"pageProps":{"data":{"answer":["\n&lt;h1&gt;What is sh?&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; (or the Shell Command Language) is a programming language described by the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX standard&lt;/a&gt;. It has many implementations (&lt;code&gt;ksh88&lt;/code&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell#dash:_Ubuntu,_Debian_and_POSIX_compliance_of_Linux_distributions&quot; rel=&quot;noreferrer&quot;&gt;Dash&lt;/a&gt;, ...). Bash can also be considered an implementation of &lt;code&gt;sh&lt;/code&gt; (see below).&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;sh&lt;/code&gt; is a specification, not an implementation, &lt;code&gt;/bin/sh&lt;/code&gt; is a symlink (or a hard link) to an actual implementation on most POSIX systems.&lt;/p&gt;\n&lt;h1&gt;What is Bash?&lt;/h1&gt;\n&lt;p&gt;Bash started as an &lt;code&gt;sh&lt;/code&gt;-compatible implementation (although it predates the POSIX standard by a few years), but as time passed it has acquired many extensions. Many of these extensions may change the behavior of valid POSIX shell scripts, so by itself Bash is not a valid POSIX shell. Rather, it is a dialect of the POSIX shell language.&lt;/p&gt;\n&lt;p&gt;Bash supports a &lt;code&gt;--posix&lt;/code&gt; switch, which makes it more POSIX-compliant. It also tries to mimic POSIX if invoked as &lt;code&gt;sh&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;sh = bash?&lt;/h1&gt;\n&lt;p&gt;For a long time, &lt;code&gt;/bin/sh&lt;/code&gt; used to point to &lt;code&gt;/bin/bash&lt;/code&gt; on most GNU/Linux systems. As a result, it had almost become safe to ignore the difference between the two. But that started to change recently.&lt;/p&gt;\n&lt;p&gt;Some popular examples of systems where &lt;code&gt;/bin/sh&lt;/code&gt; does not point to &lt;code&gt;/bin/bash&lt;/code&gt; (and on some of which &lt;code&gt;/bin/bash&lt;/code&gt; may not even exist) are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Modern Debian and Ubuntu systems, which symlink &lt;code&gt;sh&lt;/code&gt; to &lt;code&gt;dash&lt;/code&gt; by default;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BusyBox&quot; rel=&quot;noreferrer&quot;&gt;Busybox&lt;/a&gt;, which is usually run during the Linux system boot time as part of &lt;code&gt;initramfs&lt;/code&gt;. It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; rel=&quot;noreferrer&quot;&gt;ash&lt;/a&gt; shell implementation.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&quot; rel=&quot;noreferrer&quot;&gt;BSD&lt;/a&gt; systems, and in general any non-Linux systems. &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenBSD&quot; rel=&quot;noreferrer&quot;&gt;OpenBSD&lt;/a&gt; uses &lt;code&gt;pdksh&lt;/code&gt;, a descendant of the &lt;a href=&quot;https://en.wikipedia.org/wiki/KornShell&quot; rel=&quot;noreferrer&quot;&gt;KornShell&lt;/a&gt;. FreeBSD&apos;s &lt;code&gt;sh&lt;/code&gt; is a descendant of the original Unix Bourne shell.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Solaris_%28operating_system%29&quot; rel=&quot;noreferrer&quot;&gt;Solaris&lt;/a&gt; has its own &lt;code&gt;sh&lt;/code&gt; which for a long time was not POSIX-compliant; a free implementation is available from the &lt;a href=&quot;http://heirloom.sourceforge.net/sh.html&quot; rel=&quot;noreferrer&quot;&gt;Heirloom project&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;How can you find out what &lt;code&gt;/bin/sh&lt;/code&gt; points to on your system?&lt;/p&gt;\n&lt;p&gt;The complication is that &lt;code&gt;/bin/sh&lt;/code&gt; could be a symbolic link or a hard link. If it&apos;s a symbolic link, a &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/file.html&quot; rel=&quot;noreferrer&quot;&gt;portable&lt;/a&gt; way to resolve it is:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% file -h /bin/sh\n/bin/sh: symbolic &lt;span class=&quot;hljs-built_in&quot;&gt;link&lt;/span&gt; to bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If it&apos;s a hard link, try&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% find -L /bin -samefile /bin/sh\n/bin/sh\n/bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In fact, the &lt;code&gt;-L&lt;/code&gt; flag covers both symlinks and hardlinks,\nbut the disadvantage of this method is that it is not portable \nPOSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html&quot; rel=&quot;noreferrer&quot;&gt;does not require&lt;/a&gt; &lt;code&gt;find&lt;/code&gt; to support the &lt;code&gt;-samefile&lt;/code&gt; option, although both &lt;a href=&quot;https://www.gnu.org/software/findutils/manual/html_mono/find.html#Hard-Links&quot; rel=&quot;noreferrer&quot;&gt;GNU find&lt;/a&gt; and &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?find(1)&quot; rel=&quot;noreferrer&quot;&gt;FreeBSD find&lt;/a&gt; support it.&lt;/p&gt;\n&lt;h1&gt;Shebang line&lt;/h1&gt;\n&lt;p&gt;Ultimately, it&apos;s up to you to decide which one to use, by writing the «shebang» line as the very first line of the script.&lt;/p&gt;\n&lt;p&gt;E.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/sh&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will use &lt;code&gt;sh&lt;/code&gt; (and whatever that happens to point to),&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will use &lt;code&gt;/bin/bash&lt;/code&gt; if it&apos;s available (and fail with an error message if it&apos;s not). Of course, you can also specify another implementation, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/dash&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Which one to use&lt;/h1&gt;\n&lt;p&gt;For my own scripts, I prefer &lt;code&gt;sh&lt;/code&gt; for the following reasons:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;it is standardized&lt;/li&gt;\n&lt;li&gt;it is much simpler and easier to learn&lt;/li&gt;\n&lt;li&gt;it is portable across POSIX systems  even if they happen not to have &lt;code&gt;bash&lt;/code&gt;, they are required to have &lt;code&gt;sh&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;There are advantages to using &lt;code&gt;bash&lt;/code&gt; as well. Its features make programming more convenient and similar to programming in other modern programming languages. These include things like scoped local variables and arrays. Plain &lt;code&gt;sh&lt;/code&gt; is a very minimalistic programming language.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt;: &lt;a href=&quot;http://man.cx/sh&quot; rel=&quot;noreferrer&quot;&gt;http://man.cx/sh&lt;/a&gt; &lt;br&gt;\nBash: &lt;a href=&quot;http://man.cx/bash&quot; rel=&quot;noreferrer&quot;&gt;http://man.cx/bash&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Bash is a superset of &lt;code&gt;sh&lt;/code&gt; with a more elegant syntax and more functionality. It is safe to use a Bash &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; rel=&quot;noreferrer&quot;&gt;shebang&lt;/a&gt; line in almost all cases as it&apos;s quite ubiquitous on modern platforms.&lt;/p&gt;\n&lt;p&gt;NB: in some environments, &lt;code&gt;sh&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; Bash. Check &lt;code&gt;sh --version&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This question has frequently been nominated as a canonical for people who try to use &lt;code&gt;sh&lt;/code&gt; and are surprised that it&apos;s not behaving the same as &lt;code&gt;bash&lt;/code&gt;.  Here&apos;s a quick rundown of common misunderstandings and pitfalls.&lt;/p&gt;\n&lt;p&gt;First off, you should understand what to expect.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you run your script with &lt;code&gt;sh scriptname&lt;/code&gt;, or run it with &lt;code&gt;scriptname&lt;/code&gt; and have &lt;code&gt;#!/bin/sh&lt;/code&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; rel=&quot;nofollow noreferrer&quot;&gt;shebang&lt;/a&gt; line, you should expect POSIX &lt;code&gt;sh&lt;/code&gt; behavior.&lt;/li&gt;\n&lt;li&gt;If you run your script with &lt;code&gt;bash scriptname&lt;/code&gt;, or run it with &lt;code&gt;scriptname&lt;/code&gt; and have &lt;code&gt;#!/bin/bash&lt;/code&gt; (or the local equivalent) in the shebang line, you should expect Bash behavior.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Having a correct shebang and running the script by typing just the script name (possibly with a &lt;a href=&quot;/questions/31435921/difference-between-and/55342466#55342466&quot;&gt;relative or full path&lt;/a&gt;) is generally the preferred solution.  In addition to a correct shebang, this requires the script file to have execute permission (&lt;code&gt;chmod a+x scriptname&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;So, how do they actually differ?&lt;/p&gt;\n&lt;p&gt;Bash aims to be backwards-compatible with the Bourne shell and POSIX, but has many additional features. The Bash Reference manual has a &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Major-Differences-From-The-Bourne-Shell.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;section which attempts to enumerate the differences&lt;/a&gt; but some common sources of confusion include&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[[&lt;/code&gt; is not available in &lt;code&gt;sh&lt;/code&gt; (only &lt;code&gt;[&lt;/code&gt; which is more clunky and limited). See also &lt;a href=&quot;https://stackoverflow.com/questions/13542832/difference-between-single-and-double-square-brackets-in-bash&quot;&gt;Difference between single and double square brackets in Bash&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;sh&lt;/code&gt; does not have arrays.&lt;/li&gt;\n&lt;li&gt;Some Bash keywords like &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;shopt&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;declare&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; are not portable to &lt;code&gt;sh&lt;/code&gt;. (Some &lt;code&gt;sh&lt;/code&gt; implementations support e.g. &lt;code&gt;local&lt;/code&gt;.)&lt;/li&gt;\n&lt;li&gt;Bash has many C-style syntax extensions like the three-argument &lt;code&gt;for((i=0;i&amp;lt;=3;i++))&lt;/code&gt; loop, &lt;code&gt;+=&lt;/code&gt; increment assignment, etc. The &lt;code&gt;$&apos;string\\nwith\\tC\\aescapes&apos;&lt;/code&gt; feature is tentatively &lt;a href=&quot;http://austingroupbugs.net/view.php?id=249&quot; rel=&quot;nofollow noreferrer&quot;&gt;accepted for POSIX&lt;/a&gt; (meaning it works in Bash now, but will not yet be supported by &lt;code&gt;sh&lt;/code&gt; on systems which only adhere to the current POSIX specification, and likely will not for some time to come).&lt;/li&gt;\n&lt;li&gt;Bash supports &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&apos;here strings&apos;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Bash has &lt;code&gt;*.{png,jpg}&lt;/code&gt; and &lt;code&gt;{0..12}&lt;/code&gt; brace expansion.&lt;/li&gt;\n&lt;li&gt;Bash has extended globbing facilities like &lt;code&gt;**&lt;/code&gt; (&lt;code&gt;globstar&lt;/code&gt;) for recursing subdirectories, and &lt;code&gt;extglob&lt;/code&gt; for using a different, &lt;a href=&quot;https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching&quot; rel=&quot;nofollow noreferrer&quot;&gt;more versatile wildcard syntax.&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;del&gt;&lt;code&gt;~&lt;/code&gt; refers to &lt;code&gt;$HOME&lt;/code&gt; only in Bash (and more generally &lt;code&gt;~username&lt;/code&gt; to the home directory of &lt;code&gt;username&lt;/code&gt;).&lt;/del&gt;This is in POSIX, but may be missing from some pre-POSIX &lt;code&gt;/bin/sh&lt;/code&gt; implementations.&lt;/li&gt;\n&lt;li&gt;Bash has process substitution with &lt;code&gt;&amp;lt;(cmd)&lt;/code&gt; and &lt;code&gt;&amp;gt;(cmd)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Bash has Csh-style convenience redirection aliases like &lt;code&gt;&amp;amp;|&lt;/code&gt; for &lt;code&gt;2&amp;gt;&amp;amp;1 |&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; for &lt;code&gt;&amp;gt; ... 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Bash supports coprocesses with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; redirection.&lt;/li&gt;\n&lt;li&gt;Bash features a rich set of expanded non-standard parameter expansions such as &lt;code&gt;${substring:1:2}&lt;/code&gt;, &lt;code&gt;${variable/pattern/replacement}&lt;/code&gt;, case conversion, etc.&lt;/li&gt;\n&lt;li&gt;Bash has significantly extended facilities for shell arithmetic (though still no floating-point support). There is an obsolescent legacy &lt;code&gt;$[expression]&lt;/code&gt; syntax which however should be replaced with POSIX arithmetic &lt;code&gt;$((expression))&lt;/code&gt; syntax. (Some legacy pre-POSIX &lt;code&gt;sh&lt;/code&gt; implementations may not support that, though.)&lt;/li&gt;\n&lt;li&gt;Several built-in commands have options which are not portable, like &lt;code&gt;type -a&lt;/code&gt;, &lt;code&gt;printf -v&lt;/code&gt;, and the perennial &lt;code&gt;echo -e&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Magic variables like &lt;code&gt;$RANDOM&lt;/code&gt;, &lt;code&gt;$SECONDS&lt;/code&gt;, &lt;code&gt;$PIPESTATUS[@]&lt;/code&gt; and &lt;code&gt;$FUNCNAME&lt;/code&gt; are Bash extensions.&lt;/li&gt;\n&lt;li&gt;Bash exposes some system facilities as file handles, like &lt;code&gt;/dev/stdin&lt;/code&gt;, &lt;code&gt;/dev/fd/&amp;lt;number&amp;gt;&lt;/code&gt;, &lt;code&gt;/dev/tcp/&amp;lt;network address&amp;gt;&lt;/code&gt;, etc&lt;/li&gt;\n&lt;li&gt;Syntactic differences like &lt;del&gt;&lt;code&gt;export variable=value&lt;/code&gt; and&lt;/del&gt; &lt;code&gt;[ &quot;x&quot; == &quot;y&quot; ]&lt;/code&gt; which are not portable (&lt;del&gt;&lt;code&gt;export variable&lt;/code&gt; should be separate from variable assignment, and&lt;/del&gt; portable string comparison in &lt;code&gt;[ ... ]&lt;/code&gt; uses a single equals sign).&lt;/li&gt;\n&lt;li&gt;Many, many Bash-only extensions to enable or disable optional behavior and expose internal state of the shell.&lt;/li&gt;\n&lt;li&gt;Many, many convenience features for interactive use which however do not affect script behavior.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Remember, this is an abridged listing.  Refer to the reference manual for the full scoop, and &lt;a href=&quot;http://mywiki.wooledge.org/Bashism&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://mywiki.wooledge.org/Bashism&lt;/a&gt; for many good workarounds; and/or try &lt;a href=&quot;http://shellcheck.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://shellcheck.net/&lt;/a&gt; which warns for many Bash-only features.&lt;/p&gt;\n&lt;p&gt;A common error is to have a &lt;code&gt;#!/bin/bash&lt;/code&gt; shebang line, but then nevertheless using &lt;code&gt;sh scriptname&lt;/code&gt; to actually run the script. This basically disables any Bash-only functionality, so you get syntax errors e.g. for trying to use arrays. (The shebang line is syntactically a comment, so it is simply ignored in this scenario.)&lt;/p&gt;\n&lt;p&gt;Unfortunately, Bash will not warn when you try to use these constructs when it is invoked as &lt;code&gt;sh&lt;/code&gt;. It doesn&apos;t completely disable &lt;em&gt;all&lt;/em&gt; Bash-only functionality, either, so running Bash by invoking it as &lt;code&gt;sh&lt;/code&gt; is not a good way to check if your script is properly portable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ash&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell#dash:_Ubuntu,_Debian_and_POSIX_compliance_of_Linux_distributions&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/a&gt;/POSIX &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sh.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sh&lt;/code&gt;&lt;/a&gt; or variants like &lt;a href=&quot;http://heirloom.sourceforge.net/sh.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Heirloom &lt;code&gt;sh&lt;/code&gt;&lt;/a&gt;.\nIf you want to check for strict POSIX compliance, try &lt;a href=&quot;https://manpages.debian.org/unstable/posh/posh.1.en.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;posh&lt;/code&gt;&lt;/a&gt;\nin its designated POSIX mode\n(which however does not seem to be properly documented).&lt;/p&gt;\n&lt;p&gt;As an aside, the &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/&quot; rel=&quot;nofollow noreferrer&quot;&gt;POSIX&lt;/a&gt; standardization effort is intended to specify the behavior of various U*x-like platform behaviors, including the &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799//idx/shell.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;shell&lt;/a&gt; (&lt;code&gt;sh&lt;/code&gt;).\nHowever, this is an evolving document, and so, some implementations adhere to an earlier version of the POSIX specification; furthermore, there are some legacy implementations which didn&apos;t even try to adhere to POSIX.\nThe original Bourne shell had some quirks  which were later straightened out by the POSIX spec, which in large parts is based on &lt;code&gt;ksh88&lt;/code&gt;. (Many of the Bash extensions are also innovations from &lt;code&gt;ksh&lt;/code&gt;.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; is an interface between a user and OS to access to an operating system&apos;s services. It can be either GUI or CLI (Command Line interface).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;sh&lt;/strong&gt; (Bourne &lt;strong&gt;sh&lt;/strong&gt;ell) is a shell command-line interpreter, for Unix/Unix-like operating systems. It provides some built-in commands. In scripting language we denote interpreter as &lt;code&gt;#!/bin/sh&lt;/code&gt;. It was one most widely supported by other shells like bash (free/open), kash (not free).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; (&lt;strong&gt;B&lt;/strong&gt;ourne &lt;strong&gt;a&lt;/strong&gt;gain &lt;strong&gt;s&lt;/strong&gt;hell) is a shell replacement for the Bourne shell. Bash is superset of sh. Bash supports sh. POSIX is a set of standards defining how POSIX-compliant systems should work.  Bash is not actually a POSIX compliant shell. In a scripting language we denote the interpreter as &lt;code&gt;#!/bin/bash&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Analogy:&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Shell is like an interface or specifications or API.  &lt;/li&gt;\n&lt;li&gt;sh is a class which implements the Shell interface.  &lt;/li&gt;\n&lt;li&gt;Bash is a subclass of the sh. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8Xvox.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8Xvox.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Post from &lt;a href=&quot;http://www.unix.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;UNIX.COM&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Shell features&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This table below lists most features that I think would make you choose one shell over another. It is not intended to be a definitive list and does not include every single possible feature for every single possible shell. A feature is only considered to be in a shell if in the version that comes with the operating system, or if it is available as compiled directly from the standard distribution. In particular the C shell specified below is that available on SUNOS 4.*, a considerable number of vendors now ship either tcsh or their own enhanced C shell instead (they don&apos;t always make it obvious that they are shipping tcsh.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;                                     sh   csh  ksh  bash tcsh zsh  rc   es\nJob control                          N    Y    Y    Y    Y    Y    N    N\nAliases                              N    Y    Y    Y    Y    Y    N    N\nShell functions                      Y(1) N    Y    Y    N    Y    Y    Y\n&quot;Sensible&quot; Input/Output redirection  Y    N    Y    Y    N    Y    Y    Y\nDirectory stack                      N    Y    Y    Y    Y    Y    F    F\nCommand history                      N    Y    Y    Y    Y    Y    L    L\nCommand line editing                 N    N    Y    Y    Y    Y    L    L\nVi Command line editing              N    N    Y    Y    Y(3) Y    L    L\nEmacs Command line editing           N    N    Y    Y    Y    Y    L    L\nRebindable Command line editing      N    N    N    Y    Y    Y    L    L\nUser name look up                    N    Y    Y    Y    Y    Y    L    L\nLogin/Logout watching                N    N    N    N    Y    Y    F    F\nFilename completion                  N    Y(1) Y    Y    Y    Y    L    L\nUsername completion                  N    Y(2) Y    Y    Y    Y    L    L\nHostname completion                  N    Y(2) Y    Y    Y    Y    L    L\nHistory completion                   N    N    N    Y    Y    Y    L    L\nFully programmable Completion        N    N    N    N    Y    Y    N    N\nMh Mailbox completion                N    N    N    N(4) N(6) N(6) N    N\nCo Processes                         N    N    Y    N    N    Y    N    N\nBuiltin artithmetic evaluation       N    Y    Y    Y    Y    Y    N    N\nCan follow symbolic links invisibly  N    N    Y    Y    Y    Y    N    N\nPeriodic command execution           N    N    N    N    Y    Y    N    N\nCustom Prompt (easily)               N    N    Y    Y    Y    Y    Y    Y\nSun Keyboard Hack                    N    N    N    N    N    Y    N    N\nSpelling Correction                  N    N    N    N    Y    Y    N    N\nProcess Substitution                 N    N    N    Y(2) N    Y    Y    Y\nUnderlying Syntax                    sh   csh  sh   sh   csh  sh   rc   rc\nFreely Available                     N    N    N(5) Y    Y    Y    Y    Y\nChecks Mailbox                       N    Y    Y    Y    Y    Y    F    F\nTty Sanity Checking                  N    N    N    N    Y    Y    N    N\nCan cope with large argument lists   Y    N    Y    Y    Y    Y    Y    Y\nHas non-interactive startup file     N    Y    Y(7) Y(7) Y    Y    N    N\nHas non-login startup file           N    Y    Y(7) Y    Y    Y    N    N\nCan avoid user startup files         N    Y    N    Y    N    Y    Y    Y\nCan specify startup file             N    N    Y    Y    N    N    N    N\nLow level command redefinition       N    N    N    N    N    N    N    Y\nHas anonymous functions              N    N    N    N    N    N    Y    Y\nList Variables                       N    Y    Y    N    Y    Y    Y    Y\nFull signal trap handling            Y    N    Y    Y    N    Y    Y    Y\nFile no clobber ability              N    Y    Y    Y    Y    Y    N    F\nLocal variables                      N    N    Y    Y    N    Y    Y    Y\nLexically scoped variables           N    N    N    N    N    N    N    Y\nExceptions                           N    N    N    N    N    N    N    Y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Key to the table above.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Y      Feature can be done using this shell.&lt;/p&gt;\n&lt;p&gt;N      Feature is not present in the shell.&lt;/p&gt;\n&lt;p&gt;F      Feature can only be done by using the shells function\nmechanism.&lt;/p&gt;\n&lt;p&gt;L      The readline library must be linked into the shell to enable\nthis Feature.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Notes to the table above&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;This feature was not in the original version, but has since become\nalmost standard.&lt;/li&gt;\n&lt;li&gt;This feature is fairly new and so is often not found on many\nversions of the shell, it is gradually making its way into\nstandard distribution.&lt;/li&gt;\n&lt;li&gt;The Vi emulation of this shell is thought by many to be\nincomplete.&lt;/li&gt;\n&lt;li&gt;This feature is not standard but unofficial patches exist to\nperform this.&lt;/li&gt;\n&lt;li&gt;A version called &apos;pdksh&apos; is freely available, but does not have\nthe full functionality of the AT&amp;amp;T version.&lt;/li&gt;\n&lt;li&gt;This can be done via the shells programmable completion mechanism.&lt;/li&gt;\n&lt;li&gt;Only by specifying a file via the ENV environment variable.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TERMINAL&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;program(s) that put a window up&lt;/li&gt;\n&lt;li&gt;xterm, rxvt, konsole, kvt, gnome-terminal, nxterm, and eterm.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;SHELL&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is a program that runs in the terminal&lt;/li&gt;\n&lt;li&gt;Shell is both a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Shell is simply a macro processor that executes commands. &lt;/li&gt;\n&lt;li&gt;Macro processor means functionality where text and symbols are expanded to create larger expressions. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;SH Vs. BASH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;(SHell)&lt;/li&gt;\n&lt;li&gt;Is a specific shell&lt;/li&gt;\n&lt;li&gt;a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Predecessor of BASH&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;BASH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;(Bourne-Again SHell)&lt;/li&gt;\n&lt;li&gt;Is a specific shell&lt;/li&gt;\n&lt;li&gt;a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Has sh functionality and more&lt;/li&gt;\n&lt;li&gt;Successor of SH&lt;/li&gt;\n&lt;li&gt;BASH is the default SHELL&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;REFERENCE MATERIAL:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SHELL&lt;/strong&gt;\n&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/What-is-a-shell_003f.html#What-is-a-shell_003f&quot;&gt;gnu.org:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;At its base, a &lt;strong&gt;shell is simply a macro processor&lt;/strong&gt; that executes\n  commands. The term &lt;strong&gt;macro processor means functionality where text and\n  symbols are expanded to create larger expressions.&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;A Unix &lt;strong&gt;shell is both a command interpreter and a programming language.&lt;/strong&gt;\n  As a command interpreter, the shell provides the user interface to the\n  rich set of GNU utilities. The programming language features allow\n  these utilities to be combined. Files containing commands can be\n  created, and become commands themselves. These new commands have the\n  same status as system commands in directories such as /bin, allowing\n  users or groups to establish custom environments to automate their\n  common tasks.&lt;/p&gt;\n  \n  &lt;p&gt;Shells may be used interactively or non-interactively. In interactive\n  mode, they accept input typed from the keyboard. When executing\n  non-interactively, shells execute commands read from a file.&lt;/p&gt;\n  \n  &lt;p&gt;A shell allows execution of GNU commands, both synchronously and\n  asynchronously. The shell waits for synchronous commands to complete\n  before accepting more input; asynchronous commands continue to execute\n  in parallel with the shell while it reads and executes additional\n  commands. The redirection constructs permit fine-grained control of\n  the input and output of those commands. Moreover, the shell allows\n  control over the contents of commands environments.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Shells also provide a small set of built-in commands (builtins)\n  implementing functionality impossible or inconvenient to obtain via\n  separate utilities&lt;/strong&gt;. &lt;strong&gt;For example, cd, break, continue, and exec cannot\n  be implemented outside of the shell&lt;/strong&gt; because they directly manipulate\n  the shell itself. The history, getopts, kill, or pwd builtins, among\n  others, could be implemented in separate utilities, but they are more\n  convenient to use as builtin commands. All of the shell builtins are\n  described in subsequent sections.&lt;/p&gt;\n  \n  &lt;p&gt;While executing commands is essential, &lt;strong&gt;most of the power (and\n  complexity) of shells is due to their embedded programming languages.&lt;/strong&gt;\n  Like any high-level language, the shell provides variables, flow\n  control constructs, quoting, and functions.&lt;/p&gt;\n  \n  &lt;p&gt;Shells offer features geared specifically for interactive use rather\n  than to augment the programming language. These interactive features\n  include job control, command line editing, command history and\n  aliases. Each of these features is described in this manual.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;BASH&lt;/strong&gt; &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/What-is-Bash_003f.html#What-is-Bash_003f&quot;&gt;gnu.org:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Bash is the shell, or command language interpreter, for the GNU\n  operating system. The name is an acronym for the Bourne-Again SHell,\n  a pun on Stephen Bourne, the author of the direct ancestor of the\n  current Unix shell sh, which appeared in the Seventh Edition Bell Labs\n  Research version of Unix.&lt;/p&gt;\n  \n  &lt;p&gt;Bash is largely compatible with sh and incorporates useful features\n  from the Korn shell ksh and the C shell csh. It is intended to be a\n  conformant implementation of the IEEE POSIX Shell and Tools portion of\n  the IEEE POSIX specification (IEEE Standard 1003.1). It offers\n  functional improvements over sh for both interactive and programming\n  use.&lt;/p&gt;\n  \n  &lt;p&gt;While the GNU operating system provides other shells, including a\n  version of csh, &lt;strong&gt;Bash is the default shell&lt;/strong&gt;. Like other GNU software,\n  Bash is quite portable. It currently runs on nearly every version of\n  Unix and a few other operating systems - independently-supported ports\n  exist for MS-DOS, OS/2, and Windows platforms.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Other answers generally pointed out the difference between Bash and a POSIX shell standard. However, when writing portable shell scripts and being used to Bash syntax, a list of typical bashisms and corresponding pure POSIX solutions is very handy. Such list has been compiled when Ubuntu switched from Bash to Dash as default system shell and can be found here:\n&lt;a href=&quot;https://wiki.ubuntu.com/DashAsBinSh&quot;&gt;https://wiki.ubuntu.com/DashAsBinSh&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Moreover, there is a great tool called &lt;a href=&quot;http://manpages.ubuntu.com/manpages/saucy/man1/checkbashisms.1.html&quot;&gt;checkbashisms&lt;/a&gt; that checks for bashisms in your script and comes handy when you want to make sure that your script is portable.&lt;/p&gt;\n    ","\n&lt;p&gt;bash and sh are two different shells. Basically bash is sh, with more features and better syntax. Most commands work the same, but they are different.Bash (bash) is one of many available (yet the most commonly used) Unix shells. Bash stands for &quot;Bourne Again SHell&quot;,and is a replacement/improvement of the original Bourne shell (sh).&lt;/p&gt;\n\n&lt;p&gt;Shell scripting is scripting in any shell, whereas Bash scripting is scripting specifically for Bash. In practice, however, &quot;shell script&quot; and &quot;bash script&quot; are often used interchangeably, unless the shell in question is not Bash.&lt;/p&gt;\n\n&lt;p&gt;Having said that, you should realize /bin/sh on most systems will be a symbolic link and will not invoke sh. In Ubuntu /bin/sh used to link to bash, typical behavior on Linux distributions, but now has changed to linking to another shell called dash. I would use bash, as that is pretty much the standard (or at least most common, from my experience). In fact, problems arise when a bash script will use #!/bin/sh because the script-maker assumes the link is to bash when it doesn&apos;t have to be.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;They&apos;re nearly identical but &lt;code&gt;bash&lt;/code&gt; has more features&lt;/strong&gt;  &lt;code&gt;sh&lt;/code&gt; is (more or less) an older subset of &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; often means the original &lt;code&gt;Bourne shell&lt;/code&gt;, which predates &lt;code&gt;bash&lt;/code&gt; (&lt;code&gt;Bourne *again* shell&lt;/code&gt;), and was created in 1977.  But, in practice, it may be better to think of it as a highly-cross-compatible shell compliant with the POSIX standard from 1992.&lt;/p&gt;\n&lt;p&gt;Scripts that start with &lt;code&gt;#!/bin/sh&lt;/code&gt; or use the &lt;code&gt;sh&lt;/code&gt; shell usually do so for backwards compatibility.  Any unix/linux OS will have an &lt;code&gt;sh&lt;/code&gt; shell.  On Ubuntu &lt;code&gt;sh&lt;/code&gt; often invokes &lt;code&gt;dash&lt;/code&gt; and on MacOS it&apos;s a special POSIX version of &lt;code&gt;bash&lt;/code&gt;.  These shells may be preferred for standard-compliant behavior, speed or backwards compatibility.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; is newer than the original &lt;code&gt;sh&lt;/code&gt;, adds more features, and seeks to be backwards compatible with &lt;code&gt;sh&lt;/code&gt;.  &lt;code&gt;sh&lt;/code&gt; programs will usually run just fine in &lt;code&gt;bash&lt;/code&gt;.  &lt;code&gt;bash&lt;/code&gt; is available on nearly all linux/unix machines and usually used by default  with the notable exception of MacOS defaulting to &lt;code&gt;zsh&lt;/code&gt; as of Catalina (10.15). FreeBSD, by default, does not come with &lt;code&gt;bash&lt;/code&gt; installed.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;/bin/sh&lt;/code&gt; may or may not invoke the same program as &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; supports &lt;em&gt;at least&lt;/em&gt; the features &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sh.html&quot; rel=&quot;noreferrer&quot;&gt;required by POSIX&lt;/a&gt; (assuming a correct implementation). It may support extensions as well.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bash&lt;/code&gt;, the &quot;Bourne Again Shell&quot;, implements the features required for sh plus bash-specific extensions. The full set of extensions is too long to describe here, and it varies with new releases. The differences are documented in the bash manual. Type &lt;code&gt;info bash&lt;/code&gt; and read the &quot;Bash Features&quot; section (section 6 in the current version), or read the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Bash-Features.html&quot; rel=&quot;noreferrer&quot;&gt;current documentation online&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;The differences explained in the easiest way possible:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;After having a basic understanding, the other answers will be easier to understand.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; - &quot;Shell&quot; is a program, which facilitates the interaction between the user and the operating system (kernel). There are many shell implementations available, like sh, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bash&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;C shell&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;Z shell&lt;/a&gt;, etc.&lt;/p&gt;\n&lt;p&gt;Using any of the shell programs, we will be able to execute commands that are supported by that shell program.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; - It derived from &lt;strong&gt;B&lt;/strong&gt;ourne-&lt;strong&gt;a&lt;/strong&gt;gain &lt;strong&gt;Sh&lt;/strong&gt;ell. Using this program, we will be able to execute all the commands specified by the shell. Also, we will be able to execute some commands that are specifically added to this program. Bash has backward compatibility with sh.&lt;/p&gt;\n&lt;p&gt;Sh - It derived from Bourne &lt;strong&gt;Sh&lt;/strong&gt;ell. &quot;sh&quot; supports all the commands specified in the shell. It means, using this program, we will be able to execute all the commands specified by Shell.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For more information, see:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://man.cx/sh&quot; rel=&quot;nofollow noreferrer&quot;&gt;dash&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://man.cx/bash&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bash&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The Linux operating system offers different types of shell. Though shells have many commands in common, each type has unique features.\nLets study different kind of mostly used shells.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Sh shell:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Sh shell is also known as Bourne shell. Sh shell is the first shell developed for Unix computers by Stephen Bourne at AT&amp;amp;T&apos;s Bell Labs in 1977. It includes many scripting tools.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Bash shell:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Bash shell stands for Bourne Again Shell. Bash shell is the default shell in most Linux distributions and substitute for the Sh shell (the Sh shell will also run in the Bash shell). The Bash shell can execute the vast majority of Sh shell scripts without modification and provide commands line editing feature also.&lt;/p&gt;\n    "],"id":499,"title":"Difference between sh and Bash","content":"\n                \n&lt;p&gt;When writing shell programs, we often use &lt;code&gt;/bin/sh&lt;/code&gt; and &lt;code&gt;/bin/bash&lt;/code&gt;. I usually use &lt;code&gt;bash&lt;/code&gt;, but I don&apos;t know what&apos;s the difference between them.&lt;/p&gt;\n&lt;p&gt;What&apos;s main difference between Bash and &lt;code&gt;sh&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;What do we need to be aware of when programming in Bash and &lt;code&gt;sh&lt;/code&gt;?&lt;/p&gt;\n    ","slug":"difference-between-sh-and-bash-1657388197713","postType":"QUESTION","createdAt":"2022-07-09T17:36:37.000Z","updatedAt":"2022-07-09T17:36:37.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"PHP - Failed to open stream : No such file or directory","slug":"php-failed-to-open-stream-:-no-such-file-or-directory-1657387872896"},{"title":"How can I validate an email address in JavaScript?","slug":"how-can-i-validate-an-email-address-in-javascript-1657385475959"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890"},{"title":"How to make a div 100% height of the browser window","slug":"how-to-make-a-div-100percent-height-of-the-browser-window-1657388265955"},{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195"},{"title":"How do I make a flat list out of a list of lists?","slug":"how-do-i-make-a-flat-list-out-of-a-list-of-lists-1657384500439"},{"title":"The Use of Multiple JFrames: Good or Bad Practice? [closed]","slug":"the-use-of-multiple-jframes:-good-or-bad-practice-closed-1657384478184"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"CSS selector for first element with class","slug":"css-selector-for-first-element-with-class-1657388028765"},{"title":"What is a lambda expression in C++11?","slug":"what-is-a-lambda-expression-in-c++11-1657387999252"},{"title":"How do I Pandas group-by to get sum?","slug":"how-do-i-pandas-group-by-to-get-sum-1657387908708"},{"title":"JQuery - $ is not defined","slug":"jquery-dollar-is-not-defined-1657388385731"}]},"__N_SSG":true}