{"pageProps":{"data":{"answer":["\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = ast.literal_eval(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; D&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [n.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/library/ast.html#ast.literal_eval&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ast.literal_eval&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;With &lt;code&gt;ast.literal_eval&lt;/code&gt; you can safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, booleans, and &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/3/library/json.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; module is a better solution whenever there is a &lt;em&gt;stringified&lt;/em&gt; list of dictionaries. The &lt;code&gt;json.loads(your_data)&lt;/code&gt; function can be used to convert it to a list.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;json.loads(x)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similarly&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , {&quot;D&quot;:&quot;E&quot;}]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;json.loads(x)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; is dangerous - you shouldn&apos;t execute user input.&lt;/p&gt;\n\n&lt;p&gt;If you have 2.6 or newer, use ast instead of eval:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&quot;A&quot;,&quot;B&quot; ,&quot;C&quot; ,&quot; D&quot;]&apos;&lt;/span&gt;)\n[&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; D&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once you have that, &lt;code&gt;strip&lt;/code&gt; the strings.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re on an older version of Python, you can get very close to what you want with a simple regular expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x=&lt;span class=&quot;hljs-string&quot;&gt;&apos;[  &quot;A&quot;,  &quot; B&quot;, &quot;C&quot;,&quot;D &quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.findall(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;&quot;\\s*([^&quot;]*?)\\s*&quot;&apos;&lt;/span&gt;, x)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This isn&apos;t as good as the ast solution, for example it doesn&apos;t correctly handle escaped quotes in strings. But it&apos;s simple, doesn&apos;t involve a dangerous eval, and might be good enough for your purpose if you&apos;re on an older Python without ast.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a quick solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unwanted whitespaces in the list elements may be removed in this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [x.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Inspired from some of the answers above that work with base python packages I compared the performance of a few (using Python 3.7.3):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 1: ast&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.strip, ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\ntimeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list(map(str.strip, ast.literal_eval(u&apos;[ \\&quot;A\\&quot;,\\&quot;B\\&quot;,\\&quot;C\\&quot; , \\&quot; D\\&quot;]&apos;)))&quot;&lt;/span&gt;, setup=&lt;span class=&quot;hljs-string&quot;&gt;&apos;import ast&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1.292875313000195&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 2: json&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.strip, json.loads(&lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\ntimeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list(map(str.strip, json.loads(u&apos;[ \\&quot;A\\&quot;,\\&quot;B\\&quot;,\\&quot;C\\&quot; , \\&quot; D\\&quot;]&apos;)))&quot;&lt;/span&gt;, setup=&lt;span class=&quot;hljs-string&quot;&gt;&apos;import json&apos;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0.27833264000014424&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 3: no import&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.strip, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;.strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;][&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\ntimeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list(map(str.strip, u&apos;[ \\&quot;A\\&quot;,\\&quot;B\\&quot;,\\&quot;C\\&quot; , \\&quot; D\\&quot;]&apos;.strip(&apos;][&apos;).replace(&apos;\\&quot;&apos;, &apos;&apos;).split(&apos;,&apos;)))&quot;&lt;/span&gt;, number=&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0.12935059100027502&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I was disappointed to see what I considered the method with the worst readability was the method with the best performance... there are tradeoffs to consider when going with the most readable option... for the type of workloads I use python for I usually value readability over a slightly more performant option, but as usual it depends.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast\nl = ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)\nl = [i.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If it&apos;s only a one dimensional list, this can be done without importing anything:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls = x.strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[]&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This u can do,&lt;/p&gt;\n&lt;p&gt;**&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(x)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;**\nbest one is the accepted answer&lt;/p&gt;\n&lt;p&gt;Though this is not a safe way, the best answer is the accepted one.\nwasn&apos;t aware of the eval danger when answer was posted.&lt;/p&gt;\n    ","\n&lt;p&gt;Assuming that all your inputs are lists and that the double quotes in the input actually don&apos;t matter, this can be done with a simple regexp replace.  It is a bit perl-y but works like a charm.  Note also that the output is now a list of unicode strings, you didn&apos;t specify that you needed that, but it seems to make sense given unicode input.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\nx = &lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\njunkers = re.&lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[[&quot; \\]]&apos;&lt;/span&gt;)\nresult = junkers.sub(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, x).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; result\n---&amp;gt;  [&lt;span class=&quot;hljs-string&quot;&gt;u&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The junkers variable contains a compiled regexp (for speed) of all characters we don&apos;t want, using ] as a character required some backslash trickery.\nThe re.sub replaces all these characters with nothing, and we split the resulting string at the commas.   &lt;/p&gt;\n\n&lt;p&gt;Note that this also removes spaces from inside entries u&apos;[&quot;oh no&quot;]&apos; ---&amp;gt; [u&apos;ohno&apos;].  If this is not what you wanted, the regexp needs to be souped up a bit.  &lt;/p&gt;\n    ","\n&lt;p&gt;No need to import anything and no need evaluate. You can do this in one line for most basic use cases, including the one given in original question.&lt;/p&gt;\n&lt;h2&gt;One liner&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l_x = [i.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Explanation&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# str indexing to eliminate the brackets&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# replace as split will otherwise retain the quotes in returned list&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# split to conv to list&lt;/span&gt;\nl_x = x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Outputs&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l_x)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l_x[i])\n&lt;span class=&quot;hljs-comment&quot;&gt;# vvvv output vvvvv&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n A\nB\nC \n  D\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(l_x)) &lt;span class=&quot;hljs-comment&quot;&gt;# out: class &apos;list&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l_x)) &lt;span class=&quot;hljs-comment&quot;&gt;# out: 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can parse and clean up this list as needed using list comprehension.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l_x = [i.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l_x] &lt;span class=&quot;hljs-comment&quot;&gt;# list comprehension to clean up&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l_x)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l_x[i])\n&lt;span class=&quot;hljs-comment&quot;&gt;# vvvvv output vvvvv&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nA\nB\nC\nD\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Nested lists&lt;/h2&gt;\n&lt;p&gt;If you have nested lists, it does get a bit more annoying. Without using regex (which would simplify the replace), and assuming you want to return a flattened list (and the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot; rel=&quot;noreferrer&quot;&gt;zen of python says flat is better than nested&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;, [&quot;E&quot;,&quot;F&quot;,&quot;G&quot;]]&apos;&lt;/span&gt;\nl_x = x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\nl_x = [i\n    .replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    .replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    .replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    .strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l_x\n]\n&lt;span class=&quot;hljs-comment&quot;&gt;# returns [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need to retain the nested list it gets a bit uglier, but can still be done just with re and list comprehension:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\nx = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;, &quot;[&quot;E&quot;,&quot;F&quot;,&quot;G&quot;]&quot;,&quot;Z&quot;, &quot;Y&quot;, &quot;[&quot;H&quot;,&quot;I&quot;,&quot;J&quot;]&quot;, &quot;K&quot;, &quot;L&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# clean it up so regex is simpler&lt;/span&gt;\nx = x.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;# look ahead for the bracketed text that signifies nested list&lt;/span&gt;\nl_x = re.split(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;,(?=\\[[A-Za-z0-9\\&apos;,]+\\])|(?&amp;lt;=\\]),&apos;&lt;/span&gt;, x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l_x)\n&lt;span class=&quot;hljs-comment&quot;&gt;# flatten and split the non nested list items&lt;/span&gt;\nl_x0 = [item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; items &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l_x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items]\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert the nested lists to lists&lt;/span&gt;\nl_x1 = [\n    i[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l_x &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; i \n]\n&lt;span class=&quot;hljs-comment&quot;&gt;# add the two lists &lt;/span&gt;\nl_x = l_x0 + l_x1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This last solution will work on any list stored as a string, nested or not.&lt;/p&gt;\n    ","\n&lt;p&gt;If you know that your lists only contain quoted strings, this pyparsing example will give you your list of stripped strings (even preserving the original Unicode-ness).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pyparsing &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x =&lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;LBR,RBR = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(Suppress,&lt;span class=&quot;hljs-string&quot;&gt;&quot;[]&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qs = quotedString.setParseAction(removeQuotes, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].strip())\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qsList = LBR + delimitedList(qs) + RBR\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; qsList.parseString(x).asList()\n[&lt;span class=&quot;hljs-string&quot;&gt;u&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;u&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If your lists can have more datatypes, or even contain lists within lists, then you will need a more complete grammar - like &lt;a href=&quot;https://github.com/pyparsing/pyparsing/blob/master/examples/parsePythonValue.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;this one&lt;/a&gt; in the pyparsing examples directory, which will handle tuples, lists, ints, floats, and quoted strings.&lt;/p&gt;\n    ","\n&lt;p&gt;To further complete @Ryan &apos;s answer using json, one very convenient function to convert unicode is the one posted here: &lt;a href=&quot;https://stackoverflow.com/a/13105359/7599285&quot;&gt;https://stackoverflow.com/a/13105359/7599285&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ex with double or single quotes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; byteify(json.loads(&lt;span class=&quot;hljs-string&quot;&gt;u&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;)\n&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; byteify(json.loads(&lt;span class=&quot;hljs-string&quot;&gt;u&quot;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos; , &apos; D&apos;]&quot;&lt;/span&gt;.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;)))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; D&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This usually happens when you load list stored as string to CSV&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you have your list stored in CSV in form like OP asked:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is how you can load it back to list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; csv\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;YourCSVFile.csv&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; csv_file:\n    reader = csv.reader(csv_file, delimiter=&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n    rows = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(reader)\n\nlistItems = rows[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;listItems&lt;/code&gt; is now list&lt;/p&gt;\n    ","\n&lt;p&gt;You may run into such problem while dealing with scraped data stored as Pandas DataFrame.&lt;/p&gt;\n\n&lt;p&gt;This solution works like charm if the &lt;strong&gt;list of values is present as text&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;textToList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;hashtags&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hashtags.strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[]&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n\nhashtags = &lt;span class=&quot;hljs-string&quot;&gt;&quot;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos; , &apos; D&apos;]&quot;&lt;/span&gt;\nhashtags = textToList(hashtags)\n\nOutput: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;No external library required.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I would like to provide a more intuitive patterning solution with regex. \nThe below function takes as input a stringified list containing arbitrary strings. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stepwise explanation:&lt;/strong&gt;\nYou remove all whitespacing,bracketing and value_separators (provided they are not part of the values you want to extract, else make the regex more complex). Then you split the cleaned string on single or double quotes and take the non-empty values (or odd indexed values, whatever the preference). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse_strlist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;sl&lt;/span&gt;):\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\nclean = re.sub(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\[\\],\\s]&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,sl)\nsplitted = re.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\&apos;\\&quot;]&quot;&lt;/span&gt;,clean)\nvalues_only = [s &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; splitted &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values_only\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;testsample&lt;/strong&gt;: &quot;[&apos;21&apos;,&quot;foo&quot; &apos;6&apos;, &apos;0&apos;, &quot; A&quot;]&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;So, following all the answers I decided to time the most common methods:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json\n\n\nmy_str = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;)))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_str)\n\nreps = &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n\nstart = time()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, reps):\n    re.findall(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\w+&quot;&lt;/span&gt;, my_str)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Regex method:\\t&quot;&lt;/span&gt;, (time() - start) / reps)\n\nstart = time()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, reps):\n    json.loads(my_str)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;json method:\\t&quot;&lt;/span&gt;, (time() - start) / reps)\n\nstart = time()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, reps):\n    ast.literal_eval(my_str)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ast method:\\t\\t&quot;&lt;/span&gt;, (time() - start) / reps)\n\nstart = time()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, reps):\n    [n.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_str]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;strip method:\\t&quot;&lt;/span&gt;, (time() - start) / reps)\n\n\n\n    regex method:    &lt;span class=&quot;hljs-number&quot;&gt;6.391477584838867e-07&lt;/span&gt;\n    json method:     &lt;span class=&quot;hljs-number&quot;&gt;2.535374164581299e-06&lt;/span&gt;\n    ast method:      &lt;span class=&quot;hljs-number&quot;&gt;2.4425282478332518e-05&lt;/span&gt;\n    strip method:    &lt;span class=&quot;hljs-number&quot;&gt;4.983267784118653e-06&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So in the end regex wins!&lt;/p&gt;\n    ","\n&lt;p&gt;you can save yourself the .strip() fcn by just slicing off the first and last characters from the string representation of the list (see third line below)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mylist=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;baloney&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;alfalfa&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;strlist=&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(mylist)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; 2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; 3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; 4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; 5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &apos;baloney&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &apos;alfalfa&apos;&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mylistfromstring=(strlist[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mylistfromstring[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mylistfromstring:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(entry)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;baloney&apos;&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;alfalfa&apos;&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;and with pure python - not importing any libraries&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;  x.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; , &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution is simpler than some I read above but requires to match all features of the list&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n[i.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(i.strip().strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;).strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;).strip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;))&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n    "],"id":244,"title":"How to convert string representation of list to a list","content":"\n                \n&lt;p&gt;I was wondering what the simplest way is to convert a string representation of a list like the following to a &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Even in cases where the user puts spaces in between the commas, and spaces inside of the quotes, I need to handle that as well and convert it to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;] \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I know I can strip spaces with &lt;code&gt;strip()&lt;/code&gt; and &lt;code&gt;split()&lt;/code&gt; and check for non-letter characters. But the code was getting very kludgy. Is there a quick function that I&apos;m not aware of?&lt;/p&gt;\n    ","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181","postType":"QUESTION","createdAt":"2022-07-09T17:23:04.000Z","updatedAt":"2022-07-09T17:23:04.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"When should I wrap quotes around a shell variable?","slug":"when-should-i-wrap-quotes-around-a-shell-variable-1657384659265"},{"title":"Passing data between view controllers","slug":"passing-data-between-view-controllers-1657384540021"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"Transpose / reshape dataframe without \"timevar\" from long to wide format","slug":"transpose-reshape-dataframe-without-\"timevar\"-from-long-to-wide-format-1657388213347"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"How to convert a factor to integer\\numeric without loss of information?","slug":"how-to-convert-a-factor-to-integernumeric-without-loss-of-information-1657387880273"},{"title":"How do I redirect to another webpage?","slug":"how-do-i-redirect-to-another-webpage-1657384869767"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"}]},"__N_SSG":true}