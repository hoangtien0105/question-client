{"pageProps":{"data":{"answer":["\n&lt;p&gt;Python doesn&apos;t have variable declarations, so it has to figure out the &lt;a href=&quot;http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces&quot;&gt;scope&lt;/a&gt; of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.&lt;sup&gt;&lt;a href=&quot;http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;  Thus, the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;implicitly makes &lt;code&gt;counter&lt;/code&gt; local to &lt;code&gt;increment()&lt;/code&gt;.  Trying to execute this line, though, will try to read the value of the local variable &lt;code&gt;counter&lt;/code&gt; before it is assigned, resulting in an &lt;a href=&quot;http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError&quot;&gt;&lt;code&gt;UnboundLocalError&lt;/code&gt;&lt;/a&gt;.&lt;sup&gt;&lt;a href=&quot;http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;If &lt;code&gt;counter&lt;/code&gt; is a global variable, the &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; keyword will help.  If &lt;code&gt;increment()&lt;/code&gt; is a local function and &lt;code&gt;counter&lt;/code&gt; a local variable, you can use &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement&quot;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/a&gt; in Python 3.x.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use the &lt;a href=&quot;http://docs.python.org/py3k/reference/simple_stmts.html#the-global-statement&quot;&gt;global statement&lt;/a&gt; so that you are modifying the global variable counter, instead of a local variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n  counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the enclosing scope that &lt;code&gt;counter&lt;/code&gt; is defined in is not the global scope, on Python 3.x you could use the &lt;a href=&quot;http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement&quot;&gt;nonlocal statement&lt;/a&gt;.  In the same situation on Python 2.x you would have no way to reassign to the nonlocal name &lt;code&gt;counter&lt;/code&gt;, so you would need to make &lt;code&gt;counter&lt;/code&gt; mutable and modify it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  counter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; counter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# prints &apos;1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To answer the question in your subject line,* yes, there are closures in Python, except they only apply inside a function, and also (in Python 2.x) they are read-only; you can&apos;t re-bind the name to a different object (though if the object is mutable, you can modify its contents). In Python 3.x, you can use the &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html?highlight=nonlocal#nonlocal&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/a&gt; keyword to modify a closure variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;incrementer&lt;/span&gt;():\n    counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n        &lt;span class=&quot;hljs-keyword&quot;&gt;nonlocal&lt;/span&gt; counter\n        counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; counter\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; increment\n\nincrement = incrementer()\n\nincrement()   &lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nincrement()   &lt;span class=&quot;hljs-comment&quot;&gt;# 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;* The question origially asked about closures in Python.&lt;/p&gt;\n    ","\n&lt;p&gt;The reason why your code throws an &lt;code&gt;UnboundLocalError&lt;/code&gt; is already well explained in other answers.&lt;/p&gt;\n&lt;p&gt;But it seems to me that you&apos;re trying to build something that works like &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.count&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;itertools.count()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;So try it out, and see if it suits your case:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; count\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter = count(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(counter)\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(counter)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python has lexical scoping by default, which means that although an enclosed scope can access values in its enclosing scope, it cannot modify them (unless they&apos;re declared global with the &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; keyword).&lt;/p&gt;\n\n&lt;p&gt;A closure binds values in the &lt;em&gt;enclosing&lt;/em&gt; environment to names in the &lt;em&gt;local&lt;/em&gt; environment. The local environment can then use the bound value, and even reassign that name to something else, but it can&apos;t modify the binding in the enclosing environment.&lt;/p&gt;\n\n&lt;p&gt;In your case you are trying to treat &lt;code&gt;counter&lt;/code&gt; as a local variable rather than a bound value. Note that this code, which binds the value of &lt;code&gt;x&lt;/code&gt; assigned in the enclosing environment, works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;():\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f()\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To modify a global variable inside a function, you must use the global keyword.&lt;/p&gt;\n\n&lt;p&gt;When you try to do this without the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;inside of the definition of increment, a local variable named counter is created so as to keep you from mucking up the counter variable that the whole program may depend on.&lt;/p&gt;\n\n&lt;p&gt;Note that you only need to use global when you are modifying the variable; you could read counter from within increment without the need for the global statement.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n  counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python is not purely lexically scoped.&lt;/p&gt;\n&lt;p&gt;See &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them/&quot;&gt;Using global variables in a function&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;And &lt;em&gt;&lt;a href=&quot;https://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Notes on Python variable scope&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    "],"id":598,"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/41369408/how-can-i-change-a-global-variable-from-within-a-function&quot; dir=&quot;ltr&quot;&gt;How can I change a global variable from within a function?&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (8 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/423379/using-global-variables-in-a-function&quot; dir=&quot;ltr&quot;&gt;Using global variables in a function&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (24 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2016-12-29 06:42:07Z&quot; class=&quot;relativetime&quot;&gt;5 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;What am I doing wrong here?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above code throws an &lt;code&gt;UnboundLocalError&lt;/code&gt;.&lt;/p&gt;\n    ","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538","postType":"QUESTION","createdAt":"2022-07-09T17:42:11.000Z","updatedAt":"2022-07-09T17:42:11.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Reference: mod_rewrite, URL rewriting and \"pretty links\" explained","slug":"reference:-mod_rewrite-url-rewriting-and-\"pretty-links\"-explained-1657384905504"},{"title":"Determine Whether Two Date Ranges Overlap","slug":"determine-whether-two-date-ranges-overlap-1657387924335"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"How can I merge properties of two JavaScript objects dynamically?","slug":"how-can-i-merge-properties-of-two-javascript-objects-dynamically-1657387492535"},{"title":"Templated check for the existence of a class member function?","slug":"templated-check-for-the-existence-of-a-class-member-function-1657388363414"},{"title":"What is the most efficient way to deep clone an object in JavaScript?","slug":"what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript-1657384601026"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"},{"title":"What Is Selenium And What Is WebDriver?","slug":"what-is-selenium-and-what-is-webdriver-1657385470372"},{"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941"},{"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692"},{"title":"Prototypical inheritance - writing up [duplicate]","slug":"prototypical-inheritance-writing-up-duplicate-1657385478064"},{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"How to join (merge) data frames (inner, outer, left, right)","slug":"how-to-join-(merge)-data-frames-(inner-outer-left-right)-1657384406445"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"}]},"__N_SSG":true}