{"pageProps":{"data":{"answer":["\n&lt;h3&gt;Some examples of how to avoid select&lt;/h3&gt;\n&lt;p&gt;Use &lt;code&gt;Dim&lt;/code&gt;&apos;d variables&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;Set&lt;/code&gt; the variable to the required range. There are many ways to refer to a single-cell range:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;NamedRange&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or a multi-cell range:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:B10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Cells(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AnotherNamedRange&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Resize(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use the shortcut to the &lt;code&gt;Evaluate&lt;/code&gt; method, but this is less efficient and should generally be avoided in production code.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = [A1]\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = [A1:B10]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All the above examples refer to cells on the &lt;em&gt;active sheet&lt;/em&gt;. Unless you specifically want to work only with the active sheet, it is better to Dim a &lt;code&gt;Worksheet&lt;/code&gt; variable too:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ws.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = .Range(.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), .Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; want to work with the &lt;code&gt;ActiveSheet&lt;/code&gt;, for clarity it&apos;s best to be explicit. But take care, as some &lt;code&gt;Worksheet&lt;/code&gt; methods change the active sheet.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, this refers to the &lt;em&gt;active workbook&lt;/em&gt;.  Unless you specifically want to work only with the &lt;code&gt;ActiveWorkbook&lt;/code&gt; or &lt;code&gt;ThisWorkbook&lt;/code&gt;, it is better to Dim a &lt;code&gt;Workbook&lt;/code&gt; variable too.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Workbook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb = Application.Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = wb.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; want to work with the &lt;code&gt;ActiveWorkbook&lt;/code&gt;, for clarity it&apos;s best to be explicit. But take care, as many &lt;code&gt;WorkBook&lt;/code&gt; methods change the active book.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ActiveWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use the &lt;code&gt;ThisWorkbook&lt;/code&gt; object to refer to the book containing the running code.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A common (bad) piece of code is to open a book, get some data then close again&lt;/p&gt;\n&lt;p&gt;This is bad:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; foo()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Variant\n    Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1.xlsx&quot;&lt;/span&gt;).Sheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Clear\n    Workbooks.Open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Path\\To\\SomeClosedBook.xlsx&quot;&lt;/span&gt;)\n    v = ActiveWorkbook.Sheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value\n    Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeAlreadyOpenBook.xlsx&quot;&lt;/span&gt;).Activate\n    ActiveWorkbook.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = v\n    Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Activate\n    ActiveWorkbook.Close()\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And it would be better like:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; foo()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Variant\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb1 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt;  wb2 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb1 = Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeAlreadyOpenBook.xlsx&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb2 = Workbooks.Open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Path\\To\\SomeClosedBook.xlsx&quot;&lt;/span&gt;)\n    v = wb2.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value\n    wb1.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeOtherSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = v\n    wb2.Close()\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pass ranges to your &lt;code&gt;Sub&lt;/code&gt;s and &lt;code&gt;Function&lt;/code&gt;s as Range variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; ClearRange(r &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range)\n    r.ClearContents\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;....&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; MyMacro()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:B10&quot;&lt;/span&gt;)\n    ClearRange rng\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You should also apply Methods (such as &lt;code&gt;Find&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt;) to variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng1 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng2 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng1 = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A10&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng2 = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B1:B10&quot;&lt;/span&gt;)\nrng1.Copy rng2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are looping over a range of cells it is often better (faster) to copy the range values to a variant array first and loop over that:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; dat &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ThisWorkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SomeSheet&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A10000&quot;&lt;/span&gt;)\ndat = rng.Value  &lt;span class=&quot;hljs-comment&quot;&gt;&apos; dat is now array (1 to 10000, 1 to 1)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i = LBound(dat, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; UBound(dat, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    dat(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = dat(i, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or whatever operation you need to perform&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;next&lt;/span&gt;\nrng.Value = dat &lt;span class=&quot;hljs-comment&quot;&gt;&apos; put new values back on sheet&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a small taster for what&apos;s possible.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Two main reasons why &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;Selection&lt;/code&gt;, &lt;code&gt;Activecell&lt;/code&gt;, &lt;code&gt;Activesheet&lt;/code&gt;, &lt;code&gt;Activeworkbook&lt;/code&gt;, etc. should be avoided&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;It slows down your code.&lt;/li&gt;\n&lt;li&gt;It is usually the main cause of runtime errors.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;How do we avoid it?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Directly work with the relevant objects&lt;/p&gt;\n&lt;p&gt;Consider this code&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Activate\nRange(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\nSelection.NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code can also be written as&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n    .Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\n    .NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; If required declare your variables. The same code above can be written as&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; worksheet\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n    .Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blah&quot;&lt;/span&gt;\n    .NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;That&apos;s a good answer, but what I am missing on this topic is when we actually need Activate. Everyone says it is bad, but no one explains any cases where it makes sense to use it.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Situation when you &lt;strong&gt;can&apos;t avoid&lt;/strong&gt; using &lt;code&gt;.Activate/.Select&lt;/code&gt;. (Will add more links as and when I come across them)&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When you want to present a worksheet to a user so that the user can see it.&lt;/li&gt;\n&lt;li&gt;Scenarios like &lt;a href=&quot;https://stackoverflow.com/questions/68507433/working-macro-returns-error-when-run-from-form-control&quot;&gt;Working macro returns error when run from form control&lt;/a&gt; where you are forced to use &lt;code&gt;.Activate&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;When &lt;a href=&quot;https://stackoverflow.com/questions/70015987/hijri-date-formatting&quot;&gt;usual methods&lt;/a&gt; of &lt;code&gt;Text To Columns&lt;/code&gt; / &lt;code&gt;.Formula = .Formula&lt;/code&gt; doesn&apos;t work then you may have to resort to &lt;code&gt;.Select&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;One small point of emphasis I&apos;ll add to all the excellent answers given previously:&lt;/p&gt;\n&lt;p&gt;Probably the biggest thing you can do to avoid using Select is to &lt;em&gt;&lt;strong&gt;as much as possible, use named ranges (combined with meaningful variable names) in your VBA code&lt;/strong&gt;&lt;/em&gt;. This point was mentioned above, but it was glossed over a bit; however, it deserves special attention.&lt;/p&gt;\n&lt;p&gt;Here are a couple of additional reasons to make liberal use of named ranges, though I am sure I could think of more.&lt;/p&gt;\n&lt;h2&gt;Named ranges make your code easier to read and understand.&lt;/h2&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Months &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; MonthlySales &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Months&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; E.g, &quot;Months&quot; might be a named range referring to A1:A12&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MonthlySales&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; E.g, &quot;Monthly Sales&quot; might be a named range referring to B1:B12&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Month &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; Month &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Months\n    Debug.Print MonthlySales(Month.Row)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; Month\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is pretty obvious what the named ranges &lt;code&gt;Months&lt;/code&gt; and &lt;code&gt;MonthlySales&lt;/code&gt; contain, and what the procedure is doing.&lt;/p&gt;\n&lt;p&gt;Why is this important? Partially because it is easier for other people to understand it, but even if you are the only person who will ever see or use your code, you should still use named ranges and good variable names because &lt;em&gt;&lt;strong&gt;you will forget&lt;/strong&gt;&lt;/em&gt; what you meant to do with it a year later, and &lt;em&gt;&lt;strong&gt;you will waste&lt;/strong&gt;&lt;/em&gt; 30 minutes just figuring out what your code is doing.&lt;/p&gt;\n&lt;h2&gt;Named ranges ensure that your macros do not break when (not if!) the configuration of the spreadsheet changes.&lt;/h2&gt;\n&lt;p&gt;Consider, if the above example had been written like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng1 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng2 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng1 = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A12&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng2 = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B1:B12&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng3 &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng3 &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rng1\n    Debug.Print rng2(rng3.Row)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will work just fine at first - that is until you or a future user decides &quot;gee wiz, I think I&apos;m going to add a new column with the year in Column &lt;code&gt;A&lt;/code&gt;!&quot;, or put an expenses column between the months and sales columns, or add a header to each column. Now, your code is broken. And because you used terrible variable names, it will take you a lot more time to figure out how to fix it than it should take.&lt;/p&gt;\n&lt;p&gt;If you had used named ranges to begin with, the &lt;code&gt;Months&lt;/code&gt; and &lt;code&gt;Sales&lt;/code&gt; columns could be moved around all you like, and your code would continue working just fine.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m going to give the short answer since everyone else gave the long one.&lt;/p&gt;\n\n&lt;p&gt;You&apos;ll get .select and .activate whenever you record macros and reuse them.  When you .select a cell or sheet it just makes it active.  From that point on whenever you use unqualified references like &lt;code&gt;Range.Value&lt;/code&gt; they just use the active cell and sheet.  This can also be problematic if you don&apos;t watch where your code is placed or a user clicks on the workbook.&lt;/p&gt;\n\n&lt;p&gt;So, you can eliminate these issues by directly referencing your cells.  Which goes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;create and set a range&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Excel.Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Rng = Workbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;OR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Rng = Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you could&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Just deal with the cell directly rather than creating a range&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;I want to put the string &quot;Hello&quot; in Range A1 of sheet 1&lt;/span&gt;\nWorkbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Book1&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;OR&lt;/span&gt;\nWorkbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are various combinations of these methods, but that would be the general idea expressed as shortly as possible for impatient people like me.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;... and am finding that my code would be more re-usable if I were able to use variables instead of Select functions.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;While I cannot think of any more than an isolated handful of situations where &lt;code&gt;.Select&lt;/code&gt; would be a better choice than direct cell referencing, I would rise to the defense of &lt;code&gt;Selection&lt;/code&gt; and point out that it should not be thrown out for the same reasons that &lt;code&gt;.Select&lt;/code&gt; should be avoided.&lt;/p&gt;\n\n&lt;p&gt;There are times when having short, time-saving macro sub routines assigned to hot-key combinations available with the tap of a couple of keys saves a lot of time. Being able to select a group of cells to enact the operational code on works wonders when dealing with pocketed data that does not conform to a worksheet-wide data format. Much in the same way that you might select a group of cells and apply a format change, selecting a group of cells to run special macro code against can be a major time saver.&lt;/p&gt;\n\n&lt;p&gt;Examples of Selection-based sub framework:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Selected()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL\n        Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Selected_Visible()\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;this is better for selected ranges on filtered data or containing hidden rows/columns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL.SpecialCells(xlCellTypeVisible)\n        Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Run_on_Discontiguous_Area()\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;this is better for selected ranges of discontiguous areas&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ara &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rSEL &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = Selection    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;store the current selection in case it changes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; ara &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rSEL.Areas\n        Debug.Print ara.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell group operational code here&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; ara.Areas\n            Debug.Print rng.Address(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-comment&quot;&gt;&apos;cell-by-cell operational code here&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; rng\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; ara\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rSEL = &lt;span class=&quot;hljs-literal&quot;&gt;Nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The actual code to process could be anything from a single line to multiple modules. I have used this method to initiate long running routines on a ragged selection of cells containing the filenames of external workbooks.&lt;/p&gt;\n\n&lt;p&gt;In short, don&apos;t discard &lt;code&gt;Selection&lt;/code&gt; due to its close association with &lt;code&gt;.Select&lt;/code&gt; and &lt;code&gt;ActiveCell&lt;/code&gt;. As a worksheet property it has many other purposes.&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;(Yes, I know this question was about &lt;code&gt;.Select&lt;/code&gt;, not &lt;code&gt;Selection&lt;/code&gt; but I wanted to remove any misconceptions that novice VBA coders might infer.)&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Avoiding &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; is the move that makes you a bit better VBA developer. In general, &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; are used when a macro is recorded, thus the &lt;code&gt;Parent&lt;/code&gt; worksheet or range is always considered the active one.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;This is how you may avoid &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Activate&lt;/code&gt; in the following cases:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Adding a new Worksheet and copying a cell on it:&lt;/h2&gt;\n\n&lt;p&gt;From (code generated with macro recorder):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Makro2()\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Sheets.Add After:=ActiveSheet\n    Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tabelle1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tabelle1&quot;&lt;/span&gt;).Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NewName&quot;&lt;/span&gt;\n    ActiveCell.FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot;&lt;/span&gt;\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Selection.Copy\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B3&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    ActiveSheet.Paste\n    Application.CutCopyMode = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = Worksheets.Add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; ws\n        .Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NewName&quot;&lt;/span&gt;\n        .Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n        .Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).Copy Destination:=.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B3&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;When you want to copy range between worksheets:&lt;/h2&gt;\n\n&lt;p&gt;From:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nColumns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Copy\nSheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nColumns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nActiveSheet.Paste\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).Columns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).Copy Destination:=Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Using fancy named ranges&lt;/h2&gt;\n\n&lt;p&gt;You may access them with &lt;code&gt;[]&lt;/code&gt;, which is really beautiful, compared to the other way. Check yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Months &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; MonthlySales &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Months&quot;&lt;/span&gt;)    \n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MonthlySales&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Months =[Months]\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; MonthlySales = [MonthlySales]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The example from above would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Source&quot;&lt;/span&gt;).Columns(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:D&quot;&lt;/span&gt;).Copy Destination:=Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Target&quot;&lt;/span&gt;).[A1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Not copying values, but taking them&lt;/h2&gt;\n\n&lt;p&gt;Usually, if you are willing to &lt;code&gt;select&lt;/code&gt;, most probably you are copying something. If you are only interested in the values, this is a good option to avoid select:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Range(&quot;B1:B6&quot;).Value = Range(&quot;A1:A6&quot;).Value&lt;/code&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Try always to reference the Worksheet as well&lt;/h2&gt;\n\n&lt;p&gt;This is probably the most common mistake in &lt;a href=&quot;/questions/tagged/vba&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;vba&apos;&quot; rel=&quot;tag&quot;&gt;vba&lt;/a&gt;. Whenever you copy ranges, sometimes the worksheet is not referenced and thus VBA considers the wrong sheet the ActiveWorksheet.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos;This will work only if the 2. Worksheet is selected!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Range(Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).Copy\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;This works always!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; TestMe2()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n        .Range(.Cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), .Cells(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).Copy\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Can I really never use &lt;code&gt;.Select&lt;/code&gt; or &lt;code&gt;.Activate&lt;/code&gt; for anything?&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A good example of when you could be justified in using &lt;code&gt;.Activate&lt;/code&gt; and &lt;code&gt;.Select&lt;/code&gt; is when you want make sure that a specific Worksheet is selected for visual reasons. E.g., that your Excel would always open with the cover worksheet selected first, disregarding which which was the ActiveSheet when the file was closed.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Thus, something like the code below is absolutely OK:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Workbook_Open()\n    Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cover&quot;&lt;/span&gt;).Activate\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Another good example is when you need to export all sheets into one PDF file, as mentioned in this case - &lt;a href=&quot;https://stackoverflow.com/questions/59107554/how-to-avoid-select-active-statements-in-vba-in-this-example&quot;&gt;How to avoid select/active statements in VBA in this example?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When a command only works with &lt;code&gt;ActiveWindow&lt;/code&gt; like &lt;a href=&quot;https://github.com/Vitosh/VBA_personal/blob/master/Boilerplate/Boilerplate%20VitoshAcademy/tblInput.vb&quot; rel=&quot;noreferrer&quot;&gt;ActiveWindow.Zoom&lt;/a&gt; or &lt;a href=&quot;https://github.com/Vitosh/VBA_personal/blob/master/Boilerplate/Boilerplate%20VitoshAcademy/ExcelAdditional.bas&quot; rel=&quot;noreferrer&quot;&gt;ActiveWindow.FreezePanes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Please note that in the following I&apos;m comparing the Select approach (the one that the OP wants to avoid), with the Range approach (and this is the answer to the question). So don&apos;t stop reading when you see the first Select.&lt;/p&gt;\n&lt;p&gt;It really depends on what you are trying to do. Anyway, a simple example could be useful. Let&apos;s suppose that you want to set the value of the active cell to &quot;foo&quot;. Using ActiveCell you would write something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro1()\n    ActiveCell.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to use it for a cell that is not the active one, for instance for &quot;B2&quot;, you should select it first, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro2()\n    Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\n    Macro1\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using Ranges you can write a more generic macro that can be used to set the value of any cell you want to whatever you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; SetValue(cellAddress &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, aVal &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant)\n    Range(cellAddress).Value = aVal\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can rewrite Macro2 as:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro2()\n    SetCellValue &lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And Macro1 as:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Macro1()\n    SetValue ActiveCell.Address, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Always state the workbook, worksheet and the cell/range.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Thisworkbook.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nWorkbooks(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bob&quot;&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because end users will always just click buttons and as soon as the focus moves off of the workbook the code wants to work with then things go completely wrong.&lt;/p&gt;\n\n&lt;p&gt;And never use the index of a workbook.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Workbooks(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fred&quot;&lt;/span&gt;).cells(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You don&apos;t know what other workbooks will be open when the user runs your code.&lt;/p&gt;\n    ","\n&lt;p&gt;These methods are rather stigmatized, so taking the lead &lt;a href=&quot;https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba/35864330#35864330&quot;&gt;of Vityata&lt;/a&gt; and Jeeped for the sake of drawing a line in the sand:&lt;/p&gt;\n&lt;h2&gt;Call &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;Selection&lt;/code&gt;, &lt;code&gt;ActiveSomething&lt;/code&gt; methods/properties&lt;/h2&gt;\n&lt;p&gt;Basically because they&apos;re called primarily to handle user input through the application UI. Since they&apos;re the methods called when the user handles objects through the UI, they&apos;re the ones recorded by the macro-recorder, and that&apos;s why calling them is either brittle or redundant for most situations: you don&apos;t have to select an object so as to perform an action with &lt;code&gt;Selection&lt;/code&gt; right afterwards.&lt;/p&gt;\n&lt;p&gt;However, this definition settles situations on which they are called for:&lt;/p&gt;\n&lt;h2&gt;When to call &lt;code&gt;.Activate&lt;/code&gt;, &lt;code&gt;.Select&lt;/code&gt;, &lt;code&gt;.Selection&lt;/code&gt;, &lt;code&gt;.ActiveSomething&lt;/code&gt; methods/properties&lt;/h2&gt;\n&lt;p&gt;Basically when you expect the &lt;em&gt;final user&lt;/em&gt; to play a role in the execution.&lt;/p&gt;\n&lt;p&gt;If you are developing and expect the user to choose the object instances for your code to handle, then &lt;code&gt;.Selection&lt;/code&gt; or &lt;code&gt;.ActiveObject&lt;/code&gt; are apropriate.&lt;/p&gt;\n&lt;p&gt;On the other hand, &lt;code&gt;.Select&lt;/code&gt; and &lt;code&gt;.Activate&lt;/code&gt; are of use when you can infer the user&apos;s next action and you want your code to guide the user, possibly saving him/her some time and mouse clicks. For example, if your code just created a brand new instance of a chart or updated one, the user might want to check it out, and you could call &lt;code&gt;.Activate&lt;/code&gt; on it or its sheet to save the user the time searching for it; or if you know the user will need to update some range values, you can programmatically select that range.&lt;/p&gt;\n    ","\n&lt;p&gt;IMHO use of &lt;code&gt;.select&lt;/code&gt; comes from people, who like me started learning VBA by necessity through recording macros and then modifying the code without realizing that &lt;code&gt;.select&lt;/code&gt; and subsequent &lt;code&gt;selection&lt;/code&gt; is just an unnecessary middle-men.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.select&lt;/code&gt; can be avoided, as many posted already, by directly working with the already existing objects, which allows various indirect referencing like calculating i and j in a complex way and then editing cell(i,j), etc.&lt;/p&gt;\n\n&lt;p&gt;Otherwise, there is nothing implicitly wrong with &lt;code&gt;.select&lt;/code&gt; itself and you can find uses for this easily, e.g. I have a spreadsheet that I populate with date, activate macro that does some magic with it and exports it in an acceptable format on a separate sheet, which, however, requires some final manual (unpredictable) inputs into an adjacent cell. So here comes the moment for &lt;code&gt;.select&lt;/code&gt; that saves me that additional mouse movement and click.&lt;/p&gt;\n    ","\n&lt;p&gt;To avoid using the &lt;code&gt;.Select&lt;/code&gt; method, you can set a variable equal to the property that you want.&lt;/p&gt;\n&lt;p&gt; For instance, if you want the value in &lt;code&gt;Cell A1&lt;/code&gt; you could set a variable equal to the value property of that cell.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Example &lt;code&gt;valOne = Range(&quot;A1&quot;).Value&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt; For instance, if you want the codename of &apos;Sheet3&lt;code&gt;you could set a variable equal to the&lt;/code&gt;Codename` property of that worksheet.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Example &lt;code&gt;valTwo = Sheets(&quot;Sheet3&quot;).Codename&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;How to avoid copy-paste?&lt;/h1&gt;\n&lt;p&gt;Let&apos;s face it: this one appears a lot when recording macros:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Copy\nRange(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y9).Select\nSelection.Paste\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While the only thing the person wants is:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y9&quot;&lt;/span&gt;).Value = Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X1&quot;&lt;/span&gt;).Value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Therefore, instead of using copy-paste in VBA macros, I&apos;d advise the following simple approach:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Destination_Range.Value = Source_Range.Value\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I noticed that none of these answers mention the &lt;a href=&quot;https://msdn.microsoft.com/en-us/vba/excel-vba/articles/range-offset-property-excel&quot; rel=&quot;noreferrer&quot;&gt;.Offset Property&lt;/a&gt;. This also can be used to avoid using the &lt;code&gt;Select&lt;/code&gt; action when manipulating certain cells, particularly in reference to a selected cell (as the OP mentions with &lt;code&gt;ActiveCell&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Here are a couple examples.&lt;/p&gt;\n\n&lt;p&gt;I will also assume the &quot;ActiveCell&quot; is &lt;strong&gt;J4&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(2, 0).Value = 12&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will change the cell &lt;code&gt;J6&lt;/code&gt; to be a value of 12 &lt;/li&gt;\n&lt;li&gt;A minus -2 would have referenced J2&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(0,1).Copy ActiveCell.Offset(,2)&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will copy the cell in &lt;code&gt;k4&lt;/code&gt; to &lt;code&gt;L4&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Note that &quot;0&quot; is not needed in the offset parameter if not needed (,2)&lt;/li&gt;\n&lt;li&gt;Similar to the previous example a minus 1 would be &lt;code&gt;i4&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;ActiveCell.Offset(, -1).EntireColumn.ClearContents&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This will clear values in all cells in the column k.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These aren&apos;t to say they are &quot;better&quot; than the above options, but just listing alternatives.&lt;/p&gt;\n    ","\n&lt;p&gt;The main reason never to use Select or Activesheet is because most people will have at least another couple of workbooks open (sometimes dozens) when they run your macro, and if they click away from your sheet while your macro is running and click on some other book they have open, then the &quot;Activesheet&quot; changes, and the target workbook for an unqualified &quot;Select&quot; command changes as well.&lt;/p&gt;\n&lt;p&gt;At best, your macro will crash, at worst you might end up writing values or changing cells in the wrong workbook with no way to &quot;Undo&quot; them.&lt;/p&gt;\n&lt;p&gt;I have a simple golden rule that I follow: Add variables named &quot;wb&quot; and &quot;ws&quot; for a Workbook object and a Worksheet object and always use those to refer to my macro book. If I need to refer to more than one book, or more than one sheet, I add more variables.&lt;/p&gt;\n&lt;p&gt;For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; wb &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Workbook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; ws &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Worksheet\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; wb = ThisWorkBook\n&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; ws = wb.sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Output&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &quot;Set wb = ThisWorkbook&quot; command is absolutely key. &quot;ThisWorkbook&quot; is a special value in Excel, and it means the workbook that your VBA code is &lt;em&gt;currently running from&lt;/em&gt;. A very helpful shortcut to set your Workbook variable with.&lt;/p&gt;\n&lt;p&gt;After you&apos;ve done that at the top of your Sub, using them could not be simpler, just use them wherever you would use &quot;Selection&quot;:&lt;/p&gt;\n&lt;p&gt;So to change the value of cell &quot;A1&quot; in &quot;Output&quot; to &quot;Hello&quot;, instead of:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Output&quot;&lt;/span&gt;).Activate\nActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nSelection.Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can now do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;ws.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;).Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which is not only much more reliable and less likely to crash if the user is working with multiple spreadsheets; it&apos;s also much shorter, quicker and easier to write.&lt;/p&gt;\n&lt;p&gt;As an added bonus, if you &lt;em&gt;always&lt;/em&gt; name your variables &quot;wb&quot; and &quot;ws&quot;, you can copy and paste code from one book to another and it will usually work with minimal changes needed, if any.&lt;/p&gt;\n    ","\n&lt;p&gt;Working with the &lt;em&gt;.Parent&lt;/em&gt; feature, this example shows how setting only one myRng reference enables dynamic access to the entire environment without  any .Select, .Activate, .Activecell, .ActiveWorkbook, .ActiveSheet and so on. (There isn&apos;t any generic &lt;em&gt;.Child&lt;/em&gt; feature.)&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; ShowParents()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myRng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myRng = ActiveCell\n    Debug.Print myRng.Address                    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; An address of the selected cell&lt;/span&gt;\n    Debug.Print myRng.Parent.name                &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of sheet, where MyRng is in&lt;/span&gt;\n    Debug.Print myRng.Parent.Parent.name         &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of workbook, where MyRng is in&lt;/span&gt;\n    Debug.Print myRng.Parent.Parent.Parent.name  &lt;span class=&quot;hljs-comment&quot;&gt;&apos; The name of application, where MyRng is in&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; You may use this feature to set reference to these objects&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; mySh  &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myWbk &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Workbook\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myApp &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Application\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; mySh = myRng.Parent\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myWbk = myRng.Parent.Parent\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; myApp = myRng.Parent.Parent.Parent\n    Debug.Print mySh.name, mySh.Cells(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value\n    Debug.Print myWbk.name, myWbk.Sheets.Count\n    Debug.Print myApp.name, myApp.Workbooks.Count\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos; You may use dynamically addressing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; myRng\n        .Copy\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Pastes in D1 on sheet 2 in the same workbook, where the copied cell is&lt;/span&gt;\n        .Parent.Parent.Sheets(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D1&quot;&lt;/span&gt;).PasteSpecial xlValues\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or myWbk.Sheets(2).Range(&quot;D1&quot;).PasteSpecial xlValues&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; We may dynamically call active application too&lt;/span&gt;\n        .Parent.Parent.Parent.CutCopyMode = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;&apos; Or myApp.CutCopyMode = False&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an example that will clear the contents of cell &quot;A1&quot; (or more if the selection type is xllastcell, etc.). All done without having to select the cells.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;Application.&lt;span class=&quot;hljs-keyword&quot;&gt;GoTo&lt;/span&gt; Reference:=Workbook(WorkbookName).Worksheets(WorksheetName).Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\nRange(Selection,selection(selectiontype)).clearcontents \n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":18,"title":"How to avoid using Select in Excel VBA","content":"\n                \n&lt;p&gt;I&apos;ve heard much about the understandable abhorrence of using &lt;code&gt;.Select&lt;/code&gt; in Excel VBA, but I am unsure of how to avoid using it. I am finding that my code would be more re-usable if I were able to use variables instead of &lt;code&gt;Select&lt;/code&gt; functions. However, I am not sure how to refer to things (like the &lt;code&gt;ActiveCell&lt;/code&gt;, etc.) if not using &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I have found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa139976%28v=office.10%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;this article on ranges&lt;/a&gt; and &lt;a href=&quot;http://www.businessprogrammer.com/201105/power-excel-vba-secret-avoid-using-select/&quot; rel=&quot;noreferrer&quot;&gt;this example on the benefits of not using select&lt;/a&gt;, but I can&apos;t find anything on &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;\n    ","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300","postType":"QUESTION","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","tags":[{"id":59,"name":"excel","slug":"excel","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","Questions_Tags":{"questionId":18,"tagId":59}},{"id":60,"name":"vba","slug":"vba","createdAt":"2022-07-09T16:31:26.000Z","updatedAt":"2022-07-09T16:31:26.000Z","Questions_Tags":{"questionId":18,"tagId":60}}],"relatedQuestions":[{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300","tags":[{"name":"excel","Questions_Tags":{"questionId":18,"tagId":59}},{"name":"vba","Questions_Tags":{"questionId":18,"tagId":60}}]}]},"randomQuestions":[{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"WebDriverWait not working as expected","slug":"webdriverwait-not-working-as-expected-1657387373148"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420"},{"title":"How to format numbers as currency strings","slug":"how-to-format-numbers-as-currency-strings-1657388399166"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"Get the values from the \"GET\" parameters (JavaScript) [duplicate]","slug":"get-the-values-from-the-\"get\"-parameters-(javascript)-duplicate-1657387656693"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"},{"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187"},{"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"}]},"__N_SSG":true}