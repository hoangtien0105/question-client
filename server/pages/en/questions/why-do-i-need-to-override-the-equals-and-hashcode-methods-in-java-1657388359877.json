{"pageProps":{"data":{"answer":["\n&lt;p&gt;Joshua Bloch says on Effective Java&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Let&apos;s try to understand it with an example of what would happen if we override &lt;code&gt;equals()&lt;/code&gt; without overriding &lt;code&gt;hashCode()&lt;/code&gt; and attempt to use a &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Say we have a class like this and that two objects of &lt;code&gt;MyClass&lt;/code&gt; are equal if their &lt;code&gt;importantField&lt;/code&gt; is equal (with &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; generated by eclipse)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String importantField;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String anotherField;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String equalField, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String anotherField)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.importantField = equalField;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.anotherField = anotherField;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        result = prime * result\n                + ((importantField == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : importantField.hashCode());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MyClass) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (importantField == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other.importantField != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!importantField.equals(other.importantField))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Imagine you have this&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Override only &lt;code&gt;equals&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If only &lt;code&gt;equals&lt;/code&gt; is overriden, then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; first will hash to some bucket and when you call &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt; it will hash to some other bucket (as they have a different &lt;code&gt;hashCode&lt;/code&gt;). So, although they are equal, as they don&apos;t hash to the same bucket, the map can&apos;t realize it and both of them stay in the map.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Although it is not necessary to override &lt;code&gt;equals()&lt;/code&gt; if we override &lt;code&gt;hashCode()&lt;/code&gt;, let&apos;s see what would happen in this particular case where we know that two objects of &lt;code&gt;MyClass&lt;/code&gt; are equal if their &lt;code&gt;importantField&lt;/code&gt; is equal but we do not override &lt;code&gt;equals()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Override only &lt;code&gt;hashCode&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you only override &lt;code&gt;hashCode&lt;/code&gt; then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; it takes first, calculates its &lt;code&gt;hashCode&lt;/code&gt; and stores it in a given bucket. Then when you call &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt; it should replace first with second  as per the &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html#put%28java.lang.Object,%20java.lang.Object%29&quot; rel=&quot;noreferrer&quot;&gt;Map Documentation&lt;/a&gt; because they are equal (according to the business requirement).&lt;/p&gt;\n&lt;p&gt;But the problem is that equals was not redefined, so when the map hashes &lt;code&gt;second&lt;/code&gt; and iterates through the bucket looking if there is an object &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;second.equals(k)&lt;/code&gt; is true it won&apos;t find any as &lt;code&gt;second.equals(first)&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Hope it was clear&lt;/p&gt;\n    ","\n&lt;p&gt;Collections such as &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;HashSet&lt;/code&gt; use a &lt;em&gt;hashcode&lt;/em&gt; value of an object to determine how it should be stored inside a collection, and the &lt;em&gt;hashcode&lt;/em&gt; is used again in order to locate the object\nin its collection.&lt;/p&gt;\n\n&lt;p&gt;Hashing retrieval is a two-step process:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Find the right bucket (using &lt;code&gt;hashCode()&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Search the bucket for the right element (using &lt;code&gt;equals()&lt;/code&gt; )&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is a small example on why we should overrride &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashcode()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Consider an &lt;code&gt;Employee&lt;/code&gt; class which has two fields: age and name.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n\n    String name;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; age;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Employee))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; employee.getAge() == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getAge()\n                &amp;amp;&amp;amp; employee.getName() == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getName();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// commented    &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*  @Override\n        public int hashCode() {\n            int result=17;\n            result=31*result+age;\n            result=31*result+(name!=null ? name.hashCode():0);\n            return result;\n        }\n     */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now create a class, insert &lt;code&gt;Employee&lt;/code&gt; object into a &lt;code&gt;HashSet&lt;/code&gt; and test whether that object is present or not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClientTest&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n\n        HashSet&amp;lt;Employee&amp;gt; employees = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;Employee&amp;gt;();\n        employees.add(employee);\n        System.out.println(employees.contains(employee2));\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;employee.hashCode():  &quot;&lt;/span&gt; + employee.hashCode()\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  employee2.hashCode():&quot;&lt;/span&gt; + employee2.hashCode());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will print the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nemployee.hashCode():  &lt;span class=&quot;hljs-number&quot;&gt;321755204&lt;/span&gt;  employee2.hashCode():&lt;span class=&quot;hljs-number&quot;&gt;375890482&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now uncomment &lt;code&gt;hashcode()&lt;/code&gt; method , execute the same and the output would be: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nemployee.hashCode():  -&lt;span class=&quot;hljs-number&quot;&gt;938387308&lt;/span&gt;  employee2.hashCode():-&lt;span class=&quot;hljs-number&quot;&gt;938387308&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now can you see why if two objects are considered equal, their &lt;em&gt;hashcode&lt;/em&gt;s must\nalso be equal? Otherwise, you&apos;d never be able to find the object since the default\n&lt;em&gt;hashcode&lt;/em&gt; method in class Object virtually always comes up with a unique number\nfor each object, even if the &lt;code&gt;equals()&lt;/code&gt; method is overridden in such a way that two\nor more objects are considered equal. It doesn&apos;t matter how equal the objects are if\ntheir &lt;em&gt;hashcode&lt;/em&gt;s don&apos;t reflect that. So one more time: If two objects are equal, their\n&lt;em&gt;hashcode&lt;/em&gt;s must be equal as well.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;You must override hashCode() in every\nclass that overrides equals(). Failure\nto do so will result in a violation of\nthe general contract for\nObject.hashCode(), which will prevent\nyour class from functioning properly\nin conjunction with all hash-based\ncollections, including HashMap,\nHashSet, and Hashtable.&lt;/p&gt;\n&lt;p&gt;&lt;br&gt; &amp;nbsp; &amp;nbsp;from &lt;em&gt;Effective Java&lt;/em&gt;, by Joshua Bloch&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;By defining &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; consistently, you can improve the usability of your classes as keys in hash-based collections. As the API doc for hashCode explains: &quot;This method is supported for the benefit of hashtables such as those provided by &lt;code&gt;java.util.Hashtable&lt;/code&gt;.&quot;&lt;/p&gt;\n&lt;p&gt;The best answer to your question about how to implement these methods efficiently is suggesting you to read Chapter 3 of &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0134685997&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Java&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Identity is not equality.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;equals operator &lt;code&gt;==&lt;/code&gt; test identity.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;equals(Object obj)&lt;/code&gt; method compares equality test(i.e. we need to tell equality by overriding the method)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Why do I need to override the equals and hashCode methods in Java?   &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;First we have to understand the use of equals method.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In order to identity differences between two objects we need to override equals method.   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Customer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=customer1;\ncustomer1.equals(customer2); &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by JVM. i.e. both are refering same Object&lt;/span&gt;\n------------------------------\nCustomer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\ncustomer1.equals(customer2); &lt;span class=&quot;hljs-comment&quot;&gt;//return false by JVM i.e. we have two different peter customers.&lt;/span&gt;\n\n------------------------------\nNow I have overriden Customer &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;equals&lt;/span&gt; method as follows:\n &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)   &lt;span class=&quot;hljs-comment&quot;&gt;// it checks references&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// checks null&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass()) &lt;span class=&quot;hljs-comment&quot;&gt;// both object are instances of same class or not&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Customer) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other.name != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!name.equals(other.name)) &lt;span class=&quot;hljs-comment&quot;&gt;// it again using bulit in String object equals to identify the difference &lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; \n    }\nCustomer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nInsteady identify the Object equality by JVM, we can &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; it by overring equals method.\ncustomer1.equals(customer2);  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by our own logic&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Now hashCode method can understand easily.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;hashCode produces integer in order to store object in data structures like &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;HashSet&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Assume we have override equals method of &lt;code&gt;Customer&lt;/code&gt; as above, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;customer1.equals(customer2);  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by our own logic&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While working with data structure when we store object in buckets(bucket is a fancy name for folder). If we use built-in hash technique, for above two customers it generates two different hashcode. So we are storing the same identical object in two different places. To avoid this kind of issues we should override the hashCode method also based on the following principles.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;un-equal instances may have same hashcode.&lt;/li&gt;\n&lt;li&gt;equal instances should return same hashcode.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Why we override &lt;code&gt;equals()&lt;/code&gt; method&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In Java we can not overload how operators like ==, +=, -+ behave. They are behaving a certain way. So let&apos;s focus on the operator == for our case here.&lt;/p&gt;\n&lt;p&gt;How operator == works.&lt;/p&gt;\n&lt;p&gt;It checks if 2 references that we compare point to the same instance in memory. Operator &lt;code&gt;==&lt;/code&gt; will resolve to true only if those 2 references represent the same instance in memory.&lt;/p&gt;\n&lt;p&gt;So now let&apos;s consider the following example&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer age;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n    \n      ..getters, setters, constructors\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So let&apos;s say that in your program you have built 2 Person objects on different places and you wish to compare them.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\nSystem.out.println ( person1 == person2 );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Those 2 objects from business perspective look the same right? For JVM they are not the same. Since they are both created with &lt;code&gt;new&lt;/code&gt; keyword those instances are located in different segments in memory. Therefore the operator == will return &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;But if we can not override the == operator how can we say to JVM that we want those 2 objects to be treated as same. There comes the &lt;code&gt;.equals()&lt;/code&gt; method in play.&lt;/p&gt;\n&lt;p&gt;You can override &lt;code&gt;equals()&lt;/code&gt; to check if some objects have same values for specific fields to be considered equal.&lt;/p&gt;\n&lt;p&gt;You can select which fields you want to be compared. If we say that 2 Person objects will be the same if and only if they have the same age and same name, then the IDE will create something like the following for automatic generation of equals()&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || getClass() != o.getClass()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) o;\n        &lt;span class=&quot;hljs-type&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person.age &amp;amp;&amp;amp;\n                name.equals(person.name);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s go back to our previous example&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    System.out.println ( person1 == person2 );   --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!\n    System.out.println ( person1.equals(person2) );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So we can not overload == operator to compare objects the way we want but Java gave us another way, the &lt;code&gt;equals()&lt;/code&gt; method, which we can override as we want.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Keep in mind&lt;/strong&gt; however, if we don&apos;t provide our custom version of &lt;code&gt;.equals()&lt;/code&gt; (aka override) in our class then the predefined &lt;code&gt;.equals()&lt;/code&gt; from Object class and &lt;code&gt;==&lt;/code&gt; operator will behave exactly the same.&lt;/p&gt;\n&lt;p&gt;Default &lt;code&gt;equals()&lt;/code&gt; method which is inherited from Object will check whether both compared instances are the same in memory!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why we override &lt;code&gt;hashCode()&lt;/code&gt; method&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Some Data Structures in java like HashSet, HashMap store their elements based on a hash function which is applied on those elements. The hashing function is the &lt;code&gt;hashCode()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If we have a choice of overriding &lt;code&gt;.equals()&lt;/code&gt; method then we must also have a choice of overriding &lt;code&gt;hashCode()&lt;/code&gt; method. There is a reason for that.&lt;/p&gt;\n&lt;p&gt;Default implementation of &lt;code&gt;hashCode()&lt;/code&gt; which is inherited from Object considers all objects in memory unique!&lt;/p&gt;\n&lt;p&gt;Let&apos;s get back to those hash data structures. There is a rule for those data structures.&lt;/p&gt;\n&lt;p&gt;HashSet can not contain duplicate values and HashMap can not contain duplicate keys&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;HashSet is implemented with a HashMap behind the scenes where each value of a HashSet is stored as a key in a HashMap.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;So we have to understand how a HashMap works.&lt;/p&gt;\n&lt;p&gt;In a simple way a HashMap is a native array that has some buckets. Each bucket has a linkedList. In that linkedList our keys are stored. HashMap locates the correct linkedList for each key by applying &lt;code&gt;hashCode()&lt;/code&gt; method and after that it iterates through all elements of that linkedList and applies &lt;code&gt;equals()&lt;/code&gt; method on each of these elements to check if that element is already contained there. No duplicate keys are allowed.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aMwel.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aMwel.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;When we put something inside a HashMap, the key is stored in one of those linkedLists. In which linkedList that key will be stored is shown by the result of &lt;code&gt;hashCode()&lt;/code&gt; method on that key. So if &lt;code&gt;key1.hashCode()&lt;/code&gt; has as a result 4, then that key1 will be stored on the 4th bucket of the array, in the linkedList that exists there.&lt;/p&gt;\n&lt;p&gt;By default &lt;code&gt;hashCode()&lt;/code&gt; method returns a different result for each different instance. If we have the default &lt;code&gt;equals()&lt;/code&gt; which behaves like == which considers all instances in memory as different objects we don&apos;t have any problem.&lt;/p&gt;\n&lt;p&gt;But in our previous example we said we want Person instances to be considered equal if their ages and names match.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    System.out.println ( person1.equals(person2) );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s create a map to store those instances as keys with some string as pair value&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;Person, String&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(person1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\nmap.put(person2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Person class we have not overridden the &lt;code&gt;hashCode&lt;/code&gt; method but we have overridden &lt;code&gt;equals&lt;/code&gt; method. Since the default &lt;code&gt;hashCode&lt;/code&gt; provides different results for different java instances &lt;code&gt;person1.hashCode()&lt;/code&gt; and &lt;code&gt;person2.hashCode()&lt;/code&gt; have big chances of having different results.&lt;/p&gt;\n&lt;p&gt;Our map might end with those persons in different linkedLists.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/TOSNY.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/TOSNY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This is against the logic of a HashMap&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A HashMap is not allowed to have multiple equal keys!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;But ours now has and the reason is that the default &lt;code&gt;hashCode()&lt;/code&gt; which was inherited from Object Class was not enough. Not after we have overridden the &lt;code&gt;equals()&lt;/code&gt; method on Person Class.&lt;/p&gt;\n&lt;p&gt;That is the reason why we must override &lt;code&gt;hashCode()&lt;/code&gt; method after we have overridden &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s fix that. Let&apos;s override our &lt;code&gt;hashCode()&lt;/code&gt; method to consider the same fields that &lt;code&gt;equals()&lt;/code&gt; considers, namely &lt;code&gt;age, name&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer age;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n    \n      ..getters, setters, constructors\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || getClass() != o.getClass()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) o;\n        &lt;span class=&quot;hljs-type&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person.age &amp;amp;&amp;amp;\n                name.equals(person.name);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Objects.hash(name, age);\n    }\n\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s try again to save those keys in our HashMap&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;Person, String&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(person1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\nmap.put(person2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;person1.hashCode()&lt;/code&gt; and &lt;code&gt;person2.hashCode()&lt;/code&gt; will definitely be the same. Let&apos;s say it is 0.&lt;/p&gt;\n&lt;p&gt;HashMap will go to bucket 0 and in that LinkedList will save the person1 as key with the value &quot;1&quot;. For the second put HashMap is intelligent enough and when it goes again to bucket 0 to save person2 key with value &quot;2&quot; it will see that another equal key already exists there. So it will overwrite the previous key. So in the end only person2 key will exist in our HashMap.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/i7hek.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/i7hek.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now we are aligned with the rule of Hash Map that says no multiple equal keys are allowed!&lt;/p&gt;\n    ","\n&lt;p&gt;Simply put, the equals-method in Object check for reference equality, where as two instances of your class could still be semantically equal when the properties are equal. This is for instance important when putting your objects into a container that utilizes equals and hashcode, like &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html&quot; rel=&quot;noreferrer&quot; title=&quot;HashMap.java&quot;&gt;HashMap&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Set.html&quot; rel=&quot;noreferrer&quot; title=&quot;Set.java&quot;&gt;Set&lt;/a&gt;. Let&apos;s say we have a class like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    String id;\n    String whatevs;\n\n    Foo(String id, String whatevs) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.whatevs = whatevs;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We create two instances with the same &lt;strong&gt;id&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;something else&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without overriding equals we are getting:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;a.equals(b) is false because they are two different instances&lt;/li&gt;\n&lt;li&gt;a.equals(a) is true since it&apos;s the same instance&lt;/li&gt;\n&lt;li&gt;b.equals(b) is true since it&apos;s the same instance&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Correct? Well maybe, if this is what you want. But let&apos;s say we want objects with the same id to be the same object, regardless if it&apos;s two different instances. We override the equals (and hashcode):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    String id;\n    String whatevs;\n\n    Foo(String id, String whatevs) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.whatevs = whatevs;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object other)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Foo) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((Foo)other).id.equals(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id);   \n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id.hashCode();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As for implementing equals and hashcode I can recommend using &lt;a href=&quot;http://code.google.com/p/guava-libraries/wiki/CommonObjectUtilitiesExplained&quot; rel=&quot;noreferrer&quot;&gt;Guava&apos;s helper methods&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let me explain the concept in very simple words.&lt;/p&gt;\n&lt;p&gt;Firstly from a broader perspective we have collections, and hashmap is one of the datastructure in the collections.&lt;/p&gt;\n&lt;p&gt;To understand why we have to override the both equals and hashcode method, if need to first understand what is hashmap and what is does.&lt;/p&gt;\n&lt;p&gt;A hashmap is a datastructure which stores key value pairs of data in array fashion. Lets say a[], where each element in &apos;a&apos; is a key value pair.&lt;/p&gt;\n&lt;p&gt;Also each index in the above array can be linked list thereby having more than one values at one index.&lt;/p&gt;\n&lt;p&gt;Now why is a hashmap used?&lt;/p&gt;\n&lt;p&gt;If we have to search among  a large array then searching through each if them will not be efficient, so what hash technique tells us that lets pre process the array with some logic and group the elements based on that logic i.e. Hashing&lt;/p&gt;\n&lt;p&gt;EG: we have array 1,2,3,4,5,6,7,8,9,10,11 and we apply a hash function mod 10 so 1,11 will be grouped in together. So if we had to search for 11 in previous array then we would have to iterate the complete array but when we group it we limit our scope of iteration thereby improving speed. That datastructure used to store all the above information can be thought of as a 2d array for simplicity&lt;/p&gt;\n&lt;p&gt;Now apart from the above hashmap also tells that it wont add any Duplicates in it. And this is the main reason why we have to override the equals and hashcode&lt;/p&gt;\n&lt;p&gt;So when its said that explain the internal working of hashmap , we need to find what methods the hashmap has and how does it follow the above rules which i explained above&lt;/p&gt;\n&lt;p&gt;so the hashmap has method called as put(K,V) , and according to hashmap it should follow the above rules of efficiently distributing the array and not adding any duplicates&lt;/p&gt;\n&lt;p&gt;so what put does is that it will first generate the hashcode for the given key to decide which index the value should go in.if nothing is present at that index then the new value will be added over there, if something is already present over there then the new value should be added after the end of the linked list at that index. but remember no duplicates should be added as per the desired behavior of the hashmap. so lets say you have two Integer objects aa=11,bb=11.&lt;/p&gt;\n&lt;p&gt;As every object derived from the object class, the default implementation for comparing two objects is that it compares the reference and not values inside the object. So in the above case both though semantically equal will fail the equality test, and possibility that two objects which same hashcode and same values will exists thereby creating duplicates. If we override then we could avoid adding duplicates.\nYou could also refer to &lt;a href=&quot;http://howtodoinjava.com/2012/10/09/how-hashmap-works-in-java/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Detail working&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n    String name;\n    String mobile;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name,String mobile)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mobile = mobile;\n    }\n    \n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;calling hascode method of Employee&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; str.length(); i++) {\n            sum = sum + str.charAt(i);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sum;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;calling equals method of Employee&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mobile.equalsIgnoreCase(emp.mobile)) {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;returning true&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;returning false&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hhh&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hhh&quot;&lt;/span&gt;);\n        HashMap&amp;lt;Employee, Employee&amp;gt; h = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;//for (int i = 0; i &amp;lt; 5; i++) {&lt;/span&gt;\n            h.put(emp, emp);\n            h.put(emp2, emp2);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//}&lt;/span&gt;\n        \n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------------&quot;&lt;/span&gt;);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;size of hashmap: &quot;&lt;/span&gt;+h.size());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt; :&lt;/p&gt;\n&lt;p&gt;If you only override the hash-code method nothing happens, because it always returns a new &lt;code&gt;hashCode&lt;/code&gt; for each object as an Object class.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; :&lt;/p&gt;\n&lt;p&gt;If you only override the equals method, if &lt;code&gt;a.equals(b)&lt;/code&gt; is true it means the &lt;code&gt;hashCode&lt;/code&gt; of a and b must be the same but that does not happen since you did not override the &lt;code&gt;hashCode&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;Note :  &lt;code&gt;hashCode()&lt;/code&gt; method of Object class always returns a new &lt;code&gt;hashCode&lt;/code&gt; for each object.&lt;/p&gt;\n&lt;p&gt;So when you need to use your object in the hashing based collection, you must override both &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Java puts a rule that &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;If two objects are equal using Object class equals method, then the hashcode method should give the same value for these two objects.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, if in our class we override &lt;code&gt;equals()&lt;/code&gt; we should override &lt;code&gt;hashcode()&lt;/code&gt; method also to follow this rule.\nBoth methods, &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashcode()&lt;/code&gt;, are used in &lt;code&gt;Hashtable&lt;/code&gt;, for example, to store values as key-value pairs. If we override one and not the other, there is a possibility that the &lt;code&gt;Hashtable&lt;/code&gt; may not work as we want, if we use such object as a key.&lt;/p&gt;\n    ","\n&lt;p&gt;Because if you do not override them you will be use the default implentation in Object.&lt;/p&gt;\n\n&lt;p&gt;Given that instance equality and hascode values generally require knowledge of what makes up an object they generally will need to be redefined in your class to have any tangible meaning.&lt;/p&gt;\n    ","\n&lt;p&gt;In order to use our own class objects as keys in collections like HashMap, Hashtable etc.. , we should override both methods ( hashCode() and equals() ) by having an awareness on internal working of collection. Otherwise, it leads to wrong results which we are not expected.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding to @Lombo &apos;s answer&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;When will you need to override equals() ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The default implementation of Object&apos;s equals() is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which means two objects will be considered equal only if they have the same memory address which will be true only if you are\ncomparing an object with itself.&lt;/p&gt;\n\n&lt;p&gt;But you might want to consider two objects the same if they have the same value for one\nor more of their properties (Refer the example given in @Lombo &apos;s answer). &lt;/p&gt;\n\n&lt;p&gt;So you will override &lt;code&gt;equals()&lt;/code&gt; in these situations and you would give your own conditions for equality.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;I have successfully implemented equals() and it is working great.So why are they asking to override hashCode() as well?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Well.As long as you don&apos;t use &lt;em&gt;&quot;Hash&quot; based Collections&lt;/em&gt; on your user-defined class,it is fine.\nBut some time in the future you might want to use &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt; and if you don&apos;t &lt;code&gt;override&lt;/code&gt; and &lt;em&gt;&quot;correctly implement&quot; hashCode()&lt;/em&gt;, these Hash based collection won&apos;t work as intended.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Override only equals (Addition to @Lombo &apos;s answer)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;myMap.put(first,someValue)\nmyMap.contains(second); --&amp;gt; But it should be the same since the key are the same.But returns &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!!! How?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First of all,HashMap checks if the hashCode of &lt;code&gt;second&lt;/code&gt; is the same as &lt;code&gt;first&lt;/code&gt;.\nOnly if the values are the same,it will proceed to check the equality in the same bucket.&lt;/p&gt;\n\n&lt;p&gt;But here the hashCode is different for these 2 objects (because they have different memory address-from default implementation).\nHence it will not even care to check for equality.&lt;/p&gt;\n\n&lt;p&gt;If you have a breakpoint inside your overridden equals() method,it wouldn&apos;t step in if they have different hashCodes.\n&lt;code&gt;contains()&lt;/code&gt; checks &lt;code&gt;hashCode()&lt;/code&gt; and only if they are the same it would call your &lt;code&gt;equals()&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why can&apos;t we make the HashMap check for equality in all the buckets? So there is no necessity for me to override hashCode() !!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Then you are missing the point of Hash based Collections.\nConsider the following :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Your &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; implementation : intObject%&lt;span class=&quot;hljs-number&quot;&gt;9.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following are the keys stored in the form of buckets.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Bucket &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,... (in thousands)\nBucket &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;29.&lt;/span&gt;..\nBucket &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,...\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Say,you want to know if the map contains the key 10.\nWould you want to search all the buckets? or Would you want to search only one bucket?&lt;/p&gt;\n\n&lt;p&gt;Based on the hashCode,you would identify that if 10 is present,it must be present in Bucket 1.\nSo only Bucket 1 will be searched !!&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Hashing Algorithm&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; even number &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Equals Algorithm,&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.i &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;put(&apos;key&apos;,&apos;value&apos;) will calculate the hash value using &lt;code&gt;hashCode()&lt;/code&gt; to determine the\nbucket and uses &lt;code&gt;equals()&lt;/code&gt; method to find whether the value is already\npresent in the Bucket. If not it will added else it will be replaced with current value&lt;/li&gt;\n&lt;li&gt;get(&apos;key&apos;) will use &lt;code&gt;hashCode()&lt;/code&gt; to find the Entry (bucket) first and\n&lt;code&gt;equals()&lt;/code&gt; to find the value in Entry&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;if Both are overridden,&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,...\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if equals is not overridden&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,...,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,... &lt;span class=&quot;hljs-comment&quot;&gt;// Duplicate values as equals not overridden&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,...,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If hashCode is not overridden&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Same values are Stored in different hasCodes violates Contract 1&lt;/span&gt;\nSo on...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;HashCode Equal Contract&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Two keys equal according to equal method should generate same hashCode&lt;/li&gt;\n&lt;li&gt;Two Keys generating same hashCode need not be equal (In above example all even numbers generate same hash Code)&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;1) &lt;strong&gt;The common mistake is shown in the example below.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String color;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String color)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color = color;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj==&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Car))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;   \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color.equals(((Car) obj).color);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//hashMap stores Car type and its quantity&lt;/span&gt;\n        HashMap&amp;lt;Car, Integer&amp;gt; m = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;Car, Integer&amp;gt;();\n        m.put(a1, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n        m.put(a2, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\n        System.out.println(m.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;)));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the green Car is not found&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Problem caused by hashCode()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The problem is caused by the un-overridden method &lt;code&gt;hashCode()&lt;/code&gt;. The contract between &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If two objects are equal, then they must have the same hash code.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If two objects have the same hash code, they may or may not be equal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color.hashCode(); \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;It is useful when using &lt;a href=&quot;http://wiki.c2.com/?ValueObject&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Value Objects&lt;/strong&gt;&lt;/a&gt;. The following is an excerpt from the &lt;a href=&quot;http://wiki.c2.com/?PortlandPatternRepository&quot; rel=&quot;nofollow noreferrer&quot;&gt;Portland Pattern Repository&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Examples of value objects are things\n  like numbers, dates, monies and\n  strings. Usually, they are small\n  objects which are used quite widely.\n  Their identity is based on their state\n  rather than on their object identity.\n  This way, you can have multiple copies\n  of the same conceptual value object.&lt;/p&gt;\n  \n  &lt;p&gt;So I can have multiple copies of an\n  object that represents the date 16 Jan\n  1998. Any of these copies will be equal to each other. For a small\n  object such as this, it is often\n  easier to create new ones and move\n  them around rather than rely on a\n  single object to represent the date.&lt;/p&gt;\n  \n  &lt;p&gt;A value object should always override\n  .equals() in Java (or = in Smalltalk).\n  (Remember to override .hashCode() as\n  well.)&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Assume you have class (A) that aggregates two other (B) (C), and you need to store instances of (A) inside hashtable. Default implementation only allows distinguishing of instances, but not by (B) and (C). So two instances of A could be equal, but default wouldn&apos;t allow you to compare them in correct way.  &lt;/p&gt;\n    ","\n&lt;p&gt;Consider collection of balls in a bucket all in black color. Your Job is to color those balls as follows and use it for appropriate game,&lt;/p&gt;\n\n&lt;p&gt;For Tennis - Yellow, Red.\nFor Cricket - White&lt;/p&gt;\n\n&lt;p&gt;Now bucket has balls in three colors Yellow, Red and White. And that now &lt;strong&gt;you did the coloring Only you know which color is for which game.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Coloring the balls - Hashing.\nChoosing the ball for game - Equals.&lt;/p&gt;\n\n&lt;p&gt;If you did the coloring and some one chooses the ball for either cricket or tennis they wont mind the color!!!&lt;/p&gt;\n    ","\n&lt;p&gt;I was looking into the explanation &quot; If you only override hashCode then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; it takes first, calculates its hashCode and stores it in a given bucket. Then when you call &lt;code&gt;myMap.put(first,someOtherValue)&lt;/code&gt; it should replace first with second as per the Map Documentation because they are equal (according to our definition).&quot; :&lt;/p&gt;\n\n&lt;p&gt;I think 2nd time when we are adding in &lt;code&gt;myMap&lt;/code&gt; then it should be the &apos;second&apos; object like &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The methods equals and hashcode are defined in the object class. By default if the equals method returns true, then the system will go further and check the value of the hash code. If the hash code of the 2 objects is also same only then the objects will be considered as same. So if you override only equals method, then even though the overridden equals method indicates 2 objects to be equal , the system defined hashcode may not indicate that the 2 objects are equal. So we need to override hash code as well.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Equals and Hashcode methods in Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;They are methods of java.lang.Object class which is the super class of all the classes (custom classes as well and others defined in java API).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;public boolean equals(Object obj)&lt;/p&gt;\n  \n  &lt;p&gt;public int hashCode()&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0aaFt.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/0aaFt.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;public boolean equals(Object obj)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This method simply checks if two object references x and y refer to the same object. i.e. It checks if x == y.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is reflexive:&lt;/em&gt; for any reference value x, x.equals(x) should return true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is symmetric:&lt;/em&gt; for any reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is transitive:&lt;/em&gt; for any reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is consistent:&lt;/em&gt; for any reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the object is modified.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For any non-null reference value x, x.equals(null) should return\n  false.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;public int hashCode()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This method returns the hash code value for the object on which this method is invoked. This method returns the hash code value as an integer and is supported for the benefit of hashing based collection classes such as Hashtable, HashMap, HashSet etc. This method must be overridden in every class that overrides the equals method.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The general contract of hashCode is:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. &lt;/p&gt;\n\n&lt;p&gt;This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/p&gt;\n\n&lt;p&gt;If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.&lt;/p&gt;\n\n&lt;p&gt;It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Equal objects must produce the same hash code as long as they are\n  equal, however unequal objects need not produce distinct hash codes.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Resources: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.javaranch.com/journal/2002/10/equalhash.html&quot; rel=&quot;noreferrer&quot;&gt;JavaRanch&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.google.co.in/imgres?imgurl=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfAlRR2p9Le0%2Fmaxresdefault.jpg&amp;amp;imgrefurl=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfAlRR2p9Le0&amp;amp;docid=tHx46In-72mrAM&amp;amp;tbnid=VTZXQ9fiF-XDcM%3A&amp;amp;w=1280&amp;amp;h=720&amp;amp;bih=678&amp;amp;biw=1319&amp;amp;ved=0ahUKEwiQj-fBuePOAhXHq48KHY8VBt4QMwgmKAgwCA&amp;amp;iact=mrc&amp;amp;uact=8&quot; rel=&quot;noreferrer&quot;&gt;Picture&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you override &lt;code&gt;equals()&lt;/code&gt; and not &lt;code&gt;hashcode()&lt;/code&gt;, you will not find any problem unless you or someone else uses that class type in a hashed collection like &lt;code&gt;HashSet&lt;/code&gt;.\nPeople before me have clearly explained the documented theory multiple times, I am just here to provide a very simple example.&lt;/p&gt;\n\n&lt;p&gt;Consider a class whose &lt;code&gt;equals()&lt;/code&gt; need to mean something customized :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String rshv;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Rishav&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String rshv)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv = rshv;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/**\n        * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; the rshv\n        */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getRshv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rshv;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/**\n        * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; rshv the rshv to set\n        */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setRshv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String rshv)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv = rshv;\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Rishav) {\n                obj = (Rishav) obj;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv.equals(((Rishav) obj).getRshv())) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            }\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rshv.hashCode();\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now consider this main class :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashSet;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Set;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestRishav&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;Rishav&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rA&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rishav&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;Rishav&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rB&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rishav&quot;&lt;/span&gt;);\n            System.out.println(rA.equals(rB));\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----------------------------------&quot;&lt;/span&gt;);\n\n            Set&amp;lt;Rishav&amp;gt; hashed = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;&amp;gt;();\n            hashed.add(rA);\n            System.out.println(hashed.contains(rB));\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----------------------------------&quot;&lt;/span&gt;);\n\n            hashed.add(rB);\n            System.out.println(hashed.size());\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will yield the following output :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am happy with the results. But if I have not overridden &lt;code&gt;hashCode()&lt;/code&gt;, it will cause nightmare as objects of &lt;code&gt;Rishav&lt;/code&gt; with same member content will no longer be treated as unique as the &lt;code&gt;hashCode&lt;/code&gt; will be different, as generated by default behavior, here&apos;s the would be output :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In the example below, if you comment out the override for equals or hashcode in the Person class, this code will fail to look up Tom&apos;s order. Using the default implementation of hashcode can cause failures in hashtable lookups.&lt;/p&gt;\n\n&lt;p&gt;What I have below is a simplified code that pulls up people&apos;s order by Person. Person is being used as a key in the hashtable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n    String name;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\n    String socialSecurityNumber;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age, String socialSecurityNumber)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.socialSecurityNumber = socialSecurityNumber;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object p)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Person is same if social security number is same&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((p &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Person) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.socialSecurityNumber.equals(((Person) p).socialSecurityNumber)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {        &lt;span class=&quot;hljs-comment&quot;&gt;//I am using a hashing function in String.java instead of writing my own.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; socialSecurityNumber.hashCode();\n    }\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt; {\n    String[]  items;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;insertOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[]  items)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.items=items;\n    }\n\n}\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Hashtable;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Main&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n       Person p1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;548-56-4412&quot;&lt;/span&gt;);\n        Person p2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jerry&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;456-74-4125&quot;&lt;/span&gt;);\n        Person p3=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sherry&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;418-55-1235&quot;&lt;/span&gt;);\n\n        Order order1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order1.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouse&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;car charger&quot;&lt;/span&gt;});\n\n        Order order2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order2.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;Multi vitamin&quot;&lt;/span&gt;});\n\n        Order order3=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order3.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;handbag&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;iPod&quot;&lt;/span&gt;});\n\n        Hashtable&amp;lt;Person,Order&amp;gt; hashtable=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hashtable&lt;/span&gt;&amp;lt;Person,Order&amp;gt;();\n        hashtable.put(p1,order1);\n        hashtable.put(p2,order2);\n        hashtable.put(p3,order3);\n\n       &lt;span class=&quot;hljs-comment&quot;&gt;//The line below will fail if Person class does not override hashCode()&lt;/span&gt;\n       Order tomOrder= hashtable.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;548-56-4412&quot;&lt;/span&gt;));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item:tomOrder.items)\n        {\n            System.out.println(item);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt; method is used to get a unique integer for given object. This integer is used for determining the bucket location, when this object needs to be stored in some &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; like data structure. By default, Objects &lt;code&gt;hashCode()&lt;/code&gt; method returns and integer representation of memory address where object is stored.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; method of objects is used when we insert them into a &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt;. More about &lt;code&gt;HashTables&lt;/code&gt; on Wikipedia.org for reference.&lt;/p&gt;\n\n&lt;p&gt;To insert any entry in map data structure, we need both key and value. If both key and values are user define data types, the &lt;code&gt;hashCode()&lt;/code&gt; of the key will be determine where to store the object internally. When require to lookup the object from the map also, the hash code of the key will be determine where to search for the object.&lt;/p&gt;\n\n&lt;p&gt;The hash code only points to a certain &quot;area&quot; (or list, bucket etc) internally. Since different key objects could potentially have the same hash code, the hash code itself is no guarantee that the right key is found. The &lt;code&gt;HashTable&lt;/code&gt; then iterates this area (all keys with the same hash code) and uses the key&apos;s &lt;code&gt;equals()&lt;/code&gt; method to find the right key. Once the right key is found, the object stored for that key is returned.&lt;/p&gt;\n\n&lt;p&gt;So, as we can see, a combination of the &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; methods are used when storing and when looking up objects in a &lt;code&gt;HashTable&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;NOTES:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Always use same attributes of an object to generate &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; both. As in our case, we have used employee id.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; must be consistent (if the objects are not modified, then it must keep returning the same value).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Whenever &lt;code&gt;a.equals(b)&lt;/code&gt;, then &lt;code&gt;a.hashCode()&lt;/code&gt; must be same as &lt;code&gt;b.hashCode()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you override one, then you should override the other.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://parameshk.blogspot.in/2014/10/examples-of-comparable-comporator.html&quot; rel=&quot;nofollow&quot;&gt;http://parameshk.blogspot.in/2014/10/examples-of-comparable-comporator.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;String class and wrapper classes have different implementation of &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods than Object class. equals() method of Object class compares the references of the objects, not the contents. hashCode() method of Object class returns distinct hashcode for every single object whether the contents are same.&lt;/p&gt;\n\n&lt;p&gt;It leads problem when you use Map collection and the key is of Persistent type, StringBuffer/builder type. Since they don&apos;t override equals() and hashCode() unlike String class, equals() will return false when you compare two different objects even though both have same contents. It will make the hashMap storing same content keys. Storing same content keys means it is violating the rule of Map because Map doesnt allow duplicate keys at all.\nTherefore you override equals() as well as hashCode() methods in your class and provide the implementation(IDE can generate these methods) so that they work same as String&apos;s equals() and hashCode() and prevent same content keys. &lt;/p&gt;\n\n&lt;p&gt;You have to override hashCode() method along with equals() because equals() work according hashcode. &lt;/p&gt;\n\n&lt;p&gt;Moreover overriding hashCode() method along with equals() helps to intact the equals()-hashCode() contract: &quot;If two objects are equal, then they must have the same hash code.&quot;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;When do you need to write custom implementation for hashCode()?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As we know that internal working of HashMap is on principle of Hashing. There are certain buckets where entrysets get stored. You customize the hashCode() implementation according your requirement so that same category objects can be stored into same index. \nwhen you store the values into Map collection using &lt;code&gt;put(k,v)&lt;/code&gt;method, the internal implementation of put() is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;put(k, v){\nhash(k);\nindex=hash &amp;amp; (n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Means, it generates index and the index is generated based on the hashcode of particular key object. So make this method generate hashcode according your requirement because same hashcode entrysets will be stored into same bucket or index. &lt;/p&gt;\n\n&lt;p&gt;That&apos;s it!&lt;/p&gt;\n    ","\n&lt;p&gt;IMHO, it&apos;s as per the rule says - If two objects are equal then they should have same hash, i.e., equal objects should produce equal hash values.&lt;/p&gt;\n\n&lt;p&gt;Given above, default equals() in Object is == which does comparison on the address, hashCode() returns the address in integer(hash on actual address) which is again distinct for distinct Object.&lt;/p&gt;\n\n&lt;p&gt;If you need to use the custom Objects in the Hash based collections, you need to override both equals() and hashCode(), example If I want to maintain the HashSet of the Employee Objects, if I don&apos;t use stronger hashCode and equals I may endup overriding the two different Employee Objects, this happen when I use the age as the hashCode(), however I should be using the unique value which can be the Employee ID.&lt;/p&gt;\n    ","\n&lt;h2&gt;To help you check for duplicate Objects, we need a custom equals and hashCode.&lt;/h2&gt;\n\n&lt;p&gt;Since hashcode always returns a number its always fast to retrieve an object using a number rather than an alphabetic key. &lt;strong&gt;How will it do?&lt;/strong&gt; Assume we created a new object by passing some value which is already available in some other object. Now the new object will return the same hash value as of another object because the value passed is same. Once the same hash value is returned, JVM will go to the same memory address every time and if in case there are more than one objects present for the same hash value it will use equals() method to identify the correct object.&lt;/p&gt;\n    ","\n&lt;p&gt;When you want to store and retrieve your custom object as a key in Map, then you should always override equals and hashCode in your custom Object .\nEg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;HashMap&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(p1,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value 1&quot;&lt;/span&gt;);\nmap.put(p2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value 2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here p1 &amp;amp; p2 will consider as only one object and &lt;code&gt;map&lt;/code&gt; size will be only 1 because they are equal.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String empName;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId, String empName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empId = empId;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empName = empName;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getEmpId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empId;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setEmpId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empId = empId;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getEmpName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empName;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setEmpName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String empName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empName = empName;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Employee [empId=&quot;&lt;/span&gt; + empId + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, empName=&quot;&lt;/span&gt; + empName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empId + empName.hashCode();\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Employee)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getEmpId() == emp.getEmpId() &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getEmpName().equals(emp.getEmpName());\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test Class &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Manash&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Manash&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;103&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ranjan&quot;&lt;/span&gt;);\n        System.out.println(emp1.hashCode());\n        System.out.println(emp2.hashCode());\n        System.out.println(emp1.equals(emp2));\n        System.out.println(emp1.equals(emp3));\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Object Class equals(Object obj) is used to compare address comparesion thats why when in Test class if you compare two objects then equals method giving false but when we override hashcode() the it can compare content and give proper result.&lt;/p&gt;\n    ","\n&lt;p&gt;Both the methods are defined in Object class. And both are in its simplest implementation. So when you need you want add some more implementation to these methods then you have override in  your class. &lt;/p&gt;\n\n&lt;p&gt;For Ex: equals() method in object only checks its equality on the reference. So if you need compare its state as well then you can override that as it is done in String class.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s no mention in this answer of testing the equals/hashcode contract.&lt;/p&gt;\n&lt;p&gt;I&apos;ve found the &lt;a href=&quot;https://github.com/jqno/equalsverifier&quot; rel=&quot;nofollow noreferrer&quot;&gt;EqualsVerifier&lt;/a&gt; library to be very useful and comprehensive. It is also very easy to use.&lt;/p&gt;\n&lt;p&gt;Also, building &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods from scratch involves a lot of boilerplate code. The &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons Lang&lt;/a&gt; library provides the &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;EqualsBuilder&lt;/a&gt; and &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;HashCodeBuilder&lt;/a&gt; classes. These classes greatly simplify implementing &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods for complex classes.&lt;/p&gt;\n&lt;p&gt;As an aside, it&apos;s worth considering overriding the &lt;code&gt;toString()&lt;/code&gt; method to aid debugging. &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons Lang&lt;/a&gt; library provides the &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/index.html?org/apache/commons/lang3/builder/HashCodeBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ToStringBuilder&lt;/a&gt; class to help with this.&lt;/p&gt;\n    "],"id":539,"title":"Why do I need to override the equals and hashCode methods in Java?","content":"\n                \n&lt;p&gt;Recently I read through this\n&lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-jtp05273.html&quot; rel=&quot;noreferrer&quot;&gt; Developer Works Document&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;The document is all about defining &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; effectively and correctly, however I am not able to figure out why we need to override these two methods. &lt;/p&gt;\n\n&lt;p&gt;How can I take the decision to implement these methods efficiently?&lt;/p&gt;\n    ","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877","postType":"QUESTION","createdAt":"2022-07-09T17:39:19.000Z","updatedAt":"2022-07-09T17:39:19.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I list all files of a directory?","slug":"how-do-i-list-all-files-of-a-directory-1657388340404"},{"title":"Is there a \"previous sibling\" selector?","slug":"is-there-a-\"previous-sibling\"-selector-1657384771067"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"},{"title":"What is a lambda expression in C++11?","slug":"what-is-a-lambda-expression-in-c++11-1657387999252"},{"title":"Get selected value in dropdown list using JavaScript","slug":"get-selected-value-in-dropdown-list-using-javascript-1657387631638"},{"title":"Post an HTML Table to ADO.NET DataTable","slug":"post-an-html-table-to-ado.net-datatable-1657387462723"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"How to count the number of set bits in a 32-bit integer?","slug":"how-to-count-the-number-of-set-bits-in-a-32-bit-integer-1657388437370"},{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"Convert form data to JavaScript object with jQuery","slug":"convert-form-data-to-javascript-object-with-jquery-1657388036834"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"Removing trailing newline character from fgets() input","slug":"removing-trailing-newline-character-from-fgets()-input-1657387308069"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"How to check whether a string contains a substring in JavaScript?","slug":"how-to-check-whether-a-string-contains-a-substring-in-javascript-1657388080698"},{"title":"Is it safe to expose Firebase apiKey to the public?","slug":"is-it-safe-to-expose-firebase-apikey-to-the-public-1657388268111"},{"title":"How to join (merge) data frames (inner, outer, left, right)","slug":"how-to-join-(merge)-data-frames-(inner-outer-left-right)-1657384406445"},{"title":"What does it mean to \"program to an interface\"?","slug":"what-does-it-mean-to-\"program-to-an-interface\"-1657384671665"}]},"__N_SSG":true}