{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Yes, it&apos;s possible. Just implement &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)&quot;&gt;getItemViewType()&lt;/a&gt;, and take care of the &lt;code&gt;viewType&lt;/code&gt; parameter in &lt;code&gt;onCreateViewHolder()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So you do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n        ...\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolder0&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt;{\n        ...\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n        ...\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolder2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt;{\n        ...\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Just as an example, return 0 or 2 depending on position&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Note that unlike in ListView adapters, types don&apos;t have to be contiguous&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; position % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (viewType) {\n             &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder0&lt;/span&gt;(...);\n             &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder2&lt;/span&gt;(...);\n             ...\n         }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (holder.getItemViewType()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                &lt;span class=&quot;hljs-type&quot;&gt;ViewHolder0&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;viewHolder0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ViewHolder0)holder;\n                ...\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n                &lt;span class=&quot;hljs-type&quot;&gt;ViewHolder2&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;viewHolder2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ViewHolder2)holder;\n                ...\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the layouts for view types are only a few and binding logics are simple, follow &lt;a href=&quot;https://stackoverflow.com/questions/26245139/how-to-create-recyclerview-with-multiple-view-types/26245463#26245463&quot;&gt;Anton&apos;s solution&lt;/a&gt;. But the code will be messy if you need to manage the complex layouts and binding logics.&lt;/p&gt;\n&lt;p&gt;I believe the following solution will be useful for someone who need to handle complex view types.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Base DataBinder class&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataBinder&lt;/span&gt;&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; DataBindAdapter mDataBindAdapter;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DataBinder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(DataBindAdapter dataBindAdapter)&lt;/span&gt; {\n        mDataBindAdapter = dataBindAdapter;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;hljs-title function_&quot;&gt;newViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n\n......\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The functions needed to define in this class are pretty much same as the adapter class when creating the single view type.&lt;/p&gt;\n&lt;p&gt;For each view type, create the class by extending this DataBinder.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Sample DataBinder class&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sample1Binder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataBinder&lt;/span&gt;&amp;lt;Sample1Binder.ViewHolder&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; mDataSet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Sample1Binder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(DataBindAdapter dataBindAdapter)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(dataBindAdapter);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;newViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(parent.getContext()).inflate(\n            R.layout.layout_sample1, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt;(view);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewHolder holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mDataSet.get(position);\n        holder.mTitleText.setText(title);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mDataSet.size();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDataSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;String&amp;gt; dataSet)&lt;/span&gt; {\n        mDataSet.addAll(dataSet);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView mTitleText;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View view)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(view);\n            mTitleText = (TextView) view.findViewById(R.id.title_type1);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In order to manage DataBinder classes, create an adapter class.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Base DataBindAdapter class&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataBindAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getDataBinder(viewType).newViewHolder(parent);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RecyclerView.ViewHolder viewHolder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;binderPosition&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getBinderPosition(position);\n        getDataBinder(viewHolder.getItemViewType()).bindViewHolder(viewHolder, binderPosition);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataBinder&lt;/span&gt;&amp;gt; T &lt;span class=&quot;hljs-title function_&quot;&gt;getDataBinder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(DataBinder binder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; binderPosition)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getBinderPosition&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;;\n\n......\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create the class by extending this base class, and then instantiate DataBinder classes and override abstract methods&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;getItemCount &lt;br&gt;\nReturn the total item count of DataBinders&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;getItemViewType &lt;br&gt;\nDefine the mapping logic between the adapter position and view type.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;getDataBinder &lt;br&gt;\nReturn the DataBinder instance based on the view type&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;getPosition &lt;br&gt;\nDefine convert logic to the adapter position from the position in the specified DataBinder&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;getBinderPosition &lt;br&gt;\nDefine convert logic to the position in the DataBinder from the adapter position&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;I left a more detailed solution and samples on GitHub, so please refer to &lt;em&gt;&lt;a href=&quot;https://github.com/yqritc/RecyclerView-MultipleViewTypesAdapter&quot; rel=&quot;noreferrer&quot;&gt;RecyclerView-MultipleViewTypeAdapter&lt;/a&gt;&lt;/em&gt; if you need.&lt;/p&gt;\n    ","\n&lt;p&gt;The below is not pseudocode. I have tested it and it has worked for me.&lt;/p&gt;\n&lt;p&gt;I wanted to create a headerview in my recyclerview and then display a list of pictures below the header which the user can click on.&lt;/p&gt;\n&lt;p&gt;I used a few switches in my code and don&apos;t know if that is the most efficient way to do this, so feel free to give your comments:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder{\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//These are the general elements in the RecyclerView&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TextView place;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ImageView pics;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//This is the Header on the Recycler (viewType = 0)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TextView name, description;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//This constructor would switch what to findViewBy according to the type of viewType&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(v);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                name = (TextView) v.findViewById(R.id.name);\n                decsription = (TextView) v.findViewById(R.id.description);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                place = (TextView) v.findViewById(R.id.place);\n                pics = (ImageView) v.findViewById(R.id.pics);\n            }\n        }\n    }\n\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent,\n                                         &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt;\n    {\n        View v;\n        ViewHolder vh;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// create a new view&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (viewType) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;//This would be the header view in my Recycler&lt;/span&gt;\n                v = LayoutInflater.from(parent.getContext())\n                    .inflate(R.layout.recyclerview_welcome, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n                vh = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt;(v,viewType);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  vh;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;//This would be the normal list with the pictures of the places in the world&lt;/span&gt;\n                v = LayoutInflater.from(parent.getContext())\n                        .inflate(R.layout.recyclerview_picture, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n                vh = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt;(v, viewType);\n                v.setOnClickListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener(){\n\n                    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(mContext, nextActivity.class);\n                        intent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ListNo&quot;&lt;/span&gt;,mRecyclerView.getChildPosition(v));\n                        mContext.startActivity(intent);\n                    }\n                });\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; vh;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Overridden so that I can display custom rows in the recyclerview&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;viewType&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//Default is 1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) viewType = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//If zero, it will be a header view&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; viewType;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewHolder holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//position == 0 means it&apos;s the info header view on the Recycler&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            holder.name.setOnClickListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener() {\n                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n                    Toast.makeText(mContext,&lt;span class=&quot;hljs-string&quot;&gt;&quot;name clicked&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();\n                }\n            });\n            holder.description.setOnClickListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener() {\n                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n                    Toast.makeText(mContext,&lt;span class=&quot;hljs-string&quot;&gt;&quot;description clicked&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();\n                }\n            });\n            &lt;span class=&quot;hljs-comment&quot;&gt;//This means it is beyond the headerview now as it is no longer 0. For testing purposes, I&apos;m alternating between two pics for now&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n           holder.place.setText(mDataset[position]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n               holder.pics.setImageDrawable(mContext.getResources().getDrawable(R.drawable.pic1));\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                holder.pics.setImageDrawable(mContext.getResources().getDrawable(R.drawable.pic2));\n            }\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Create a different ViewHolder for different layouts&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/nvYCw.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nvYCw.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;RecyclerView can have any number of viewholders you want, but for better readability lets see how to create one with two ViewHolders.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It can be done in three simple steps&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Override &lt;code&gt;public int getItemViewType(int position)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Return different ViewHolders based on the ViewType in &lt;code&gt;onCreateViewHolder()&lt;/code&gt; method&lt;/li&gt;\n&lt;li&gt;Populate View based on the itemViewType in &lt;code&gt;onBindViewHolder()&lt;/code&gt; method&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Here is a small code snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;YourListAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt; {\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;LAYOUT_ONE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;LAYOUT_TWO&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;\n   {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(position==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LAYOUT_ONE;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LAYOUT_TWO;\n   }\n\n   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n      RecyclerView.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;viewHolder&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(viewType==LAYOUT_ONE)\n      {\n          view = LayoutInflater.from(parent.getContext()).inflate(R.layout.one,parent,&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n          viewHolder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolderOne&lt;/span&gt;(view);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      {\n          view = LayoutInflater.from(parent.getContext()).inflate(R.layout.two,parent,&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n          viewHolder= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolderTwo&lt;/span&gt;(view);\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; viewHolder;\n   }\n\n   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(holder.getItemViewType() == LAYOUT_ONE)\n      {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Typecast Viewholder&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Set Viewholder properties&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Add any click listener if any&lt;/span&gt;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;ViewHolderOne&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vaultItemHolder&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ViewHolderOne) holder;\n        vaultItemHolder.name.setText(displayText);\n        vaultItemHolder.name.setOnClickListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener() {\n           &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n           &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n            .......\n           }\n         });\n       }\n   }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//****************  VIEW HOLDER 1 ******************//&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolderOne&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TextView name;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolderOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n         &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n         name = (TextView)itemView.findViewById(R.id.displayName);\n     }\n   }\n\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//****************  VIEW HOLDER 2 ******************//&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolderTwo&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolderTwo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n         &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n\n        ..... Do something\n      }\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;getItemViewType(int position) is the key.&lt;/h3&gt;\n&lt;p&gt;In my opinion, the starting point to create this kind of recyclerView is the knowledge of this method. Since this method is optional to override, it is not visible in RecylerView class by default which in turn makes many developers (including me) wonder where to begin.&lt;/p&gt;\n&lt;p&gt;Once you know that this method exists, creating such RecyclerView would be a cakewalk.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Let&apos;s see one example to prove my point. If you want to show two layout\nat alternate positions do this&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(position%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)       &lt;span class=&quot;hljs-comment&quot;&gt;// Even position&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LAYOUT_ONE;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;                   &lt;span class=&quot;hljs-comment&quot;&gt;// Odd position&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LAYOUT_TWO;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Relevant Links:&lt;/h3&gt;\n&lt;p&gt;Check out &lt;a href=&quot;https://github.com/rohitksingh/OLA_Play_Music_App/blob/master/OlaPlay/app/src/main/java/rohksin/com/olaplay/Adapters/MusicAdapter.java&quot; rel=&quot;nofollow noreferrer&quot;&gt;the project&lt;/a&gt; where I have implemented this.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it is possible.&lt;/p&gt;\n\n&lt;p&gt;Write a generic view holder:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GenericViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDataOnView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then create your view holders and make them extend the GenericViewHolder. For example, this one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SectionViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GenericViewHolder&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; View mView;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; TextView dividerTxtV;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SectionViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n        mView = itemView;\n        dividerTxtV = (TextView) mView.findViewById(R.id.dividerTxtV);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDataOnView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            String title= sections.get(position);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(title!= &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.dividerTxtV.setText(title);\n        }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error!&quot;&lt;/span&gt;+e.getMessage(), &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, e);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then the RecyclerView.Adapter class will look like this one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClassRecyclerViewAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter&amp;lt;MyClassRecyclerViewAdapter.GenericViewHolder&amp;gt; {\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// depends on your problem&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (position) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE1;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE2;\n         ...\n     }\n}\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; GenericViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt;  {\n    View view;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(viewType == VIEW_TYPE1){\n        view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout1, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SectionViewHolder&lt;/span&gt;(view);\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( viewType == VIEW_TYPE2){\n        view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout2, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OtherViewHolder&lt;/span&gt;(view);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Cont. other view holders ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n   }\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(GenericViewHolder holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    holder.setDataOnView(position);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a complete sample to show a RecyclerView with two types, the view type decided by the object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Class model&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;open &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerViewItem&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SectionItem&lt;/span&gt;(val title: String) : RecyclerViewItem()\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContentItem&lt;/span&gt;(val name: String, val number: Int) : RecyclerViewItem()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Adapter&lt;/strong&gt; code&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;const &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;VIEW_TYPE_SECTION&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nconst &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;VIEW_TYPE_ITEM&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserAdapter&lt;/span&gt; : RecyclerView.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt;() {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; listOf&amp;lt;RecyclerViewItem&amp;gt;()\n\n    override fun &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(position: Int)&lt;/span&gt;: Int {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data[position] is SectionItem) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE_SECTION\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE_ITEM\n    }\n\n    override fun &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;: Int {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.size\n    }\n\n    override fun &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(parent: ViewGroup, viewType: Int)&lt;/span&gt;: RecyclerView.ViewHolder {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == VIEW_TYPE_SECTION) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SectionViewHolder(\n                LayoutInflater.from(parent.context).inflate(R.layout.item_user_section, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n            )\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ContentViewHolder(\n            LayoutInflater.from(parent.context).inflate(R.layout.item_user_content, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        )\n    }\n\n    override fun &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(holder: RecyclerView.ViewHolder, position: Int)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data[position]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder is SectionViewHolder &amp;amp;&amp;amp; item is SectionItem) {\n            holder.bind(item)\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder is ContentViewHolder &amp;amp;&amp;amp; item is ContentItem) {\n            holder.bind(item)\n        }\n    }\n\n    internal inner &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SectionViewHolder&lt;/span&gt;(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        fun &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(item: SectionItem)&lt;/span&gt; {\n            itemView.text_section.text = item.title\n        }\n    }\n\n    internal inner &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContentViewHolder&lt;/span&gt;(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        fun &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(item: ContentItem)&lt;/span&gt; {\n            itemView.text_name.text = item.name\n            itemView.text_number.text = item.number.toString()\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;item_user_section.xml&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;\n&amp;lt;TextView xmlns:android=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;\n    android:id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@+id/text_section&quot;&lt;/span&gt;\n    android:layout_width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;\n    android:layout_height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;\n    android:background=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#eee&quot;&lt;/span&gt;\n    android:padding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;16dp&quot;&lt;/span&gt; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;item_user_content.xml&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;\n&amp;lt;LinearLayout xmlns:android=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;\n    xmlns:tools=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;\n    android:layout_width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;\n    android:layout_height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;\n    android:orientation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;horizontal&quot;&lt;/span&gt;\n    android:padding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32dp&quot;&lt;/span&gt;&amp;gt;\n\n    &amp;lt;TextView\n        android:id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@+id/text_name&quot;&lt;/span&gt;\n        android:layout_width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;\n        android:layout_height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;\n        tools:text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt; /&amp;gt;\n\n    &amp;lt;TextView\n        android:id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@+id/text_number&quot;&lt;/span&gt;\n        android:layout_width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;\n        android:layout_height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;\n\n&amp;lt;/LinearLayout&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example using&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dataSet&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arrayListOf&amp;lt;RecyclerViewItem&amp;gt;(\n    SectionItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;),\n\n    SectionItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A2&quot;&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;21&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;22&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;),\n\n    SectionItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A3&quot;&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;31&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;33&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;),\n    ContentItem(&lt;span class=&quot;hljs-string&quot;&gt;&quot;33&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;),\n)\n\nrecyclerAdapter.data = dataSet\nrecyclerAdapter.notifyDataSetChanged()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/ihugr.png&quot; height=&quot;300&quot;&gt;\n    ","\n&lt;p&gt;Yes, it is possible.&lt;/p&gt;\n&lt;p&gt;In your adapter getItemViewType Layout like this ....&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MultiViewTypeAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;Model&amp;gt;dataSet;\n    Context mContext;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; total_types;\n    MediaPlayer mPlayer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fabStateVolume&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TextTypeViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView txtType;\n        CardView cardView;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TextTypeViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.txtType = (TextView) itemView.findViewById(R.id.type);\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.cardView = (CardView) itemView.findViewById(R.id.card_view);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageTypeViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView txtType;\n        ImageView image;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ImageTypeViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.txtType = (TextView) itemView.findViewById(R.id.type);\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.image = (ImageView) itemView.findViewById(R.id.background);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AudioTypeViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView txtType;\n        FloatingActionButton fab;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AudioTypeViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.txtType = (TextView) itemView.findViewById(R.id.type);\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.fab = (FloatingActionButton) itemView.findViewById(R.id.fab);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MultiViewTypeAdapter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ArrayList&amp;lt;Model&amp;gt;data, Context context)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.dataSet = data;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mContext = context;\n        total_types = dataSet.size();\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n\n        View view;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (viewType) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.TEXT_TYPE:\n                view = LayoutInflater.from(parent.getContext()).inflate(R.layout.text_type, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TextTypeViewHolder&lt;/span&gt;(view);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.IMAGE_TYPE:\n                view = LayoutInflater.from(parent.getContext()).inflate(R.layout.image_type, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageTypeViewHolder&lt;/span&gt;(view);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.AUDIO_TYPE:\n                view = LayoutInflater.from(parent.getContext()).inflate(R.layout.audio_type, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AudioTypeViewHolder&lt;/span&gt;(view);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (dataSet.get(position).type) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Model.TEXT_TYPE;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Model.IMAGE_TYPE;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Model.AUDIO_TYPE;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; listPosition)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dataSet.get(listPosition);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (object.type) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.TEXT_TYPE:\n                    ((TextTypeViewHolder) holder).txtType.setText(object.text);\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.IMAGE_TYPE:\n                    ((ImageTypeViewHolder) holder).txtType.setText(object.text);\n                    ((ImageTypeViewHolder) holder).image.setImageResource(object.data);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; Model.AUDIO_TYPE:\n\n                    ((AudioTypeViewHolder) holder).txtType.setText(object.text);\n\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataSet.size();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For the reference link: &lt;em&gt;&lt;a href=&quot;https://www.journaldev.com/12372/android-recyclerview-example&quot; rel=&quot;nofollow noreferrer&quot;&gt;Android RecyclerView Example  Multiple ViewTypes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Simpler than ever, forget about ViewTypes. It is not recommended to use multiple viewtypes inside one adapter. It will mess the code and break the single responsibility principle since now the adapter needs to handle logic to know which view to inflate.&lt;/p&gt;\n&lt;p&gt;Now imagine working in large teams where each team has to work in one of those viewtypes features. It will be a mess to touch the same adapter by all the teams that work in the different viewtypes. This is solved using ConcatAdapter where you isolate the adapters. Code them one by one and then just merge them inside one view.&lt;/p&gt;\n&lt;p&gt;From &lt;code&gt;recyclerview:1.2.0-alpha04&lt;/code&gt; you now can use &lt;code&gt;ConcatAdapter&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If you need a view with different viewTypes, you can just write the Adapters for each section and just use ConcatAdapter to merge all of them inside one recyclerview.&lt;/p&gt;\n&lt;h2&gt;ConcatAdapter&lt;/h2&gt;\n&lt;p&gt;This image shows three different viewtypes that one recyclerview has, header, content and footer.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qdlpN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qdlpN.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;You only create one adapter for each section, and then just use ConcatAdapter to merge them inside one recyclerview:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;val firstAdapter: FirstAdapter = \nval secondAdapter: SecondAdapter = \nval thirdAdapter: ThirdAdapter = \n&lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;concatAdapter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ConcatAdapter(firstAdapter, secondAdapter,\n                                  thirdAdapter)\nrecyclerView.adapter = concatAdapter\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/nnWnq.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nnWnq.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;That&apos;s all you need to know. If you want to handle loading state, for example remove the last adapter after some loading happened, you can use &lt;a href=&quot;https://github.com/googlecodelabs/android-paging/pull/46/files&quot; rel=&quot;noreferrer&quot;&gt;LoadState&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Following &lt;a href=&quot;https://stackoverflow.com/questions/26245139/how-to-create-recyclerview-with-multiple-view-types/26245463#26245463&quot;&gt;Anton&apos;s solution&lt;/a&gt;, I came up with this &lt;code&gt;ViewHolder&lt;/code&gt; which holds/handles/delegates different type of layouts.&lt;/p&gt;\n&lt;p&gt;But I am not sure if the replacing new layout would work when the recycling view&apos;s &lt;code&gt;ViewHolder&lt;/code&gt; is not the type of the data roll in.&lt;/p&gt;\n&lt;p&gt;So basically,\n&lt;code&gt;onCreateViewHolder(ViewGroup parent, int viewType)&lt;/code&gt; is only called when new view layout is needed;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;getItemViewType(int position)&lt;/code&gt; will be called for the &lt;code&gt;viewType&lt;/code&gt;;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;onBindViewHolder(ViewHolder holder, int position)&lt;/code&gt; is always called when recycling the view (new data is brought in and try to display with that &lt;code&gt;ViewHolder&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;So when &lt;code&gt;onBindViewHolder&lt;/code&gt; is called it needs to be put in the right view layout and update the &lt;code&gt;ViewHolder&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;TypedData&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mDataSource.get(position);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.type;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent,\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ViewHolder.makeViewHolder(parent, viewType);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewHolder holder,\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;TypedData&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mDataSource.get(position);\n    holder.updateData(data);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;///&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n    ViewGroup mParentViewGroup;\n    View mCurrentViewThisViewHolderIsFor;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mDataType;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TypeOneViewHolder mTypeOneViewHolder;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TypeTwoViewHolder mTypeTwoViewHolder;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;makeViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup vwGrp,\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; dataType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getLayoutView(vwGrp, dataType);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder&lt;/span&gt;(vwGrp, v, viewType);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; View &lt;span class=&quot;hljs-title function_&quot;&gt;getLayoutView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup vwGrp,\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; dataType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;layoutId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getLayoutId(dataType);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LayoutInflater.from(vwGrp.getContext())\n                             .inflate(layoutId, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLayoutId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; dataType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dataType == TYPE_ONE) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R.layout.type_one_layout;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dataType == TYPE_TWO) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R.layout.type_two_layout;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup vwGrp, View v,\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; dataType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(v);\n        mDataType = dataType;\n        mParentViewGroup = vwGrp;\n        mCurrentViewThisViewHolderIsFor = v;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.type == TYPE_ONE) {\n            mTypeOneViewHolder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeOneViewHolder&lt;/span&gt;(v);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.type == TYPE_TWO) {\n            mTypeTwoViewHolder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeTwoViewHolder&lt;/span&gt;(v);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TypeData data)&lt;/span&gt; {\n        mDataType = data.type;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.type == TYPE_ONE) {\n            mTypeTwoViewHolder = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mTypeOneViewHolder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;newView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getLayoutView(mParentViewGroup,\n                               data.type);\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;/**\n                 *  How can I replace a new view with\n                    the view in the parent\n                    view container?\n                 */&lt;/span&gt;\n                replaceView(mCurrentViewThisViewHolderIsFor,\n                            newView);\n                mCurrentViewThisViewHolderIsFor = newView;\n\n                mTypeOneViewHolder =\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeOneViewHolder&lt;/span&gt;(newView);\n            }\n            mTypeOneViewHolder.updateDataTypeOne(data);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.type == TYPE_TWO){\n            mTypeOneViewHolder = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mTypeTwoViewHolder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;newView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getLayoutView(mParentViewGroup,\n                               data.type);\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;/**\n                 *  How can I replace a new view with\n                    the view in the parent view\n                    container?\n                 */&lt;/span&gt;\n                replaceView(mCurrentViewThisViewHolderIsFor,\n                            newView);\n                mCurrentViewThisViewHolderIsFor = newView;\n\n                mTypeTwoViewHolder =\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeTwoViewHolder&lt;/span&gt;(newView);\n            }\n            mTypeTwoViewHolder.updateDataTypeOne(data);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replaceView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View currentView,\n    View newView)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ViewGroup)currentView.getParent();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(parent == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parent.indexOfChild(currentView);\n    parent.removeView(currentView);\n    parent.addView(newView, index);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;ViewHolder has member mItemViewType to hold the view.&lt;/p&gt;\n&lt;p&gt;It looks like in onBindViewHolder(ViewHolder holder, int position) the ViewHolder passed in has been picked up (or created) by looked at getItemViewType(int position) to make sure it is a match, so it may not need to worry there that ViewHolder&apos;s type does not match the data[position]&apos;s type.&lt;/p&gt;\n&lt;p&gt;It looks like The recycle &lt;code&gt;ViewHolder&lt;/code&gt; is picked by type, so no warrior there.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://wiresareobsolete.com/2014/09/building-a-recyclerview-layoutmanager-part-1/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Building a RecyclerView LayoutManager  Part 1&lt;/a&gt;&lt;/em&gt; answers this question.&lt;/p&gt;\n&lt;p&gt;It gets the recycle &lt;code&gt;ViewHolder&lt;/code&gt; like:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;holder = getRecycledViewPool().getRecycledView(mAdapter.getItemViewType(offsetPosition));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or create a new one if not find recycle &lt;code&gt;ViewHolder&lt;/code&gt; of the right type.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;getRecycledView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ArrayList&amp;lt;ViewHolder&amp;gt; scrapHeap = mScrap.get(viewType);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (scrapHeap != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !scrapHeap.isEmpty()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scrapHeap.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scrap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scrapHeap.get(index);\n            scrapHeap.remove(index);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; scrap;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\nView &lt;span class=&quot;hljs-title function_&quot;&gt;getViewForPosition&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; dryRun)&lt;/span&gt; {\n    ......\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;offsetPosition&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mAdapterHelper.findPositionOffset(position);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (offsetPosition &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || offsetPosition &amp;gt;= mAdapter.getItemCount()) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Inconsistency detected. Invalid item &quot;&lt;/span&gt;\n                        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;position &quot;&lt;/span&gt; + position + &lt;span class=&quot;hljs-string&quot;&gt;&quot;(offset:&quot;&lt;/span&gt; + offsetPosition + &lt;span class=&quot;hljs-string&quot;&gt;&quot;).&quot;&lt;/span&gt;\n                        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;state:&quot;&lt;/span&gt; + mState.getItemCount());\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mAdapter.getItemViewType(offsetPosition);\n            &lt;span class=&quot;hljs-comment&quot;&gt;// 2) Find from scrap via stable ids, if exists&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mAdapter.hasStableIds()) {\n                holder = getScrapViewForId(mAdapter.getItemId(offsetPosition), type, dryRun);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// update position&lt;/span&gt;\n                    holder.mPosition = offsetPosition;\n                    fromScrap = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mViewCacheExtension != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// We are NOT sending the offsetPosition because LayoutManager does not&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// know it.&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mViewCacheExtension\n                        .getViewForPositionAndType(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, position, type);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (view != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    holder = getChildViewHolder(view);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getViewForPositionAndType returned&quot;&lt;/span&gt;\n                                + &lt;span class=&quot;hljs-string&quot;&gt;&quot; a view which does not have a ViewHolder&quot;&lt;/span&gt;);\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder.shouldIgnore()) {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getViewForPositionAndType returned&quot;&lt;/span&gt;\n                                + &lt;span class=&quot;hljs-string&quot;&gt;&quot; a view that is ignored. You must call stopIgnoring before&quot;&lt;/span&gt;\n                                + &lt;span class=&quot;hljs-string&quot;&gt;&quot; returning this view.&quot;&lt;/span&gt;);\n                    }\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// fallback to recycler&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// try recycler.&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Head to the shared pool.&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (DEBUG) {\n                    Log.d(TAG, &lt;span class=&quot;hljs-string&quot;&gt;&quot;getViewForPosition(&quot;&lt;/span&gt; + position + &lt;span class=&quot;hljs-string&quot;&gt;&quot;) fetching from shared &quot;&lt;/span&gt;\n                            + &lt;span class=&quot;hljs-string&quot;&gt;&quot;pool&quot;&lt;/span&gt;);\n                }\n                holder = getRecycledViewPool()\n                        .getRecycledView(mAdapter.getItemViewType(offsetPosition));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                    holder.resetInternal();\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (FORCE_INVALIDATE_DISPLAY_LIST) {\n                        invalidateDisplayListInt(holder);\n                    }\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (holder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                holder = mAdapter.createViewHolder(RecyclerView.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,\n                        mAdapter.getItemViewType(offsetPosition));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (DEBUG) {\n                    Log.d(TAG, &lt;span class=&quot;hljs-string&quot;&gt;&quot;getViewForPosition created new ViewHolder&quot;&lt;/span&gt;);\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mState.isPreLayout() &amp;amp;&amp;amp; holder.isBound()) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// do not update unless we absolutely have to.&lt;/span&gt;\n            holder.mPreLayoutPosition = position;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (DEBUG &amp;amp;&amp;amp; holder.isRemoved()) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Removed holder should be bound and it should&quot;&lt;/span&gt;\n                        + &lt;span class=&quot;hljs-string&quot;&gt;&quot; come here only in pre-layout. Holder: &quot;&lt;/span&gt; + holder);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;offsetPosition&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mAdapterHelper.findPositionOffset(position);\n            mAdapter.bindViewHolder(holder, offsetPosition);\n            attachAccessibilityDelegate(holder.itemView);\n            bound = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mState.isPreLayout()) {\n                holder.mPreLayoutPosition = position;\n            }\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ViewGroup.&lt;span class=&quot;hljs-type&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; holder.itemView.getLayoutParams();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; LayoutParams rvLayoutParams;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (lp == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            rvLayoutParams = (LayoutParams) generateDefaultLayoutParams();\n            holder.itemView.setLayoutParams(rvLayoutParams);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!checkLayoutParams(lp)) {\n            rvLayoutParams = (LayoutParams) generateLayoutParams(lp);\n            holder.itemView.setLayoutParams(rvLayoutParams);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            rvLayoutParams = (LayoutParams) lp;\n        }\n        rvLayoutParams.mViewHolder = holder;\n        rvLayoutParams.mPendingInvalidate = fromScrap &amp;amp;&amp;amp; bound;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; holder.itemView;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although the selected answer is correct, I just want to further elaborate it. I found a useful &lt;a href=&quot;https://handyopinion.com/recyclerview-custom-adapter-with-multiple-view-types-in-java-android/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Custom Adapter for multiple View Types in RecyclerView&lt;/a&gt;.\nIts &lt;a href=&quot;https://handyopinion.com/custom-adapter-with-multiple-view-types-for-recyclerview-in-kotlin-android/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kotlin version is here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The custom adapter is the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Context context;\n    ArrayList&amp;lt;String&amp;gt; list; &lt;span class=&quot;hljs-comment&quot;&gt;// ArrayList of your Data Model&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;VIEW_TYPE_ONE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;VIEW_TYPE_TWO&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;CustomAdapter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context, ArrayList&amp;lt;String&amp;gt; list)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// you can pass other parameters in constructor&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.context = context;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.list = list;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView yourView;\n        ViewHolder1(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; View itemView) {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n            yourView = itemView.findViewById(R.id.yourView); &lt;span class=&quot;hljs-comment&quot;&gt;// Initialize your All views prensent in list items&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This method will be called anytime a list item is created or update its data&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Do your stuff here&lt;/span&gt;\n            yourView.setText(list.get(position));\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n        TextView yourView;\n        ViewHolder2(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; View itemView) {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n            yourView = itemView.findViewById(R.id.yourView); &lt;span class=&quot;hljs-comment&quot;&gt;// Initialize your All views prensent in list items&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This method will be called anytime a list item is created or update its data&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Do your stuff here&lt;/span&gt;\n            yourView.setText(list.get(position));\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == VIEW_TYPE_ONE) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder1&lt;/span&gt;(LayoutInflater.from(context).inflate(R.layout.your_list_item_1, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;));\n       }\n       &lt;span class=&quot;hljs-comment&quot;&gt;//if its not VIEW_TYPE_ONE then its VIEW_TYPE_TWO&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewHolder2&lt;/span&gt;(LayoutInflater.from(context).inflate(R.layout.your_list_item_2, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;));\n\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (list.get(position).type == Something) { &lt;span class=&quot;hljs-comment&quot;&gt;// Put your condition, according to your requirements&lt;/span&gt;\n            ((ViewHolder1) holder).bind(position);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            ((ViewHolder2) holder).bind(position);\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list.size();\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Here you can get decide from your model&apos;s ArrayList, which type of view you need to load. Like&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (list.get(position).type == Something) { &lt;span class=&quot;hljs-comment&quot;&gt;// Put your condition, according to your requirements&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE_ONE;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; VIEW_TYPE_TWO;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have a better solution which allows to create multiple view types in a declarative and type safe way. Its written in Kotlin which, by the way, is really nice.&lt;/p&gt;\n&lt;p&gt;Simple view holders for all required view types&lt;/p&gt;\n\n&lt;pre class=&quot;lang-scala s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ViewHolderMedium&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;itemView: &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;(itemView) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; icon: &lt;span class=&quot;hljs-type&quot;&gt;ImageView&lt;/span&gt; = itemView.findViewById(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.icon) as &lt;span class=&quot;hljs-type&quot;&gt;ImageView&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; label: &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; = itemView.findViewById(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.label) as &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is an abstraction of adapter data item. Note that a view type is represented by a hashCode of particular view holder class (KClass in Kotlin)&lt;/p&gt;\n&lt;pre class=&quot;lang-scala s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AdapterItem&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; viewType: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n   fun bindViewHolder(viewHolder: &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AdapterItemBase&amp;lt;T&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val viewHolderClass: &lt;span class=&quot;hljs-type&quot;&gt;KClass&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;) &lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;AdapterItem&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; viewType: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; = viewHolderClass.hashCode()\n   &lt;span class=&quot;hljs-keyword&quot;&gt;abstract&lt;/span&gt; fun bindViewHolder(viewHolder: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun bindViewHolder(viewHolder: &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;) {\n       bindViewHolder(viewHolder as &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;)\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Only &lt;code&gt;bindViewHolder&lt;/code&gt; needs to be overridden in concrete adapter item classes (type safe way).&lt;/p&gt;\n&lt;pre class=&quot;lang-scala s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AdapterItemMedium&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val icon: &lt;span class=&quot;hljs-type&quot;&gt;Drawable&lt;/span&gt;, val label: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, val onClick: (&lt;/span&gt;) &lt;span class=&quot;hljs-title&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Unit&lt;/span&gt;) &lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;AdapterItemBase&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;ViewHolderMedium&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-type&quot;&gt;ViewHolderMedium&lt;/span&gt;::&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun bindViewHolder(viewHolder: &lt;span class=&quot;hljs-type&quot;&gt;ViewHolderMedium&lt;/span&gt;) {\n        viewHolder.icon.setImageDrawable(icon)\n        viewHolder.label.setText(label)\n        viewHolder.itemView.setOnClickListener { onClick() }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;List of such &lt;code&gt;AdapterItemMedium&lt;/code&gt; objects is a data source for the adapter which actually accepts &lt;code&gt;List&amp;lt;AdapterItem&amp;gt;&lt;/code&gt;. See below.&lt;/p&gt;\n&lt;p&gt;The important part of this solution is a view holder factory which will provide fresh instances of a specific ViewHolder:&lt;/p&gt;\n&lt;pre class=&quot;lang-scala s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ViewHolderProvider&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; viewHolderFactories = hashMapOf&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Pair&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Any&lt;/span&gt;&amp;gt;&amp;gt;()\n\n    fun provideViewHolder(viewGroup: &lt;span class=&quot;hljs-type&quot;&gt;ViewGroup&lt;/span&gt;, viewType: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; (layoutId: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;, f: &lt;span class=&quot;hljs-type&quot;&gt;Any&lt;/span&gt;) = viewHolderFactories.get(viewType)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; viewHolderFactory = f as (&lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; view = &lt;span class=&quot;hljs-type&quot;&gt;LayoutInflater&lt;/span&gt;.from(viewGroup.getContext()).inflate(layoutId, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; viewHolderFactory(view)\n    }\n\n    fun registerViewHolderFactory&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;&amp;gt;(key: &lt;span class=&quot;hljs-type&quot;&gt;KClass&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;&amp;gt;, layoutId: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;, viewHolderFactory: (&lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;) {\n        viewHolderFactories.put(key.hashCode(), &lt;span class=&quot;hljs-type&quot;&gt;Pair&lt;/span&gt;(layoutId, viewHolderFactory))\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And the simple adapter class looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-scala s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MultitypeAdapter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val items: &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AdapterItem&lt;/span&gt;&amp;gt;&lt;/span&gt;) &lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Adapter&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;&amp;gt;() {\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; viewHolderProvider = &lt;span class=&quot;hljs-type&quot;&gt;ViewHolderProvider&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// inject ex Dagger2&lt;/span&gt;\n\n   init {\n        viewHolderProvider!!.registerViewHolderFactory(&lt;span class=&quot;hljs-type&quot;&gt;ViewHolderMedium&lt;/span&gt;::&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;R&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;layout&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;item_medium&lt;/span&gt;, &lt;/span&gt;{ itemView -&amp;gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;ViewHolderMedium&lt;/span&gt;(itemView)\n        })\n   }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun getItemViewType(position: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items[position].viewType\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun getItemCount(): &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items.size()\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun onCreateViewHolder(viewGroup: &lt;span class=&quot;hljs-type&quot;&gt;ViewGroup&lt;/span&gt;, viewType: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;? {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; viewHolderProvider!!.provideViewHolder(viewGroup, viewType)\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; fun onBindViewHolder(viewHolder: &lt;span class=&quot;hljs-type&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ViewHolder&lt;/span&gt;, position: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;) {\n        items[position].bindViewHolder(viewHolder)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are &lt;em&gt;only&lt;/em&gt; three steps to create a new view type:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;create a view holder class&lt;/li&gt;\n&lt;li&gt;create an adapter item class (extending from AdapterItemBase)&lt;/li&gt;\n&lt;li&gt;register the view holder class in &lt;code&gt;ViewHolderProvider&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Here is an example of this concept: &lt;a href=&quot;https://github.com/michalfaber/android-drawer-template&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;GitHub&quot;&gt;android-drawer-template&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;It goes even further - a view type which acts as a spinner component, with selectable adapter items.&lt;/p&gt;\n    ","\n&lt;p&gt;It is very simple and straightforward.&lt;/p&gt;\n&lt;p&gt;Just &lt;em&gt;override&lt;/em&gt; the &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)&quot; rel=&quot;nofollow noreferrer&quot;&gt;getItemViewType()&lt;/a&gt; method in your adapter. On the basis of data return different itemViewType values. E.g., consider an object of type Person with a member isMale, if isMale is true, return 1 and isMale is false, return 2 in the &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)&quot; rel=&quot;nofollow noreferrer&quot;&gt;getItemViewType()&lt;/a&gt; method.&lt;/p&gt;\n&lt;p&gt;Now coming to the &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#createViewHolder(android.view.ViewGroup,%20int)&quot; rel=&quot;nofollow noreferrer&quot;&gt;createViewHolder (ViewGroup parent, int viewType)&lt;/a&gt;, on the basis of different viewType yon can inflate the different layout file. Like the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n    &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(parent.getContext()).inflate(R.layout.male, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AdapterMaleViewHolder&lt;/span&gt;(view);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(parent.getContext()).inflate(R.layout.female, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AdapterFemaleViewHolder&lt;/span&gt;(view);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onBindViewHolder(VH,%20int)&quot; rel=&quot;nofollow noreferrer&quot;&gt;onBindViewHolder (VH holder,int position)&lt;/a&gt; check where holder is an instance of &lt;code&gt;AdapterFemaleViewHolder&lt;/code&gt; or &lt;code&gt;AdapterMaleViewHolder&lt;/code&gt; by &lt;code&gt;instanceof&lt;/code&gt; and accordingly assign the values.&lt;/p&gt;\n&lt;p&gt;ViewHolder &lt;em&gt;may&lt;/em&gt; be like this&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AdapterMaleViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n            ...\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AdapterMaleViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt;{\n            ...\n            }\n        }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AdapterFemaleViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n         ...\n         &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AdapterFemaleViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt;{\n            ...\n         }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I recommend this library from Hannes Dorfmann. It encapsulates all the logic related to a particular view type in a separate object called &quot;AdapterDelegate&quot;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/sockeqwe/AdapterDelegates&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sockeqwe/AdapterDelegates&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CatAdapterDelegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AdapterDelegate&lt;/span&gt;&amp;lt;List&amp;lt;Animal&amp;gt;&amp;gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; LayoutInflater inflater;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;CatAdapterDelegate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Activity activity)&lt;/span&gt; {\n    inflater = activity.getLayoutInflater();\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isForViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; List&amp;lt;Animal&amp;gt; items, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items.get(position) &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Cat;\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CatViewHolder&lt;/span&gt;(inflater.inflate(R.layout.item_cat, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;));\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; List&amp;lt;Animal&amp;gt; items, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position,\n      &lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-meta&quot;&gt;@Nullable&lt;/span&gt; List&amp;lt;Object&amp;gt; payloads)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;CatViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (CatViewHolder) holder;\n    &lt;span class=&quot;hljs-type&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Cat) items.get(position);\n\n    vh.name.setText(cat.getName());\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CatViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TextView name;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;CatViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n      name = (TextView) itemView.findViewById(R.id.name);\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AnimalAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ListDelegationAdapter&lt;/span&gt;&amp;lt;List&amp;lt;Animal&amp;gt;&amp;gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AnimalAdapter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Activity activity, List&amp;lt;Animal&amp;gt; items)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// DelegatesManager is a protected Field in ListDelegationAdapter&lt;/span&gt;\n    delegatesManager.addDelegate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CatAdapterDelegate&lt;/span&gt;(activity))\n                    .addDelegate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DogAdapterDelegate&lt;/span&gt;(activity))\n                    .addDelegate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GeckoAdapterDelegate&lt;/span&gt;(activity))\n                    .addDelegate(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SnakeAdapterDelegate&lt;/span&gt;(activity));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the items from super class.&lt;/span&gt;\n    setItems(items);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If anyone is interested to see the super simple solution written in Kotlin, check the blogpost I just created. The example in the blogpost is based on creating Sectioned RecyclerView:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://brona.blog/2020/06/sectioned-recyclerview-in-three-steps/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://brona.blog/2020/06/sectioned-recyclerview-in-three-steps/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I firstly recommend you to read Hannes Dorfmann&apos;s &lt;a href=&quot;http://hannesdorfmann.com/android/adapter-delegates&quot; rel=&quot;nofollow noreferrer&quot;&gt;great article&lt;/a&gt; about this topic.&lt;/p&gt;\n&lt;p&gt;When a new view type comes, you have to edit your adapter and you have to handle so many messy things. Your adapter should be &lt;em&gt;open&lt;/em&gt; for extension, but &lt;em&gt;closed&lt;/em&gt; for modification.&lt;/p&gt;\n&lt;p&gt;You may check this two project, they can give the idea about how to handle different ViewTypes in Adapter:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sockeqwe/AdapterDelegates&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sockeqwe/AdapterDelegates&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ibrahimyilmaz/kiel&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ibrahimyilmaz/kiel&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Actually, I&apos;d like to improve on &lt;a href=&quot;https://stackoverflow.com/a/26245463/6523288&quot;&gt;Anton&apos;s answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;getItemViewType(int position)&lt;/code&gt; returns an integer value, you can return the layout resource ID you&apos;d need to inflate. That way you&apos;d save some logic in &lt;code&gt;onCreateViewHolder(ViewGroup parent, int viewType)&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;Also, I wouldn&apos;t suggest doing intensive calculations in &lt;code&gt;getItemCount()&lt;/code&gt; as that particular function is called at least 5 times while rendering the list, as well as while rendering each item beyond the visible items. Sadly since &lt;code&gt;notifyDatasetChanged()&lt;/code&gt; method is final, you can&apos;t really override it, but you can call it from another function within the adapter.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the library: &lt;a href=&quot;https://github.com/vivchar/RendererRecyclerViewAdapter&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/vivchar/RendererRecyclerViewAdapter&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mRecyclerViewAdapter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RendererRecyclerViewAdapter&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;/* Included from library */&lt;/span&gt;\nmRecyclerViewAdapter.registerRenderer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeViewRenderer&lt;/span&gt;(SomeModel.TYPE, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;));\nmRecyclerViewAdapter.registerRenderer(...); &lt;span class=&quot;hljs-comment&quot;&gt;/* You can use several types of cells */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For each item, you should to implement a ViewRenderer, ViewHolder, SomeModel:&lt;/p&gt;\n&lt;p&gt;ViewHolder - it is a simple view holder of recycler view.&lt;/p&gt;\n&lt;p&gt;SomeModel - it is your model with &lt;code&gt;ItemModel&lt;/code&gt; interface&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeViewRenderer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewRenderer&lt;/span&gt;&amp;lt;SomeModel, SomeViewHolder&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeViewRenderer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; type, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Context context)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(type, context);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bindView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SomeModel model, &lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SomeViewHolder holder)&lt;/span&gt; {\n        holder.mTitle.setText(model.getTitle());\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; SomeViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;createViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ViewGroup parent)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeViewHolder&lt;/span&gt;(LayoutInflater.from(getContext()).inflate(R.layout.some_item, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more details you can look at the documentation.&lt;/p&gt;\n    ","\n&lt;p&gt;View types implementation becomes easier with Kotlin. Here is a sample with this light library &lt;a href=&quot;https://github.com/Link184/KidAdapter&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Link184/KidAdapter&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;recyclerView.setUp {\n    withViewType {\n        withLayoutResId(R.layout.item_int)\n        withItems(mutableListOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;))\n        bind&amp;lt;Int&amp;gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// this - is adapter view hoder itemView, it - current item&lt;/span&gt;\n            intName.text = it.toString()\n        }\n    }\n\n\n    withViewType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SECOND_STRING_TAG&quot;&lt;/span&gt;) {\n        withLayoutResId(R.layout.item_text)\n        withItems(mutableListOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;eight&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;nine&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ten&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;eleven&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;twelve&quot;&lt;/span&gt;))\n        bind&amp;lt;String&amp;gt; {\n            stringName.text = it\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can deal with multipleViewTypes &lt;code&gt;RecyclerAdapter&lt;/code&gt; by making &lt;code&gt;getItemViewType()&lt;/code&gt; return the expected &lt;code&gt;viewType&lt;/code&gt; value for that position.&lt;/p&gt;\n&lt;p&gt;I prepared an &lt;code&gt;MultipleViewTypeAdapter&lt;/code&gt; for constructing an MCQ list for examinations which may throw a question that may have two or more valid answers (checkbox options) and a single answer questions (radiobutton options).&lt;/p&gt;\n&lt;p&gt;For this I get the type of question from the API response and I used that for deciding which view I have to show for that question.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MultiViewTypeAdapter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.Adapter {\n\n    Context mContext;\n    ArrayList&amp;lt;Question&amp;gt; dataSet;\n    ArrayList&amp;lt;String&amp;gt; questions;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Object radiobuttontype1;\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Viewholder to display Questions with checkboxes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Checkboxtype2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n        ImageView imgclockcheck;\n        CheckBox checkbox;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Checkboxtype2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; View itemView)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n            imgclockcheck = (ImageView) itemView.findViewById(R.id.clockout_cbox_image);\n            checkbox = (CheckBox) itemView.findViewById(R.id.clockout_cbox);\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Viewholder to display Questions with radiobuttons&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Radiobuttontype1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n        ImageView clockout_imageradiobutton;\n        RadioButton clockout_radiobutton;\n        TextView sample;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;radiobuttontype1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View itemView)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n            clockout_imageradiobutton = (ImageView) itemView.findViewById(R.id.clockout_imageradiobutton);\n            clockout_radiobutton = (RadioButton) itemView.findViewById(R.id.clockout_radiobutton);\n            sample = (TextView) itemView.findViewById(R.id.sample);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MultiViewTypeAdapter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ArrayList&amp;lt;QueDatum&amp;gt; data, Context context)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.dataSet = data;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mContext = context;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; ViewGroup viewGroup, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.clockout_radio_list_row, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;radiobuttontype1&lt;/span&gt;(view);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.clockout_cbox_list_row, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            view.setHorizontalFadingEdgeEnabled(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Checkboxtype2&lt;/span&gt;(view);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.clockout_radio_list_row, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Radiobuttontype1&lt;/span&gt;(view);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.clockout_radio_list_row, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Radiobuttontype1&lt;/span&gt;(view);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.clockout_radio_list_row, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Radiobuttontype1&lt;/span&gt;(view);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; RecyclerView.ViewHolder viewHolder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;)) {\n            options =  dataSet.get(i).getOptions();\n            question = dataSet.get(i).getQuestion();\n            image = options.get(i).getValue();\n            ((radiobuttontype1) viewHolder).clockout_radiobutton.setChecked(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            ((radiobuttontype1) viewHolder).sample.setText(question);\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Loading image bitmap in the ViewHolder&apos;s View&lt;/span&gt;\n            Picasso.with(mContext)\n                    .load(image)\n                    .into(((radiobuttontype1) viewHolder).clockout_imageradiobutton);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;)) {\n            options = (ArrayList&amp;lt;Clockout_questions_Option&amp;gt;) dataSet.get(i).getOptions();\n            question = dataSet.get(i).getQuestion();\n            image = options.get(i).getValue();\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Loading image bitmap in the ViewHolder&apos;s View&lt;/span&gt;\n            Picasso.with(mContext)\n                    .load(image)\n                    .into(((Checkboxtype2) viewHolder).imgclockcheck);\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Fit data to viewHolder for ViewType 3&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Fit data to viewHolder for ViewType 4&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType.equalsIgnoreCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Fit data to viewHolder for ViewType 5&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataSet.size();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Returns viewType for that position by picking the viewType value from the\n     *     dataset\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataSet.get(position).getViewType();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can avoid multiple conditionals based viewHolder data fillings in &lt;code&gt;onBindViewHolder()&lt;/code&gt; by assigning same ids for the similar views across viewHolders which differ in their positioning.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to use it in conjunction with Android Data Binding look into the &lt;a href=&quot;https://github.com/evant/binding-collection-adapter&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/evant/binding-collection-adapter&lt;/a&gt; - it is by far the best solution for the multiple view types &lt;code&gt;RecyclerView&lt;/code&gt; I have even seen.&lt;/p&gt;\n&lt;p&gt;You may use it like&lt;/p&gt;\n&lt;pre class=&quot;lang-kotlin s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; items: AsyncDiffPagedObservableList&amp;lt;BaseListItem&amp;gt; =\n        AsyncDiffPagedObservableList(GenericDiff)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; onItemBind: OnItemBind&amp;lt;BaseListItem&amp;gt; =\n        OnItemBind { itemBinding, _, item -&amp;gt; itemBinding.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(BR.item, item.layoutRes) }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then in the layout where the list is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &amp;lt;androidx.recyclerview.widget.RecyclerView\n                android:layout_width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;\n                android:layout_height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0dp&quot;&lt;/span&gt;\n                android:layout_weight=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;\n                app:enableAnimations=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@{false}&quot;&lt;/span&gt;\n                app:scrollToPosition=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@{viewModel.scrollPosition}&quot;&lt;/span&gt;\n\n                app:itemBinding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@{viewModel.onItemBind}&quot;&lt;/span&gt;\n                app:items=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@{viewModel.items}&quot;&lt;/span&gt;\n\n                app:reverseLayoutManager=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@{true}&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Your list items must implement the &lt;code&gt;BaseListItem&lt;/code&gt; interface which looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BaseListItem&lt;/span&gt; {\n    val layoutRes: Int\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And the item view should look something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;layout xmlns:android=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;\n\n    &amp;lt;data&amp;gt;\n\n        &amp;lt;variable\n                name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item&quot;&lt;/span&gt;\n                type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;...presentation.somescreen.list.YourListItem&quot;&lt;/span&gt;/&amp;gt;\n    &amp;lt;/data&amp;gt;\n\n   ...\n\n&amp;lt;/layout&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where &lt;code&gt;YourListItem&lt;/code&gt; implements &lt;code&gt;BaseListItem&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;First you must create two layout XML files. After that inside recyclerview adapter TYPE_CALL and TYPE_EMAIL are two static values with 1 and 2 respectively in the adapter class.&lt;/p&gt;\n&lt;p&gt;Now &lt;em&gt;define&lt;/em&gt; two static values at the Recycler view Adapter class level, for example: private static int TYPE_CALL = 1; private static int TYPE_EMAIL = 2;&lt;/p&gt;\n&lt;p&gt;Now create the view holder with multiple views like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CallViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; TextView txtName;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; TextView txtAddress;\n\n    CallViewHolder(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; View itemView) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n        txtName = itemView.findViewById(R.id.txtName);\n        txtAddress = itemView.findViewById(R.id.txtAddress);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EmailViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; TextView txtName;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; TextView txtAddress;\n\n    EmailViewHolder(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; View itemView) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(itemView);\n        txtName = itemView.findViewById(R.id.txtName);\n        txtAddress = itemView.findViewById(R.id.txtAddress);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now code as below in onCreateViewHolder and onBindViewHolder method in the recyclerview adapter:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; ViewGroup viewGroup, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n    View view;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (viewType == TYPE_CALL) { &lt;span class=&quot;hljs-comment&quot;&gt;// for call layout&lt;/span&gt;\n        view = LayoutInflater.from(context).inflate(R.layout.item_call, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CallViewHolder&lt;/span&gt;(view);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// for email layout&lt;/span&gt;\n        view = LayoutInflater.from(context).inflate(R.layout.item_email, viewGroup, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EmailViewHolder&lt;/span&gt;(view);\n    }\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; RecyclerView.ViewHolder viewHolder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getItemViewType(position) == TYPE_CALL) {\n        ((CallViewHolder) viewHolder).setCallDetails(employees.get(position));\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        ((EmailViewHolder) viewHolder).setEmailDetails(employees.get(position));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I did something like this. I passed &quot;fragmentType&quot; and created two &lt;code&gt;ViewHolders&lt;/code&gt; and on basis of this, I classified my Layouts accordingly in a single adapter that can have different &lt;code&gt;Layouts&lt;/code&gt; and &lt;code&gt;LayoutManagers&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Context mContext;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IOnLoyaltyCardCategoriesItemClicked mListener;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String fragmentType;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; View view;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LoyaltyCardsCategoriesRecyclerViewAdapter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context context, IOnLoyaltyCardCategoriesItemClicked itemListener, String fragmentType)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mContext = context;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mListener = itemListener;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.fragmentType = fragmentType;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LoyaltyCardCategoriesFragmentViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ImageView lc_categories_iv;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; TextView lc_categories_name_tv;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pos;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LoyaltyCardCategoriesFragmentViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(v);\n        view.setOnClickListener(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n        lc_categories_iv = (ImageView) v.findViewById(R.id.lc_categories_iv);\n        lc_categories_name_tv = (TextView) v.findViewById(R.id.lc_categories_name_tv);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos = pos;\n        lc_categories_iv.setImageResource(R.mipmap.ic_launcher);\n        lc_categories_name_tv.setText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loyalty Card Categories&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View view)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mListener != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            mListener.onLoyaltyCardCategoriesItemClicked(pos);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyLoyaltyCardsFragmentTagViewHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecyclerView&lt;/span&gt;.ViewHolder &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ImageButton lc_categories_btn;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pos;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyLoyaltyCardsFragmentTagViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(v);\n        lc_categories_btn = (ImageButton) v.findViewById(R.id.lc_categories_btn);\n        lc_categories_btn.setOnClickListener(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos = pos;\n        lc_categories_btn.setImageResource(R.mipmap.ic_launcher);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View view)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mListener != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            mListener.onLoyaltyCardCategoriesItemClicked(pos);\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; RecyclerView.ViewHolder &lt;span class=&quot;hljs-title function_&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fragmentType.equalsIgnoreCase(Constants.LoyaltyCardCategoriesFragmentTag)) {\n        view = LayoutInflater.from(mContext).inflate(R.layout.loyalty_cards_categories_frag_item, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LoyaltyCardCategoriesFragmentViewHolder&lt;/span&gt;(view);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fragmentType.equalsIgnoreCase(Constants.MyLoyaltyCardsFragmentTag)) {\n        view = LayoutInflater.from(mContext).inflate(R.layout.my_loyalty_cards_categories_frag_item, parent, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyLoyaltyCardsFragmentTagViewHolder&lt;/span&gt;(view);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@NonNull&lt;/span&gt; RecyclerView.ViewHolder holder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fragmentType.equalsIgnoreCase(Constants.LoyaltyCardCategoriesFragmentTag)) {\n        ((LoyaltyCardCategoriesFragmentViewHolder) holder).setData(position);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fragmentType.equalsIgnoreCase(Constants.MyLoyaltyCardsFragmentTag)) {\n        ((MyLoyaltyCardsFragmentTagViewHolder) holder).setData(position);\n    }\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I see there are a lot of great answers, incredibly detailed and extensive. In my case, I always understand things better if I follow along the reasoning from almost scratch, step by step. I would recommend you check this link out and whenever you have similar questions, search for any codelabs that address the issue.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developer.android.com/codelabs/kotlin-android-training-headers#0&quot; rel=&quot;nofollow noreferrer&quot;&gt;Android Kotlin Fundamentals: Headers in RecyclerView&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    "],"id":477,"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512","postType":"QUESTION","createdAt":"2022-07-09T17:35:21.000Z","updatedAt":"2022-07-09T17:35:21.000Z","tags":[{"id":2416,"name":"android-recyclerview","slug":"android-recyclerview","createdAt":"2022-07-09T17:35:21.000Z","updatedAt":"2022-07-09T17:35:21.000Z","Questions_Tags":{"questionId":477,"tagId":2416}}]}]}},"__N_SSG":true}